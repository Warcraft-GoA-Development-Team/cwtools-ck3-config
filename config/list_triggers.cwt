single_alias[any_trigger] = {
    ## cardinality = 0..1
    continue = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    percent = float[0.0..1.0]
    ## cardinality = 0..1
    count = alias_keys_field[int_value]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

###############################
# ACTIVITY SCOPE
###############################

### Iterate through all province locations of the phases of the activity, optionally limited to unique locations.
## scope = activity
## push_scope = province
alias[trigger:any_activity_phase_location] = {
    ## cardinality = 0..1
    continue = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    unique = bool
    ## cardinality = 0..1
    percent = float[0.0..1.0]
    ## cardinality = 0..1
    count = alias_keys_field[int_value]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all future province locations of the phases of the activity, optionally limited to unique locations. ('future' does not include any started phase)
## scope = activity
## push_scope = province
alias[trigger:any_activity_phase_location_future] = {
    ## cardinality = 0..1
    continue = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    unique = bool
    ## cardinality = 0..1
    percent = float[0.0..1.0]
    ## cardinality = 0..1
    count = alias_keys_field[int_value]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all past province locations of the phases of the activity, optionally limited to unique locations. ('past' only includes ended phases)
## scope = activity
## push_scope = province
alias[trigger:any_activity_phase_location_past] = {
    ## cardinality = 0..1
    continue = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    unique = bool
    ## cardinality = 0..1
    percent = float[0.0..1.0]
    ## cardinality = 0..1
    count = alias_keys_field[int_value]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all characters attending an activity.Supports an optional state the character must be in. any_attending_character = { state = travel/passive/active } any_attending_character = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = activity
## push_scope = character
alias[trigger:any_attending_character] = {
    ## cardinality = 0..1
    continue = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    percent = float[0.0..1.0]
    ## cardinality = 0..1
    count = alias_keys_field[int_value]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    ## cardinality = 0..1
    state = travel
    ## cardinality = 0..1
    state = passive
    ## cardinality = 0..1
    state = active
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterates through characteres within the specified subset for past, current and future phases. If phase is specified it will only iterate through characters subsets of that particular phase type. 
## scope = activity
## push_scope = character
alias[trigger:any_guest_subset] = {
    ## cardinality = 0..1
    continue = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    name = value[guest_subset]
    ## cardinality = 0..1
    phase = value[activity_phase]
    ## cardinality = 0..1
    percent = float[0.0..1.0]
    ## cardinality = 0..1
    count = alias_keys_field[int_value]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### any/every/random_guest_subset_current_phase = {
### 	name = <subset_key>
### }
### Iterates through characteres within the specified subset of the current phase.
## scope = activity
## push_scope = character
alias[trigger:any_guest_subset_current_phase] = {
    ## cardinality = 0..1
    continue = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    name = value[guest_subset]
    ## cardinality = 0..1
    phase = value[activity_phase]
    ## cardinality = 0..1
    percent = float[0.0..1.0]
    ## cardinality = 0..1
    count = alias_keys_field[int_value]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all counties in the region. Put 'region = region_name' inside it any_county_in_region = { <count=num/all> / <percent=fixed_point> <triggers> }
## push_scope = landed_title
alias[trigger:any_county_in_region] = {
    region = <geographical_region>
    ## cardinality = 0..1
    percent = float[0.0..1.0]
    ## cardinality = 0..1
    count = alias_keys_field[int_value]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

# ### true if any child is false (equivalent to NAND)
# alias[trigger:any_false] = {
#     alias_name[trigger] = alias_match_left[trigger]
# }

### Iterate through all items in global list. list = name or variable = name any_in_global_list = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_in_global_list] = {
    list = value[list]
    ## cardinality = 0..1
    percent = float[0.0..1.0]
    ## cardinality = 0..1
    count = alias_keys_field[int_value]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all items in global list. list = name or variable = name any_in_global_list = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_in_global_list] = {
    variable = value[global_variable_list]
    ## cardinality = 0..1
    percent = float[0.0..1.0]
    ## cardinality = 0..1
    count = alias_keys_field[int_value]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all items in list. list = name or variable = name any_in_list = { <count=num/all> / <percent=fixed_point> <triggers> }
## push_scope = any
alias[trigger:any_in_list] = {
    list = value[list]
    ## cardinality = 0..1
    percent = float[0.0..1.0]
    ## cardinality = 0..1
    count = alias_keys_field[int_value]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all items in list. list = name or variable = name any_in_list = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_in_list] = {
    variable = value[variable_list]
    ## cardinality = 0..1
    percent = float[0.0..1.0]
    ## cardinality = 0..1
    count = alias_keys_field[int_value]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all items in local list. list = name or variable = name any_in_local_list = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_in_local_list] = {
    list = value[list]
    ## cardinality = 0..1
    percent = float[0.0..1.0]
    ## cardinality = 0..1
    count = alias_keys_field[int_value]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all items in local list. list = name or variable = name any_in_local_list = { <count=num/all> / <percent=fixed_point> <triggers> }
alias[trigger:any_in_local_list] = {
    variable = value[local_variable_list]
    ## cardinality = 0..1
    percent = float[0.0..1.0]
    ## cardinality = 0..1
    count = alias_keys_field[int_value]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all characters in the pool of the given province any_pool_character = { <count=num/all> / <percent=fixed_point> <triggers> }
## push_scope = character
alias[trigger:any_pool_character] = {
    ## cardinality = 0..1
    continue = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    percent = float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    province = scope[province]
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all traits in a given category
## push_scope = character
alias[trigger:any_pool_character] = {
    category = enum[trait_category]
    ## cardinality = 0..1
    continue = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    percent = float[0.0..1.0]
    ## cardinality = 0..1
    count = alias_keys_field[int_value]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

# TODO Add optional parameter
### Iterate through all struggles that character is involved in. Optional: Narrow down the involvement status *_chracter_struggle = { involvement = involved | interloper } 
## scope = character
## push_scope = struggle
alias[trigger:any_character_struggle] = {
    ## cardinality = 0..1
    involvement = enum[involvement]
    ## cardinality = 0..1
    continue = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    percent = float[0.0..1.0]
    ## cardinality = 0..1
    count = alias_keys_field[int_value]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### IIterate through the titles of all claims held by a character; parameters: explicit = yes/no/all pressed = yes/no/all
## scope = character
## push_scope = landed_title
alias[trigger:any_claim] = {
    explicit = enum[yesnoall]
    pressed = enum[yesnoall]
    ## cardinality = 0..1
    continue = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    percent = float[0.0..1.0]
    ## cardinality = 0..1
    count = alias_keys_field[int_value]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all councillors any_councillor = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_court_position_holder] = {
    ## cardinality = 0..1
    continue = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    percent = float[0.0..1.0]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
    type = <court_position>
}

### Iterate through scripted relations of a given type any_relation = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_relation] = {
    type = <scripted_relation>
    ## cardinality = 0..1
    percent = float[0.0..1.0]
    ## cardinality = 0..1
    count = alias_keys_field[int_value]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all MaA regiments in the army scope:army = {	any_army_maa_regiment = {		include_hired = yes # should it include merc and holy order regiments (yes by default)	}}
## scope = army
## push_scope = regiment
alias[trigger:any_army_maa_regiment] = {
    ## cardinality = 0..1
    include_hired = bool
    ## cardinality = 0..1
    percent = float[0.0..1.0]
    ## cardinality = 0..1
    count = alias_keys_field[int_value]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all (both) parents
## scope = character
## push_scope = character
alias[trigger:any_parent] = {
    ## cardinality = 0..1
    even_if_dead = bool
    ## cardinality = 0..1
    continue = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    percent = float[0.0..1.0]
    ## cardinality = 0..1
    count = alias_keys_field[int_value]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all spouses
## scope = character
## push_scope = character
alias[trigger:any_spouse] = {
    ## cardinality = 0..1
    even_if_dead = bool
    ## cardinality = 0..1
    continue = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    percent = float[0.0..1.0]
    ## cardinality = 0..1
    count = alias_keys_field[int_value]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all children
## scope = character
## push_scope = character
alias[trigger:any_child] = {
    ## cardinality = 0..1
    even_if_dead = bool
    ## cardinality = 0..1
    continue = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    percent = float[0.0..1.0]
    ## cardinality = 0..1
    count = alias_keys_field[int_value]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all the ancestors of the scope character up to 5 generations
## scope = character
## push_scope = character
alias[trigger:any_ancestor] = {
    ## cardinality = 0..1
    even_if_dead = bool
    ## cardinality = 0..1
    continue = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    percent = float[0.0..1.0]
    ## cardinality = 0..1
    count = alias_keys_field[int_value]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all the close family [father, mother, siblings, children, grandparents]
## scope = character
## push_scope = character
alias[trigger:any_close_family_member] = {
    ## cardinality = 0..1
    even_if_dead = bool
    ## cardinality = 0..1
    continue = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    percent = float[0.0..1.0]
    ## cardinality = 0..1
    count = alias_keys_field[int_value]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all the close and extended relatives [father, mother, siblings, children, grandparents, uncles/aunts, nephew/niece, cousins]
## scope = character
## push_scope = character
alias[trigger:any_close_or_extended_family_member] = {
    ## cardinality = 0..1
    even_if_dead = bool
    ## cardinality = 0..1
    continue = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    percent = float[0.0..1.0]
    ## cardinality = 0..1
    count = alias_keys_field[int_value]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

### Iterate through all former spouses
## scope = character
## push_scope = character
alias[trigger:any_former_spouse] = {
    ## cardinality = 0..1
    even_if_dead = bool
    ## cardinality = 0..1
    continue = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    percent = float[0.0..1.0]
    ## cardinality = 0..1
    count = alias_keys_field[int_value]
    ## cardinality = 0..1
    count = int_value_field
    ## cardinality = 0..1
    count = all
    alias_name[trigger] = alias_match_left[trigger]
}

# Scopes from a character to a neighboring barony (looking trough the de Jure lieges) any_character_to_title_neighboring_barony = { <count=num/all> / <percent=fixed_point> <triggers> }
#alias[trigger:any_character_to_title_neighboring_barony] = {
#    ## cardinality = 0..1
#    percent = float[0.0..1.0]
#    ## cardinality = 0..1
#    count = int_value_field
#    ## cardinality = 0..1
#    count = all
#    alias_name[trigger] = alias_match_left[trigger]
#}