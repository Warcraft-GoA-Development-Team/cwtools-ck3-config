#####################################
#
# EVERY EFFECT
#
#####################################

#TODO: Doesn't work
singles_alias[every_effect] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

####################################
# DYNASTY SCOPE
####################################

### Iterate through all dynasty members every_dynasty_member = { limit = { <triggers> } <effects> }
## scope = dynasty
## push_scope = character
alias[effect:every_dynasty_member] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

####################################
# ACTIVITY SCOPE
####################################

### Iterate through all province locations of the phases of the activity, optionally limited to unique locations.
## scope = activity
## push_scope = province
alias[effect:every_activity_phase_location] = {
    ## cardinality = 0..1
    unique = bool
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all future province locations of the phases of the activity, optionally limited to unique locations. ('future' does not include any started phase)
## scope = activity
## push_scope = province
alias[effect:every_activity_phase_location_future] = {
    ## cardinality = 0..1
    unique = bool
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all past province locations of the phases of the activity, optionally limited to unique locations. ('past' only includes ended phases)
## scope = activity
## push_scope = province
alias[effect:every_activity_phase_location_past] = {
    ## cardinality = 0..1
    unique = bool
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all characters attending an activity. Invited guests that have not accepted/declined yet are not part of this list.Supports an optional state the character must be in.
## scope = activity
## push_scope = character
alias[effect:every_attending_character] = {
    ## cardinality = 0..1
    state = enum[activity_state]
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterates through characteres within the specified subset of the current phase.
## scope = activity
## push_scope = character
alias[effect:every_guest_subset] = {
    name = value[guest_subset]
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterates through characteres within the specified subset of the current phase.
## scope = activity
## push_scope = character
alias[effect:every_guest_subset_current_phase] = {
    name = value[guest_subset]
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all characters invited to an activity. Once they accept/decline, they are removed from this list.
## scope = activity
## push_scope = character
alias[effect:every_invited_character] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all special guests of an activity.
## scope = activity
## push_scope = character
alias[effect:every_special_guest] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}


####################################
# CULTURE SCOPE
####################################

### Iterate through all counties of the culture
## scope = culture
## push_scope = landed_title
alias[effect:every_culture_county] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all counties of the culture
## scope = culture
## push_scope = landed_title
alias[effect:every_culture_duchy] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all counties of the culture
## scope = culture
## push_scope = landed_title
alias[effect:every_culture_empire] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all counties of the culture
## scope = culture
## push_scope = landed_title
alias[effect:every_culture_kingdom] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all counties of the culture
## scope = culture
## push_scope = culture
alias[effect:every_parent_culture] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all counties of the culture
## scope = culture
## push_scope = culture
alias[effect:every_parent_culture_or_above] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all counties of the culture
## scope = culture
## push_scope = tradition
alias[effect:every_tradition] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

####################################
# CHARACTER_MEMORY SCOPE
####################################

### Iterate through all counties of the culture
## scope = memory
## push_scope = character
alias[effect:every_memory_participant] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

####################################
# TRAIT SCOPE
####################################

### Iterate through all opposite traits of the scoped trait
## scope = trait
## push_scope = trait
alias[effect:every_opposite_trait] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

####################################
# DYNASTY_HOUSE SCOPE
####################################

### Iterate through all claimed artifacts of the scoped house
## scope = dynasty_house
## push_scope = artifact
alias[effect:every_opposite_trait] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all house members
## scope = dynasty_house
## push_scope = character
alias[effect:every_opposite_trait] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all valid house unity members
## scope = dynasty_house
## push_scope = character
alias[effect:every_house_unity_member] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

####################################
# SECRET SCOPE
####################################

### Iterate through all characters who know the secret every_secret_knower = { limit = { <triggers> } <effects> }
## scope = secret
## push_scope = character
alias[effect:every_secret_knower] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through participants in a secret every_secret_participant = { limit = { <triggers> } <effects> }
## scope = secret
## push_scope = character
alias[effect:every_secret_participant] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

####################################
# RELIGION SCOPE
####################################

### Iterate through all faiths within a religion every_faith = { limit = { <triggers> } <effects> }
## scope = religion
## push_scope = faith
alias[effect:every_faith] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

####################################
# REGIMENT SCOPE
####################################

### Iterate through all MaA regiments in the army.  every_army_maa_regiment = { limit = { <triggers> } <effects> }
## scope = army
## push_scope = regiment
alias[effect:every_army_maa_regiment] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}


####################################
# TRAVEL_PLAN SCOPE
####################################

### Iterate through all characters travelling along with the travel plan owner. Includes travel leader, but not the travel plan owner.
## scope = travel_plan
## push_scope = character
alias[effect:every_entourage_character] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all provinces this travel plan has in its route.
## scope = travel_plan
## push_scope = province
alias[effect:every_future_path_location] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all provinces this travel plan has arrived at so far.
## scope = travel_plan
## push_scope = province
alias[effect:every_visited_location] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

####################################
# FAITH SCOPE
####################################

### Iterate through all great holy wars this faith is defending against every_defensive_great_holy_wars = { limit = { <triggers> } <effects> }
## scope = faith
## push_scope = ghw
alias[effect:every_defensive_great_holy_wars] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through characters of the scoped faith every_faith_character = { limit = { <triggers> } <effects> }
## scope = faith
## push_scope = character
alias[effect:every_faith_character] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all holy orders of the faith every_faith_holy_order = { limit = { <triggers> } <effects> }
## scope = faith
## push_scope = holy_order
alias[effect:every_faith_holy_order] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through playable rulers of the scoped faith
## scope = faith
## push_scope = character
alias[effect:every_faith_playable_ruler] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through playable rulers of the scoped faith
## scope = faith
## push_scope = charactr
alias[effect:every_faith_ruler] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all holy site provinces of a faith every_holy_site = { limit = { <triggers> } <effects> }
## scope = faith
## push_scope = holy_site
alias[effect:every_holy_site] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

####################################
# STRUGGLE SCOPE
####################################

### Iterate through all characters that are interloper in a struggle.
## scope = struggle
## push_scope = character
alias[effect:every_interloper_ruler] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all counties that are involved in a struggle
## scope = struggle
## push_scope = landed_title
alias[effect:every_involved_county] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all characters that are involved in a struggle.
## scope = struggle
## push_scope = character
alias[effect:every_involved_ruler] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

####################################
# GHW SCOPE
####################################

### Iterate through all pledged attackers within a great holy war every_pledged_attacker = { limit = { <triggers> } <effects> }
## scope = ghw
## push_scope = character
alias[effect:every_pledged_attacker] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all pledged defenders within a great holy war every_pledged_defender = { limit = { <triggers> } <effects> }
## scope = ghw
## push_scope = character
alias[effect:every_pledged_defender] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

####################################
# TAX_SLOT SCOPE
####################################

### Iterates through all Vassals assigned to the scoped Tax Slot
## scope = tax_slot
## push_scope = character
alias[effect:every_tax_slot_vassal] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

####################################
# CASUS_BELLI SCOPE
####################################

### Iterate through all casus belli's target titles every_target_title = { limit = { <triggers> } <effects> }
## scope = casus_belli
## push_scope = landed_title
alias[effect:every_target_title] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

####################################
# ARTIFACT SCOPE
####################################

### Iterate through all characters with a claim on the scoped artifact
## scope = artifact
## push_scope = character
alias[effect:every_artifact_claimant] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all dynasty houses with a claim on the scoped artifact
## scope = artifact
## push_scope = dynasty_house
alias[effect:every_artifact_house_claimant] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

####################################
# MULTI SCOPE
####################################

### Iterate through all kills of a character
## scope = { character artifact }
## push_scope = character
alias[effect:every_killed_character] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

####################################
# NONE SCOPE
####################################

### Undocumented
alias[effect:every_accolade_type] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all kills of a character
## push_scope = activity
alias[effect:every_activity] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Undodcumented
alias[effect:every_activity_type] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all existing artifacts
## push_scope = artifact
alias[effect:every_artifact] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all baronies in the game
## push_scope = landed_title
alias[effect:every_barony] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through every casus_belli_type in the database every_casus_belli_type = { limit = { <triggers> } <effects> }
## push_scope = casus_belli_type
alias[effect:every_casus_belli_type] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all characters with a royal court
## push_scope = character
alias[effect:every_character_with_royal_court] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all counties in the game
## push_scope = landed_title
alias[effect:every_county] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all counties in the region. Put 'region = region_name' inside it
## push_scope = landed_title
alias[effect:every_county_in_region] = {
    region = <geographical_region>
    ## cardinality = 0..1
    variable = value[global_variable]
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all cultures in the game
## push_scope = culture
alias[effect:every_culture_global] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Undocumented
alias[effect:every_culture_pillar] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Undocumented
alias[effect:every_culture_tradition] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Undocumented
alias[effect:every_decision] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Undocumented
alias[effect:every_doctrine] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all domiciles every_domicile = { limit = { <triggers> } <effects> }
## push_scope = domicile
alias[effect:every_domicile] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all duchies in the game
## push_scope = landed_title
alias[effect:every_duchy] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all empires in the game
## push_scope = landed_title
alias[effect:every_empire] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Undocumented
alias[effect:every_government_type] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Undocumented
alias[effect:every_holding_type] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all counties that are important for at least some title. every_important_location = { limit = { <triggers> } <effects> }
alias[effect:every_important_location] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all items in global list. list = name or variable = name
alias[effect:every_in_global_list] = {
    ## cardinality = 0..1
    list = value[list]
    ## cardinality = 0..1
    variable = value[global_variable]
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all items in list. list = name or variable = name
alias[effect:every_in_list] = {
    ## cardinality = 0..1
    list = value[list]
    ## cardinality = 0..1
    variable = value[variable]
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all items in local list. list = name or variable = name
alias[effect:every_in_local_list] = {
    ## cardinality = 0..1
    list = value[list]
    ## cardinality = 0..1
    variable = value[local_variable]
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Independent rulers list with a COUNT tier or above who hold land
## push_scope = character
alias[effect:every_independent_ruler] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all inspirations in the world
## push_scope = inspiration
alias[effect:every_inspiration] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all characters with an inspirations in the world
## push_scope = character
alias[effect:every_inspired_character] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all titles that are interested in any county every_interested_title = { limit = { <triggers> } <effects> }
## push_scope = landed_title
alias[effect:every_interested_title] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all kingdoms in the game
## push_scope = landed_title
alias[effect:every_kingdom] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Gets all legends in the world that have not been completed. every_legend = { limit = { <triggers> } <effects> }
## push_scope = legend
alias[effect:every_legend] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through every legend_type in the database. every_legend_type = { limit = { <triggers> } <effects> }
## push_scope = legend_type
alias[effect:every_legend_type] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all living characters
## push_scope = character
alias[effect:every_living_character] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all mercenary companies
## push_scope = mercenary_company
alias[effect:every_mercenary_company] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all kills of a character
## push_scope = character
alias[effect:every_player] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all player characters
## push_scope = activity
alias[effect:every_open_invite_activity] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all characters in the pool of the given province
## push_scope = character
alias[effect:every_pool_character] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all provinces (skips non-land and impassable provinces)
## push_scope = province
alias[effect:every_province] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all religions in the game
## push_scope = religion
alias[effect:every_religion_global] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Rulers list with a COUNT tier o above
## push_scope = character
alias[effect:every_ruler] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

###  Iterate through all provinces with a special building slot (built or un-built)
## push_scope = province
alias[effect:every_special_building_province] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Gets all available and accepted task contracts. every_task_contract = { limit = { <triggers> } <effects> }
## push_scope = task_contract
alias[effect:every_task_contract] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through every task_contract_type in the database every_task_contract_type = { limit = { <triggers> } <effects> }
## push_scope = task_contract_type
alias[effect:every_task_contract_type] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

###  Iterate through every trait in the database. every_trait = { limit = { <triggers> } <effects> }
## push_scope = trait
alias[effect:every_trait] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all traits in a given category. any_trait_in_category = { category = fame/health/etc } every_trait_in_category = { limit = { <triggers> } <effects> }
## push_scope = trait
alias[effect:every_trait_in_category] = {
    category = enum[trait_category]
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through every vassal_contract in the database. every_vassal_contract = { limit = { <triggers> } <effects> }
alias[effect:every_vassal_contract] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

####################################
# PROVINCE SCOPE
####################################

### Iterate through all armies currently located in the scoped province
## scope = province
## push_scope = army
alias[effect:every_army_in_location] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all characters currently located in the scoped province
## scope = province
## push_scope = character
alias[effect:every_character_in_location] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all neighboring provinces of a province
## scope = province
## push_scope = province
alias[effect:every_neighboring_province] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all domiciles of scoped province. every_province_domicile = { limit = { <triggers> }
## scope = province
## push_scope = domicile
alias[effect:every_province_domicile] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Gets epidemics affecting the scoped province. every_province_epidemic = { limit = { <triggers> } 
## scope = province
## push_scope = epidemic
alias[effect:every_province_epidemic] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Gets legends affecting the scoped province every_province_legend = { limit = { <triggers> } <effects> }
## scope = province
## push_scope = legend
alias[effect:every_province_legend] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

####################################
# WAR SCOPE
####################################

### Iterate through all attackers in the war every_war_attacker = { limit = { <triggers> } <effects> }
## scope = war
## push_scope = character
alias[effect:every_war_attacker] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all defenders in the war every_war_defender = { limit = { <triggers> } <effects> }
## scope = war
## push_scope = character
alias[effect:every_war_defender] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all participants in the war every_war_participant = { limit = { <triggers> } <effects> }
## scope = war
## push_scope = character
alias[effect:every_war_participant] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

####################################
# HOLY_ORDER SCOPE
####################################

### Iterate through all titles leased to a holy order every_leased_title = { limit = { <triggers> } <effects> }
## scope = holy_order
## push_scope = landed_title
alias[effect:every_leased_title] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

####################################
# LEGEND SCOPE
####################################

### Gets all promoters of the scoped legend. every_legend_promoter = { limit = { <triggers> } <effects> }
## scope = legend
## push_scope = character
alias[effect:every_legend_promoter] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Gets all provinces the scoped legend has spread into. every_spread_province = { limit = { <triggers> } <effects> }
## scope = legend
## push_scope = province
alias[effect:every_spread_province] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

####################################
# SCHEME SCOPE
####################################

### Iterate through all characters in agent slots in the scheme. every_scheme_agent_character = { limit = { <triggers> } <effects> }
## scope = scheme
## push_scope = character
alias[effect:every_scheme_agent_character] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all agent slots in the scheme. every_scheme_agent_slot = { limit = { <triggers> } <effects> }
## scope = scheme
## push_scope = agent_slot
alias[effect:every_scheme_agent_slot] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

####################################
# CHARACTER SCOPE
####################################

### Iterate through all acclaimed knights employed by a given character
## scope = character
## push_scope = character
alias[effect:every_acclaimed_knight] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all ( active and inactive ) Accolades of a given liege character's Acclaimed Knights
## scope = character
## push_scope = accolade
alias[effect:every_accolade] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all active Accolades of a given liege character's Acclaimed Knights
## scope = character
## push_scope = accolade
alias[effect:every_active_accolade] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all titles that can be created by the character. (only for alerts) every_alert_creatable_title = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:every_alert_creatable_title] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all titles that can be usurped by the character. (only for alerts) every_alert_usurpable_title = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:every_alert_usurpable_title] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all allies every_ally = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:every_ally] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all the ancestors of the scope character up to 5 generations every_ancestor = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:every_ancestor] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all armies every_army = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = army
alias[effect:every_army] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all task contracts of location of root province every_available_task_contract = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = task_contract
alias[effect:every_available_task_contract] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Gets all accepted task contracts of the root character every_character_active_contract = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = task_contract
alias[effect:every_character_active_contract] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all artifacts in a given characters inventory
## scope = character
## push_scope = artifact
alias[effect:every_character_artifact] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Gets epidemics affecting the scoped character every_character_epidemic = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = epidemic
alias[effect:every_character_epidemic] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all struggles that character is involved in. Optional: Narrow down the involvement status *_chracter_struggle = { involvement = involved | interloper }
## scope = character
## push_scope = struggle 
alias[effect:every_character_struggle] = {
    ## cardinality = 0..1
    involvement = enum[involvement_status]
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Gets all task contracts of the scoped character every_character_task_contract = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = task_contract
alias[effect:every_character_task_contract] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Scopes from a character to a neighboring barony (incl. across water, looking trough the de Jure lieges) every_character_to_title_neighboring_and_across_water_barony = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:every_character_to_title_neighboring_and_across_water_barony] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Scopes from a character to a neighboring county (incl. across water, looking trough the de Jure lieges) every_character_to_title_neighboring_and_across_water_county = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:every_character_to_title_neighboring_and_across_water_county] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Scopes from a character to a neighboring duchy (incl. across water, looking trough the de Jure lieges) every_character_to_title_neighboring_and_across_water_duchy = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:every_character_to_title_neighboring_and_across_water_duchy] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Scopes from a character to a neighboring empire (incl. across water, looking trough the de Jure lieges) every_character_to_title_neighboring_and_across_water_empire = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:every_character_to_title_neighboring_and_across_water_empire] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Scopes from a character to a neighboring kingdom (incl. across water, looking trough the de Jure lieges) every_character_to_title_neighboring_and_across_water_kingdom = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:every_character_to_title_neighboring_and_across_water_kingdom] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Scopes from a character to a neighboring barony (looking trough the de Jure lieges) every_character_to_title_neighboring_barony = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:every_character_to_title_neighboring_barony] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Scopes from a character to a neighboring county (looking trough the de Jure lieges) every_character_to_title_neighboring_county = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:every_character_to_title_neighboring_county] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Scopes from a character to a neighboring duchy (looking trough the de Jure lieges) every_character_to_title_neighboring_duchy = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:every_character_to_title_neighboring_duchy] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Scopes from a character to a neighboring empire (looking trough the de Jure lieges) every_character_to_title_neighboring_empire = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:every_character_to_title_neighboring_empire] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Scopes from a character to a neighboring kingdom (looking trough the de Jure lieges) every_character_to_title_neighboring_kingdom = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:every_character_to_title_neighboring_kingdom] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all traits a character has
## scope = character
## push_scope = trait
alias[effect:every_character_trait] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Wars of the scoped character every_character_war = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = war
alias[effect:every_character_war] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all children every_child = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:every_child] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

enums = {
    enum[yesnoall] = {
        yes
        no
        all
    }
}

### Iterate through the titles of all claims held by a character; parameters: explicit = yes/no/all pressed = yes/no/all every_claim = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:every_claim] = {
    explicit = enum[yesnoall]
    pressed = enum[yesnoall]
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all claimed artifacts of the scoped character
## scope = character
## push_scope = artifact
alias[effect:every_claimed_artifact] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all the close family [father, mother, siblings, children, grandparents] every_close_family_member = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:every_close_family_member] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
    ## cardinality = 0..1
    custom = localisation
}

### Iterate through all concubines every_concubine = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:every_concubine] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all consorts (concubines and spouses) every_consort = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:every_consort] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all contact characters of the root character every_contact = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:every_contact] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all councillors every_councillor = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:every_councillor] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterates through all characters that employ the scoped character in any court position.
## scope = character
## push_scope = character
alias[effect:every_court_position_employer] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterates through all characters employed by the scoped character in the target court position.
## scope = character
## push_scope = character
alias[effect:every_court_position_holder] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all courtiers every_courtier = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:every_courtier] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all courtiers that are away every_courtier_away = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:every_courtier_away] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all courtiers and guests (pool and foreign court guests) every_courtier_or_guest = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:every_courtier_or_guest] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all de jure claims for a character every_de_jure_claim = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:every_de_jure_claim] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all character in the diarchy line of succession.If there's no active diarchy or active one doesn't have succession,it iterates over regency candidates
## scope = character
## push_scope = character
alias[effect:every_diarchy_succession_character] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all diplomacy-based councillors every_diplomacy_councillor = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:every_diplomacy_councillor] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all directly owned provinces every_directly_owned_province = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = province
alias[effect:every_directly_owned_province] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all titles the scoped character can vote on every_election_title = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:every_election_title] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all equipped artifacts in a given characters inventory
## scope = character
## push_scope = artifact
alias[effect:every_equipped_character_artifact] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all the extended family [uncles/aunts, nephew/niece, cousins] every_extended_family_member = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:every_extended_family_member] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all guests visiting from another court (in contrast to pool_guest they have a liege) every_foreign_court_guest = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:every_foreign_court_guest] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all former concubines. Not persisted past death every_former_concubine = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:every_former_concubine] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all former concubinists. Not persisted past death every_former_concubinist = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:every_former_concubinist] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all former spouses every_former_spouse = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:every_former_spouse] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all councillors that are not related to a skill every_general_councillor = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:every_general_councillor] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Heirs of the scoped character every_heir = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:every_heir] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all titles the scoped character is heir to every_heir_title = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:every_heir_title] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all held landed titles every_held_title = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:every_held_title] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all hired mercenary companies every_hired_mercenary = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = mercenary_company
alias[effect:every_hired_mercenary] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all hostages currently abroad
## scope = character
## push_scope = character
alias[effect:every_home_court_hostage] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all characters this character has a hook on every_hooked_character = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:every_hooked_character] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through anyone the character is hostile to due to their top-liege's realm having been raided every_hostile_raider = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:every_hostile_raider] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all intrigue-based councillors every_intrigue_councillor = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:every_intrigue_councillor] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all activities a character has been invited to
## scope = character
## push_scope = activity
alias[effect:every_invited_activity] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all knights every_knight = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:every_knight] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all secrets known by the character every_known_secret = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = secret
alias[effect:every_known_secret] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all learning-based councillors every_learning_councillor = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:every_learning_councillor] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all lieges above a character (skipping the character themselves) every_liege_or_above = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:every_liege_or_above] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all MaA regiments every_maa_regiment = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = regiment
alias[effect:every_maa_regiment] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all martial-based councillors every_martial_councillor = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:every_martial_councillor] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all memories of a character
## scope = character
## push_scope = character_memory
alias[effect:every_memory] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### A sub-realm or realm bordering the scope character's realm (including across water) and has the same rank as the scope character (look for lieges of he owner of the land if necessary) every_neighboring_and_across_water_realm_same_rank_owner = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:every_neighboring_and_across_water_realm_same_rank_owner] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### A realm with a different top liege neighboring the realm of the scope character's top liege (including across water); switches to the realm's top title every_neighboring_and_across_water_top_liege_realm = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:every_neighboring_and_across_water_top_liege_realm] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### A realm with a different top liege neighboring the realm of the scope character's top liege (including across water); switches to the holder of the realm every_neighboring_and_across_water_top_liege_realm_owner = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:every_neighboring_and_across_water_top_liege_realm_owner] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### A sub-realm or realm bordering the scope character's realm and has the same rank as the scope character (look for lieges of he owner of the land if necessary) every_neighboring_realm_same_rank_owner = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:every_neighboring_realm_same_rank_owner] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### A realm with a different top liege neighboring the realm of the scope character's top liege; switches to the realm's top title every_neighboring_top_liege_realm = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:every_neighboring_top_liege_realm] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### A realm with a different top liege neighboring the realm of the scope character's top liege; switches to the holder of the realm every_neighboring_top_liege_realm_owner = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:every_neighboring_top_liege_realm_owner] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all noble family titles in the realm of scoped character every_noble_family = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:every_noble_family] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all the spouse candidates of the opposite sex of a character. WARNING: THIS IS VERY SLOW DO NOT DO IT OFTEN.
## scope = character
## push_scope = character
alias[effect:every_opposite_sex_spouse_candidate] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all owned stories for a character every_owned_story = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = story
alias[effect:every_owned_story] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all (both) parents every_parent = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:every_parent] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all holy orders that the scoped character is a patron of every_patroned_holy_order = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = holy_order
alias[effect:every_patroned_holy_order] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all personally claimed artifacts of the scoped character
## scope = character
## push_scope = artifact
alias[effect:every_personal_claimed_artifact] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through characters this player has pinned every_pinned_character = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:every_pinned_character] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through characters whose player has this character pinned every_pinning_character = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:every_pinning_character] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all characters the player playing this character has played. Matches the game over legacy, except for excluding the currently played character
## scope = character
## push_scope = character
alias[effect:every_played_character] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through player heirs, capped at the first 10 every_player_heir = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:every_player_heir] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Get all legends in a player character library. every_player_legend_library = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = legend
alias[effect:every_player_legend_library] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all guests visiting the court from the pool (in contrast to foreign_court_guest they don't have a liege) every_pool_guest = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:every_pool_guest] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all potential selectable marriage or betrohed options every_potential_marriage_option = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:every_potential_marriage_option] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all directly owned provinces. every_powerful_family = { limit = { <triggers> } <effects> } NOTE: Documented incorrected - the effect iterates through houses and not provinces
## scope = character
## push_scope = dynasty_house
alias[effect:every_powerful_family] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through the all powerful vassals of a character
## scope = character
## push_scope = character
alias[effect:every_powerful_vassal] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all landed titles character is pretender to every_pretender_title = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:every_pretender_title] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all primary war enemies every_primary_war_enemy = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:every_primary_war_enemy] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all prisoners every_prisoner = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:every_prisoner] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all prowess-based councillors every_prowess_councillor = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:every_prowess_councillor] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through anyone the character is hostile to due to having raided them. Only returns top lieges every_raid_target = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:every_raid_target] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all counties that are on the edge of your realm bordering a different neighboring realm. every_realm_border_county = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:every_realm_border_county] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all counties in the realm. Based on top liege  every_realm_county = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:every_realm_county] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all de jure duchies that have at least one county in the realm. Based on top liege  every_realm_de_jure_duchy = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:every_realm_de_jure_duchy] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all de jure empire that have at least one county in the realm. Based on top liege  every_realm_de_jure_empire = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:every_realm_de_jure_empire] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all de jure kingdom that have at least one county in the realm. Based on top liege  every_realm_de_jure_kingdom = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:every_realm_de_jure_kingdom] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all realm provinces of a character every_realm_province = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = province
alias[effect:every_realm_province] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through scripted relations of a given type every_relation = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:every_relation] = {
    type = <scripted_relation>
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all the spouse candidates of the same sex of a character. WARNING: THIS IS VERY SLOW DO NOT DO IT OFTEN.
## scope = character
## push_scope = character
alias[effect:every_same_sex_spouse_candidate] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all schemes owned by the character every_scheme = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = scheme
alias[effect:every_scheme] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all secrets of the character every_secret = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = secret
alias[effect:every_secret] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all siblings every_sibling = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:every_sibling] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all spouses every_spouse = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = inspiration
alias[effect:every_sponsored_inspiration] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all spouses every_spouse = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:every_spouse] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all the spouse candidates of a character. WARNING: THIS IS VERY SLOW DO NOT DO IT OFTEN. every_spouse_candidate = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:every_spouse_candidate] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all stewardship-based councillors every_stewardship_councillor = { limit = { <triggers> } <effects> }## scope = character
## push_scope = character
alias[effect:every_stewardship_councillor] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all baronies in sub-realm every_sub_realm_barony = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:every_sub_realm_barony] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all counties in sub-realm every_sub_realm_county = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:every_sub_realm_county] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all duchies in sub-realm every_sub_realm_duchy = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:every_sub_realm_duchy] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all empires in sub-realm every_sub_realm_empire = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:every_sub_realm_empire] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all kingdoms in sub-realm every_sub_realm_kingdom = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:every_sub_realm_kingdom] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all titles in sub-realm every_sub_realm_title = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:every_sub_realm_title] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all candidates supported by the scoped investor character for any title. It may contain people outside of investor's top realm or no longer valid for appointment. every_succession_appointment_invested_candidate = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:every_succession_appointment_invested_candidate] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all titles that has candidates supported by the scoped investor. It may contain titles outside of investor's top realm, and so invalid for appointment,and candidates may be already dead. every_succession_appointment_invested_title = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:every_succession_appointment_invested_title] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all factions targeting the scope character every_targeting_faction = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = faction
alias[effect:every_targeting_faction] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all schemes targeting the character every_targeting_scheme = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = scheme
alias[effect:every_targeting_scheme] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all secrets that target the specified scope every_targeting_secret = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = secret
alias[effect:every_targeting_secret] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterates through all Tax Collectors employed by the scoped character
## scope = character
## push_scope = character
alias[effect:every_tax_collector] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterates through all Tax Collectors employed by the scoped character
## scope = character
## push_scope = character
alias[effect:every_tax_collector_vassal] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterates through all Tax Collectors employed by the scoped character
## scope = character
## push_scope = tax_slot
alias[effect:every_tax_slot] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all counties that are on the edge of your realm bordering a different neighboring top realm. every_top_realm_border_county = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:every_top_realm_border_county] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate though all characters that should travel with the scoped one (when moving between courts for instance); includes the scoped character every_traveling_family_member = { limit = { <triggers> } <effects> }
alias[effect:every_traveling_family_member] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all characters that have a truce on this character every_truce_holder = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:every_truce_holder] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all characters this character has a truce on every_truce_target = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:every_truce_target] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterates through all unassigned taxpayers for scoped Character
## scope = character
## push_scope = character
alias[effect:every_unassigned_taxpayers] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all unspent secrets known by the character every_unspent_known_secret = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = secret
alias[effect:every_unspent_known_secret] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all DIRECT vassals every_vassal = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:every_vassal] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through ALL vassals, not just direct vassals every_vassal_or_below = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:every_vassal_or_below] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all direct war allies every_war_ally = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:every_war_ally] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all direct war enemies every_war_enemy = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:every_war_enemy] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all hostages having this warden
## scope = character
## push_scope = character
alias[effect:every_warden_hostage] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

####################################
# COMBAT SCOPE
####################################

### Iterate over both sides ( attacker and defender ) of the given combat
## scope = combat
## push_scope = combat_side
alias[effect:every_warden_hostage] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

####################################
# LANDED_TITLE SCOPE
####################################

### Iterate through all claimants to title every_claimant = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = character
alias[effect:every_claimant] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all counties connected to this one. Is based on top liege any/every/whatever_connectec_county = { 	max_naval_distance = 500 	allow_one_county_land_gap = yes every_connected_county = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = landed_title
alias[effect:every_connected_county] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all faiths headed by a title
## scope = landed_title
## push_scope = faith
alias[effect:every_controlled_faith] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through controlled title regiments. every_controlled_title_maa_regiment = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = regiment
alias[effect:every_controlled_title_maa_regiment] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all provinces in a county every_county_province = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = province
alias[effect:every_county_province] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all struggles that a county is involved in
## scope = landed_title
## push_scope = struggle
alias[effect:every_county_struggle] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all counties within this dejure title
## scope = landed_title
## push_scope = landed_title
alias[effect:every_de_jure_county] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all characters directly holding counties within this dejure title
## scope = landed_title
## push_scope = landed_title
alias[effect:every_de_jure_county_holder] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all top lieges of the counts within this dejure title every_de_jure_top_liege = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = character
alias[effect:every_de_jure_top_liege] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all the vassal holders of the title every_dejure_vassal_title_holder = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = character
alias[effect:every_dejure_vassal_title_holder] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all de facto vassal titles
## scope = landed_title
## push_scope = landed_title
alias[effect:every_direct_de_facto_vassal_title] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through the all de jure vassals titles
## scope = landed_title
## push_scope = landed_title
alias[effect:every_direct_de_jure_vassal_title] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all characters who are valid candidates in an election for a title every_election_candidate = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = character
alias[effect:every_election_candidate] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all characters who are valid electors in an election for a title every_elector = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = character
alias[effect:every_elector] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all counties that are important for the scoped title.every_important_location_for_title = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = landed_title
alias[effect:every_important_location_for_title] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through the title itself, all de jure vassals, and below. The continue trigger specifies whether to recursively iterate through the vassal's vassal This is unrelated to the limit; if the limit is met it is added to the list, but its vassals will get checked even if the limit isn't met as long as the 'continue' trigger is ..._de_jure_vassal_and_below = { continue = { conditions } } every_in_de_jure_hierarchy = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = landed_title
alias[effect:every_in_de_jure_hierarchy] = {
    ## cardinality = 0..1
    continue = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all neighboring counties. Can only be used in county scope every_neighboring_county = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = landed_title
alias[effect:every_neighboring_county] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through owned title MaA regiments every_owned_title_maa_regiment = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = regiment
alias[effect:every_owned_title_maa_regiment] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all past owners of a title from earliest to latest
## scope = landed_title
## push_scope = character
alias[effect:every_past_holder] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all past owners of a title from latest to earliest
## scope = landed_title
## push_scope = character
alias[effect:every_past_holder_reversed] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all investors of target candidate within the scoped title. Optionally specify a value to filter by investment amount scope:landed_title = {	any/every/ordered/random_succession_appointment_investors = {		candidate = cope:character		value > {			# Optional compare value to			value = 100		# only have characters that			add = 10		# have invested this much.		}	}}
## scope = landed_title
## push_scope = character
alias[effect:every_succession_appointment_investors] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through this title and all its dejure liege titles every_this_title_or_de_jure_above = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = landed_title
alias[effect:every_this_title_or_de_jure_above] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Line of succession for the scoped title every_title_heir = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = character
alias[effect:every_title_heir] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through titles that consider scoped county an important location.every_title_interested_in_location = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = landed_title
alias[effect:every_title_interested_in_location] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all factions joined the scope landed title every_title_joined_faction = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = faction
alias[effect:every_title_joined_faction] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through title all MaA regiments every_title_maa_regiment = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = regiment
alias[effect:every_title_maa_regiment] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Scopes from a title to a neighboring barony (incl. across water, looking trough the de Jure lieges) every_title_to_title_neighboring_and_across_water_barony = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = landed_title
alias[effect:every_title_to_title_neighboring_and_across_water_barony] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Scopes from a title to a neighboring county (incl. across water, looking trough the de Jure lieges) every_title_to_title_neighboring_and_across_water_county = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = landed_title
alias[effect:every_title_to_title_neighboring_and_across_water_county] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Scopes from a title to a neighboring duchy (incl. across water, looking trough the de Jure lieges) every_title_to_title_neighboring_and_across_water_duchy = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = landed_title
alias[effect:every_title_to_title_neighboring_and_across_water_duchy] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Scopes from a title to a neighboring empire (incl. across water, looking trough the de Jure lieges) every_title_to_title_neighboring_and_across_water_empire = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = landed_title
alias[effect:every_title_to_title_neighboring_and_across_water_empire] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Scopes from a title to a neighboring kingdom (incl. across water, looking trough the de Jure lieges) every_title_to_title_neighboring_and_across_water_kingdom = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = landed_title
alias[effect:every_title_to_title_neighboring_and_across_water_kingdom] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Scopes from a title to a neighboring barony (looking trough the de Jure lieges) every_title_to_title_neighboring_barony = { limit = { <triggers> } <effects> 
## scope = landed_title
## push_scope = landed_title
alias[effect:every_title_to_title_neighboring_barony] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Scopes from a title to a neighboring county (looking trough the de Jure lieges) every_title_to_title_neighboring_county = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = landed_title
alias[effect:every_title_to_title_neighboring_county] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Scopes from a title to a neighboring duchy (looking trough the de Jure lieges) every_title_to_title_neighboring_duchy = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = landed_title
alias[effect:every_title_to_title_neighboring_duchy] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Scopes from a title to a neighboring empire (looking trough the de Jure lieges) every_title_to_title_neighboring_empire = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = landed_title
alias[effect:every_title_to_title_neighboring_empire] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Scopes from a title to a neighboring kingdom (looking trough the de Jure lieges) every_title_to_title_neighboring_kingdom = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = landed_title
alias[effect:every_title_to_title_neighboring_kingdom] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

####################################
# FACTION SCOPE
####################################

### Iterate through all faction county members every_faction_county_member = { limit = { <triggers> } <effects> }
## scope = faction
## push_scope = landed_title
alias[effect:every_faction_county_member] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all faction character members every_faction_member = { limit = { <triggers> } <effects> }
## scope = faction
## push_scope = character
alias[effect:every_faction_member] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

####################################
# COMBAT_SIDE SCOPE
####################################

### Iterate through all commanders (the commanders of every army on the side, not just the one leading the battle) every_side_commander = { limit = { <triggers> } <effects> }
## scope = combat_side
## push_scope = character
alias[effect:every_side_commander] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all knights every_side_knight = { limit = { <triggers> } <effects> }
## scope = combat_side
## push_scope = character
alias[effect:every_side_knight] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

#####################################
#
# RANDOM EFFECT
#
#####################################

#TODO: Doesn't work
singles_alias[random_effect] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

####################################
# DYNASTY SCOPE
####################################

### Iterate through all dynasty members random_dynasty_member = { limit = { <triggers> } <effects> }
## scope = dynasty
## push_scope = character
alias[effect:random_dynasty_member] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

####################################
# ACTIVITY SCOPE
####################################

### Iterate through all province locations of the phases of the activity, optionally limited to unique locations.
## scope = activity
## push_scope = province
alias[effect:random_activity_phase_location] = {
    ## cardinality = 0..1
    unique = bool
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all future province locations of the phases of the activity, optionally limited to unique locations. ('future' does not include any started phase)
## scope = activity
## push_scope = province
alias[effect:random_activity_phase_location_future] = {
    ## cardinality = 0..1
    unique = bool
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all past province locations of the phases of the activity, optionally limited to unique locations. ('past' only includes ended phases)
## scope = activity
## push_scope = province
alias[effect:random_activity_phase_location_past] = {
    ## cardinality = 0..1
    unique = bool
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all characters attending an activity. Invited guests that have not accepted/declined yet are not part of this list.Supports an optional state the character must be in.
## scope = activity
## push_scope = character
alias[effect:random_attending_character] = {
    ## cardinality = 0..1
    state = enum[activity_state]
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterates through characteres within the specified subset of the current phase.
## scope = activity
## push_scope = character
alias[effect:random_guest_subset] = {
    name = value[guest_subset]
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterates through characteres within the specified subset of the current phase.
## scope = activity
## push_scope = character
alias[effect:random_guest_subset_current_phase] = {
    name = value[guest_subset]
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all characters invited to an activity. Once they accept/decline, they are removed from this list.
## scope = activity
## push_scope = character
alias[effect:random_invited_character] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all special guests of an activity.
## scope = activity
## push_scope = character
alias[effect:random_special_guest] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}


####################################
# CULTURE SCOPE
####################################

### Iterate through all counties of the culture
## scope = culture
## push_scope = landed_title
alias[effect:random_culture_county] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all counties of the culture
## scope = culture
## push_scope = landed_title
alias[effect:random_culture_duchy] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all counties of the culture
## scope = culture
## push_scope = landed_title
alias[effect:random_culture_empire] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all counties of the culture
## scope = culture
## push_scope = landed_title
alias[effect:random_culture_kingdom] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all counties of the culture
## scope = culture
## push_scope = culture
alias[effect:random_parent_culture] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all counties of the culture
## scope = culture
## push_scope = culture
alias[effect:random_parent_culture_or_above] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all counties of the culture
## scope = culture
## push_scope = tradition
alias[effect:random_tradition] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

####################################
# CHARACTER_MEMORY SCOPE
####################################

### Iterate through all counties of the culture
## scope = memory
## push_scope = character
alias[effect:random_memory_participant] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

####################################
# TRAIT SCOPE
####################################

### Iterate through all opposite traits of the scoped trait
## scope = trait
## push_scope = trait
alias[effect:random_opposite_trait] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

####################################
# DYNASTY_HOUSE SCOPE
####################################

### Iterate through all claimed artifacts of the scoped house
## scope = dynasty_house
## push_scope = artifact
alias[effect:random_opposite_trait] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all house members
## scope = dynasty_house
## push_scope = character
alias[effect:random_opposite_trait] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all valid house unity members
## scope = dynasty_house
## push_scope = character
alias[effect:random_house_unity_member] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

####################################
# SECRET SCOPE
####################################

### Iterate through all characters who know the secret random_secret_knower = { limit = { <triggers> } <effects> }
## scope = secret
## push_scope = character
alias[effect:random_secret_knower] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through participants in a secret random_secret_participant = { limit = { <triggers> } <effects> }
## scope = secret
## push_scope = character
alias[effect:random_secret_participant] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

####################################
# RELIGION SCOPE
####################################

### Iterate through all faiths within a religion random_faith = { limit = { <triggers> } <effects> }
## scope = religion
## push_scope = faith
alias[effect:random_faith] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

####################################
# REGIMENT SCOPE
####################################

### Iterate through all MaA regiments in the army.  random_army_maa_regiment = { limit = { <triggers> } <effects> }
## scope = army
## push_scope = regiment
alias[effect:random_army_maa_regiment] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

####################################
# TRAVEL_PLAN SCOPE
####################################

### Iterate through all characters travelling along with the travel plan owner. Includes travel leader, but not the travel plan owner.
## scope = travel_plan
## push_scope = character
alias[effect:random_entourage_character] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all provinces this travel plan has in its route.
## scope = travel_plan
## push_scope = province
alias[effect:random_future_path_location] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all provinces this travel plan has arrived at so far.
## scope = travel_plan
## push_scope = province
alias[effect:random_visited_location] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

####################################
# FAITH SCOPE
####################################

### Iterate through all great holy wars this faith is defending against random_defensive_great_holy_wars = { limit = { <triggers> } <effects> }
## scope = faith
## push_scope = ghw
alias[effect:random_defensive_great_holy_wars] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through characters of the scoped faith random_faith_character = { limit = { <triggers> } <effects> }
## scope = faith
## push_scope = character
alias[effect:random_faith_character] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all holy orders of the faith random_faith_holy_order = { limit = { <triggers> } <effects> }
## scope = faith
## push_scope = holy_order
alias[effect:random_faith_holy_order] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through playable rulers of the scoped faith
## scope = faith
## push_scope = character
alias[effect:random_faith_playable_ruler] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through playable rulers of the scoped faith
## scope = faith
## push_scope = charactr
alias[effect:random_faith_ruler] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all holy site provinces of a faith random_holy_site = { limit = { <triggers> } <effects> }
## scope = faith
## push_scope = holy_site
alias[effect:random_holy_site] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

####################################
# STRUGGLE SCOPE
####################################

### Iterate through all characters that are interloper in a struggle.
## scope = struggle
## push_scope = character
alias[effect:random_interloper_ruler] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all counties that are involved in a struggle
## scope = struggle
## push_scope = landed_title
alias[effect:random_involved_county] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all characters that are involved in a struggle.
## scope = struggle
## push_scope = character
alias[effect:random_involved_ruler] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

####################################
# GHW SCOPE
####################################

### Iterate through all pledged attackers within a great holy war random_pledged_attacker = { limit = { <triggers> } <effects> }
## scope = ghw
## push_scope = character
alias[effect:random_pledged_attacker] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all pledged defenders within a great holy war random_pledged_defender = { limit = { <triggers> } <effects> }
## scope = ghw
## push_scope = character
alias[effect:random_pledged_defender] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

####################################
# TAX_SLOT SCOPE
####################################

### Iterates through all Vassals assigned to the scoped Tax Slot
## scope = tax_slot
## push_scope = character
alias[effect:random_tax_slot_vassal] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

####################################
# CASUS_BELLI SCOPE
####################################

### Iterate through all casus belli's target titles random_target_title = { limit = { <triggers> } <effects> }
## scope = casus_belli
## push_scope = landed_title
alias[effect:random_target_title] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

####################################
# ARTIFACT SCOPE
####################################

### Iterate through all characters with a claim on the scoped artifact
## scope = artifact
## push_scope = character
alias[effect:random_artifact_claimant] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all dynasty houses with a claim on the scoped artifact
## scope = artifact
## push_scope = dynasty_house
alias[effect:random_artifact_house_claimant] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

####################################
# MULTI SCOPE
####################################

### Iterate through all kills of a character
## scope = { character artifact }
## push_scope = character
alias[effect:random_killed_character] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

####################################
# NONE SCOPE
####################################

### Undocumented
alias[effect:random_accolade_type] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all kills of a character
## push_scope = activity
alias[effect:random_activity] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Undodcumented
alias[effect:random_activity_type] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all existing artifacts
## push_scope = artifact
alias[effect:random_artifact] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all baronies in the game
## push_scope = landed_title
alias[effect:random_barony] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through every casus_belli_type in the database every_casus_belli_type = { limit = { <triggers> } <effects> }
## push_scope = casus_belli_type
alias[effect:random_casus_belli_type] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all characters with a royal court
## push_scope = character
alias[effect:random_character_with_royal_court] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all counties in the game
## push_scope = landed_title
alias[effect:random_county] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all counties in the region. Put 'region = region_name' inside it
## push_scope = landed_title
alias[effect:random_county_in_region] = {
    region = <geographical_region>
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all cultures in the game
## push_scope = culture
alias[effect:random_culture_global] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Undocumented
alias[effect:random_culture_pillar] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Undocumented
alias[effect:random_culture_tradition] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Undocumented
alias[effect:random_decision] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Undocumented
alias[effect:random_doctrine] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all domiciles random_domicile = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_domicile] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all duchies in the game
## push_scope = landed_title
alias[effect:random_duchy] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all empires in the game
## push_scope = landed_title
alias[effect:random_empire] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Undocumented
alias[effect:random_government_type] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Undocumented
alias[effect:random_holding_type] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}



### Iterate through all items in global list. list = name or variable = name
alias[effect:random_in_global_list] = {
    ## cardinality = 0..1
    list = value[list]
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all items in list. list = name or variable = name
alias[effect:random_in_list] = {
    ## cardinality = 0..1
    list = value[list]
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all items in local list. list = name or variable = name
alias[effect:random_in_local_list] = {
    ## cardinality = 0..1
    list = value[list]
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Independent rulers list with a COUNT tier or above who hold land
## push_scope = character
alias[effect:random_independent_ruler] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all inspirations in the world
## push_scope = inspiration
alias[effect:random_inspiration] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all characters with an inspirations in the world
## push_scope = character
alias[effect:random_inspired_character] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all kingdoms in the game
## push_scope = landed_title
alias[effect:random_kingdom] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all living characters
## push_scope = character
alias[effect:random_living_character] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all mercenary companies
## push_scope = mercenary_company
alias[effect:random_mercenary_company] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all kills of a character
## push_scope = character
alias[effect:random_player] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all player characters
## push_scope = activity
alias[effect:random_open_invite_activity] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all characters in the pool of the given province
## push_scope = character
alias[effect:random_pool_character] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all provinces (skips non-land and impassable provinces)
## push_scope = province
alias[effect:random_province] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all religions in the game
## push_scope = religion
alias[effect:random_religion_global] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Rulers list with a COUNT tier o above
## push_scope = character
alias[effect:random_ruler] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

###  Iterate through all provinces with a special building slot (built or un-built)
## push_scope = province
alias[effect:random_special_building_province] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Undocumented
## push_scope = trait
alias[effect:random_trait] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all traits in a given category
## push_scope = trait
alias[effect:random_trait_in_category] = {
    category = enum[trait_category]
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Undocumented
alias[effect:random_vassal_contract] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

####################################
# PROVINCE SCOPE
####################################

### Iterate through all armies currently located in the scoped province
## scope = province
## push_scope = army
alias[effect:random_army_in_location] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all characters currently located in the scoped province
## scope = province
## push_scope = character
alias[effect:random_character_in_location] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all neighboring provinces of a province
## scope = province
## push_scope = province
alias[effect:random_neighboring_province] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

####################################
# WAR SCOPE
####################################

### Iterate through all attackers in the war random_war_attacker = { limit = { <triggers> } <effects> }
## scope = war
## push_scope = character
alias[effect:random_war_attacker] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all defenders in the war random_war_defender = { limit = { <triggers> } <effects> }
## scope = war
## push_scope = character
alias[effect:random_war_defender] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all participants in the war random_war_participant = { limit = { <triggers> } <effects> }
## scope = war
## push_scope = character
alias[effect:random_war_participant] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

####################################
# HOLY_ORDER SCOPE
####################################

### Iterate through all titles leased to a holy order random_leased_title = { limit = { <triggers> } <effects> }
## scope = holy_order
## push_scope = landed_title
alias[effect:random_leased_title] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

####################################
# SCHEME SCOPE
####################################

### Iterate through all characters in agent slots in the scheme.random_scheme_agent_character = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
## scope = scheme
## push_scope = character
alias[effect:random_scheme_agent_character] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all characters in agent slots in the scheme.random_scheme_agent_slot = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
## scope = scheme
## push_scope = agent_slot
alias[effect:random_scheme_agent_slot] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

####################################
# CHARACTER SCOPE
####################################

### Iterate through all acclaimed knights employed by a given character
## scope = character
## push_scope = character
alias[effect:random_acclaimed_knight] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all ( active and inactive ) Accolades of a given liege character's Acclaimed Knights
## scope = character
## push_scope = accolade
alias[effect:random_accolade] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all active Accolades of a given liege character's Acclaimed Knights
## scope = character
## push_scope = accolade
alias[effect:random_active_accolade] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all titles that can be created by the character. (only for alerts) random_alert_creatable_title = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:random_alert_creatable_title] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all titles that can be usurped by the character. (only for alerts) random_alert_usurpable_title = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:random_alert_usurpable_title] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all allies random_ally = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:random_ally] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all the ancestors of the scope character up to 5 generations random_ancestor = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:random_ancestor] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all armies random_army = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = army
alias[effect:random_army] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all artifacts in a given characters inventory
## scope = character
## push_scope = artifact
alias[effect:random_character_artifact] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all struggles that character is involved in. Optional: Narrow down the involvement status *_chracter_struggle = { involvement = involved | interloper }
## scope = character
## push_scope = struggle 
alias[effect:random_character_struggle] = {
    ## cardinality = 0..1
    involvement = enum[involvement_status]
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Scopes from a character to a neighboring barony (incl. across water, looking trough the de Jure lieges) random_character_to_title_neighboring_and_across_water_barony = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:random_character_to_title_neighboring_and_across_water_barony] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Scopes from a character to a neighboring county (incl. across water, looking trough the de Jure lieges) random_character_to_title_neighboring_and_across_water_county = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:random_character_to_title_neighboring_and_across_water_county] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Scopes from a character to a neighboring duchy (incl. across water, looking trough the de Jure lieges) random_character_to_title_neighboring_and_across_water_duchy = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:random_character_to_title_neighboring_and_across_water_duchy] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Scopes from a character to a neighboring empire (incl. across water, looking trough the de Jure lieges) random_character_to_title_neighboring_and_across_water_empire = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:random_character_to_title_neighboring_and_across_water_empire] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Scopes from a character to a neighboring kingdom (incl. across water, looking trough the de Jure lieges) random_character_to_title_neighboring_and_across_water_kingdom = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:random_character_to_title_neighboring_and_across_water_kingdom] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Scopes from a character to a neighboring barony (looking trough the de Jure lieges) random_character_to_title_neighboring_barony = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:random_character_to_title_neighboring_barony] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Scopes from a character to a neighboring county (looking trough the de Jure lieges) random_character_to_title_neighboring_county = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:random_character_to_title_neighboring_county] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Scopes from a character to a neighboring duchy (looking trough the de Jure lieges) random_character_to_title_neighboring_duchy = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:random_character_to_title_neighboring_duchy] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Scopes from a character to a neighboring empire (looking trough the de Jure lieges) random_character_to_title_neighboring_empire = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:random_character_to_title_neighboring_empire] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Scopes from a character to a neighboring kingdom (looking trough the de Jure lieges) random_character_to_title_neighboring_kingdom = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:random_character_to_title_neighboring_kingdom] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all traits a character has
## scope = character
## push_scope = trait
alias[effect:random_character_trait] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Wars of the scoped character random_character_war = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = war
alias[effect:random_character_war] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all children random_child = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:random_child] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}


### Iterate through the titles of all claims held by a character; parameters: explicit = yes/no/all pressed = yes/no/all random_claim = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:random_claim] = {
    explicit = enum[yesnoall]
    pressed = enum[yesnoall]
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all claimed artifacts of the scoped character
## scope = character
## push_scope = artifact
alias[effect:random_claimed_artifact] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all the close family [father, mother, siblings, children, grandparents] random_close_family_member = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:random_close_family_member] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all concubines random_concubine = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:random_concubine] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all consorts (concubines and spouses) random_consort = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:random_consort] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all councillors random_councillor = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:random_councillor] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterates through all characters that employ the scoped character in any court position.
## scope = character
## push_scope = character
alias[effect:random_court_position_employer] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterates through all characters employed by the scoped character in the target court position.
## scope = character
## push_scope = character
alias[effect:random_court_position_holder] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all courtiers random_courtier = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:random_courtier] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all courtiers that are away random_courtier_away = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:random_courtier_away] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all courtiers and guests (pool and foreign court guests) random_courtier_or_guest = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:random_courtier_or_guest] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all de jure claims for a character random_de_jure_claim = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:random_de_jure_claim] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all character in the diarchy line of succession.If there's no active diarchy or active one doesn't have succession,it iterates over regency candidates
## scope = character
## push_scope = character
alias[effect:random_diarchy_succession_character] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all diplomacy-based councillors random_diplomacy_councillor = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:random_diplomacy_councillor] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all directly owned provinces random_directly_owned_province = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = province
alias[effect:random_directly_owned_province] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all titles the scoped character can vote on random_election_title = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:random_election_title] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all equipped artifacts in a given characters inventory
## scope = character
## push_scope = artifact
alias[effect:random_equipped_character_artifact] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all the extended family [uncles/aunts, nephew/niece, cousins] random_extended_family_member = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:random_extended_family_member] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all guests visiting from another court (in contrast to pool_guest they have a liege) random_foreign_court_guest = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:random_foreign_court_guest] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all former concubines. Not persisted past death random_former_concubine = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:random_former_concubine] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all former concubinists. Not persisted past death random_former_concubinist = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:random_former_concubinist] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all former spouses random_former_spouse = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:random_former_spouse] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all councillors that are not related to a skill random_general_councillor = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:random_general_councillor] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Heirs of the scoped character random_heir = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:random_heir] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all titles the scoped character is heir to random_heir_title = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:random_heir_title] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all held landed titles random_held_title = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:random_held_title] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all hired mercenary companies random_hired_mercenary = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = mercenary_company
alias[effect:random_hired_mercenary] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all hostages currently abroad
## scope = character
## push_scope = character
alias[effect:random_home_court_hostage] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all characters this character has a hook on random_hooked_character = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:random_hooked_character] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through anyone the character is hostile to due to their top-liege's realm having been raided random_hostile_raider = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:random_hostile_raider] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all intrigue-based councillors random_intrigue_councillor = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:random_intrigue_councillor] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all activities a character has been invited to
## scope = character
## push_scope = activity
alias[effect:random_invited_activity] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all knights random_knight = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:random_knight] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all secrets known by the character random_known_secret = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = secret
alias[effect:random_known_secret] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all learning-based councillors random_learning_councillor = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:random_learning_councillor] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all lieges above a character (skipping the character themselves) random_liege_or_above = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:random_liege_or_above] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all martial-based councillors random_martial_councillor = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:random_martial_councillor] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all memories of a character
## scope = character
## push_scope = character_memory
alias[effect:random_memory] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### A sub-realm or realm bordering the scope character's realm (including across water) and has the same rank as the scope character (look for lieges of he owner of the land if necessary) random_neighboring_and_across_water_realm_same_rank_owner = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:random_neighboring_and_across_water_realm_same_rank_owner] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### A realm with a different top liege neighboring the realm of the scope character's top liege (including across water); switches to the realm's top title random_neighboring_and_across_water_top_liege_realm = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:random_neighboring_and_across_water_top_liege_realm] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### A realm with a different top liege neighboring the realm of the scope character's top liege (including across water); switches to the holder of the realm random_neighboring_and_across_water_top_liege_realm_owner = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:random_neighboring_and_across_water_top_liege_realm_owner] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### A sub-realm or realm bordering the scope character's realm and has the same rank as the scope character (look for lieges of he owner of the land if necessary) random_neighboring_realm_same_rank_owner = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:random_neighboring_realm_same_rank_owner] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### A realm with a different top liege neighboring the realm of the scope character's top liege; switches to the realm's top title random_neighboring_top_liege_realm = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:random_neighboring_top_liege_realm] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### A realm with a different top liege neighboring the realm of the scope character's top liege; switches to the holder of the realm random_neighboring_top_liege_realm_owner = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:random_neighboring_top_liege_realm_owner] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all the spouse candidates of the opposite sex of a character. WARNING: THIS IS VERY SLOW DO NOT DO IT OFTEN.
## scope = character
## push_scope = character
alias[effect:random_opposite_sex_spouse_candidate] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all owned stories for a character random_owned_story = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = story
alias[effect:random_owned_story] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all (both) parents random_parent = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:random_parent] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all holy orders that the scoped character is a patron of random_patroned_holy_order = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = holy_order
alias[effect:random_patroned_holy_order] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all personally claimed artifacts of the scoped character
## scope = character
## push_scope = artifact
alias[effect:random_personal_claimed_artifact] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through characters this player has pinned random_pinned_character = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:random_pinned_character] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through characters whose player has this character pinned random_pinning_character = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:random_pinning_character] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all characters the player playing this character has played. Matches the game over legacy, except for excluding the currently played character
## scope = character
## push_scope = character
alias[effect:random_played_character] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through player heirs, capped at the first 10 random_player_heir = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:random_player_heir] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all guests visiting the court from the pool (in contrast to foreign_court_guest they don't have a liege) random_pool_guest = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:random_pool_guest] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all potential selectable marriage or betrohed options random_potential_marriage_option = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:random_potential_marriage_option] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through the all powerful vassals of a character
## scope = character
## push_scope = character
alias[effect:random_powerful_vassal] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all landed titles character is pretender to random_pretender_title = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:random_pretender_title] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all primary war enemies random_primary_war_enemy = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:random_primary_war_enemy] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all prisoners random_prisoner = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:random_prisoner] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all prowess-based councillors random_prowess_councillor = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:random_prowess_councillor] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through anyone the character is hostile to due to having raided them. Only returns top lieges random_raid_target = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:random_raid_target] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all counties in the realm. Based on top liege  random_realm_county = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:random_realm_county] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all de jure duchies that have at least one county in the realm. Based on top liege  random_realm_de_jure_duchy = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:random_realm_de_jure_duchy] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all de jure empire that have at least one county in the realm. Based on top liege  random_realm_de_jure_empire = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:random_realm_de_jure_empire] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all de jure kingdom that have at least one county in the realm. Based on top liege  random_realm_de_jure_kingdom = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:random_realm_de_jure_kingdom] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all realm provinces of a character random_realm_province = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = province
alias[effect:random_realm_province] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through scripted relations of a given type random_relation = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:random_relation] = {
    type = <scripted_relation>
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all the spouse candidates of the same sex of a character. WARNING: THIS IS VERY SLOW DO NOT DO IT OFTEN.
## scope = character
## push_scope = character
alias[effect:random_same_sex_spouse_candidate] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all schemes owned by the character random_scheme = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = scheme
alias[effect:random_scheme] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all secrets of the character random_secret = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = secret
alias[effect:random_secret] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all siblings random_sibling = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:random_sibling] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all spouses random_spouse = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = inspiration
alias[effect:random_sponsored_inspiration] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all spouses random_spouse = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:random_spouse] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all the spouse candidates of a character. WARNING: THIS IS VERY SLOW DO NOT DO IT OFTEN. random_spouse_candidate = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:random_spouse_candidate] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all stewardship-based councillors random_stewardship_councillor = { limit = { <triggers> } <effects> }## scope = character
## push_scope = character
alias[effect:random_stewardship_councillor] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all baronies in sub-realm random_sub_realm_barony = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:random_sub_realm_barony] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all counties in sub-realm random_sub_realm_county = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:random_sub_realm_county] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all duchies in sub-realm random_sub_realm_duchy = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:random_sub_realm_duchy] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all empires in sub-realm random_sub_realm_empire = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:random_sub_realm_empire] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all kingdoms in sub-realm random_sub_realm_kingdom = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:random_sub_realm_kingdom] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all titles in sub-realm random_sub_realm_title = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:random_sub_realm_title] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all factions targeting the scope character random_targeting_faction = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = faction
alias[effect:random_targeting_faction] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all schemes targeting the character random_targeting_scheme = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = scheme
alias[effect:random_targeting_scheme] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all secrets that target the specified scope random_targeting_secret = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = secret
alias[effect:random_targeting_secret] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterates through all Tax Collectors employed by the scoped character
## scope = character
## push_scope = character
alias[effect:random_tax_collector] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterates through all Tax Collectors employed by the scoped character
## scope = character
## push_scope = character
alias[effect:random_tax_collector_vassal] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterates through all Tax Collectors employed by the scoped character
## scope = character
## push_scope = tax_slot
alias[effect:random_tax_slot] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate though all characters that should travel with the scoped one (when moving between courts for instance); includes the scoped character random_traveling_family_member = { limit = { <triggers> } <effects> }
alias[effect:random_traveling_family_member] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all characters that have a truce on this character random_truce_holder = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:random_truce_holder] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all characters this character has a truce on random_truce_target = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:random_truce_target] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterates through all unassigned taxpayers for scoped Character
## scope = character
## push_scope = character
alias[effect:random_unassigned_taxpayers] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all unspent secrets known by the character random_unspent_known_secret = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = secret
alias[effect:random_unspent_known_secret] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all DIRECT vassals random_vassal = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:random_vassal] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through ALL vassals, not just direct vassals random_vassal_or_below = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:random_vassal_or_below] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all direct war allies random_war_ally = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:random_war_ally] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all direct war enemies random_war_enemy = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:random_war_enemy] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all hostages having this warden
## scope = character
## push_scope = character
alias[effect:random_warden_hostage] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

####################################
# COMBAT SCOPE
####################################

### Iterate over both sides ( attacker and defender ) of the given combat
## scope = combat
## push_scope = combat_side
alias[effect:random_warden_hostage] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

####################################
# LANDED_TITLE SCOPE
####################################

### Iterate through all claimants to title random_claimant = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = character
alias[effect:random_claimant] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all counties connected to this one. Is based on top liege any/every/whatever_connectec_county = { 	max_naval_distance = 500 	allow_one_county_land_gap = yes random_connected_county = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = landed_title
alias[effect:random_connected_county] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all faiths headed by a title
## scope = landed_title
## push_scope = faith
alias[effect:random_controlled_faith] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all provinces in a county random_county_province = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = province
alias[effect:random_county_province] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all struggles that a county is involved in
## scope = landed_title
## push_scope = struggle
alias[effect:random_county_struggle] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all counties within this dejure title
## scope = landed_title
## push_scope = landed_title
alias[effect:random_de_jure_county] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all characters directly holding counties within this dejure title
## scope = landed_title
## push_scope = landed_title
alias[effect:random_de_jure_county_holder] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all top lieges of the counts within this dejure title random_de_jure_top_liege = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = character
alias[effect:random_de_jure_top_liege] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all the vassal holders of the title random_dejure_vassal_title_holder = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = character
alias[effect:random_dejure_vassal_title_holder] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all de facto vassal titles
## scope = landed_title
## push_scope = landed_title
alias[effect:random_direct_de_facto_vassal_title] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through the all de jure vassals titles
## scope = landed_title
## push_scope = landed_title
alias[effect:random_direct_de_jure_vassal_title] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all characters who are valid candidates in an election for a title random_election_candidate = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = character
alias[effect:random_election_candidate] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all characters who are valid electors in an election for a title random_elector = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = character
alias[effect:random_elector] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through the title itself, all de facto vassals, and below. The continue trigger specifies whether to recursively iterate through the vassal's vassal This is unrelated to the limit; if the limit is met it is added to the list, but its vassals will get checked even if the limit isn't met as long as the 'continue' trigger is ..._de_jure_vassal_and_below = { continue = { conditions } } random_in_de_facto_hierarchy = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = landed_title
alias[effect:random_in_de_facto_hierarchy] = {
    continue = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through the title itself, all de jure vassals, and below. The continue trigger specifies whether to recursively iterate through the vassal's vassal This is unrelated to the limit; if the limit is met it is added to the list, but its vassals will get checked even if the limit isn't met as long as the 'continue' trigger is ..._de_jure_vassal_and_below = { continue = { conditions } } random_in_de_jure_hierarchy = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = landed_title
alias[effect:random_in_de_jure_hierarchy] = {
    continue = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all neighboring counties. Can only be used in county scope random_neighboring_county = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = landed_title
alias[effect:random_neighboring_county] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all past owners of a title from earliest to latest
## scope = landed_title
## push_scope = character
alias[effect:random_past_holder] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all past owners of a title from latest to earliest
## scope = landed_title
## push_scope = character
alias[effect:random_past_holder_reversed] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through this title and all its dejure liege titles random_this_title_or_de_jure_above = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = landed_title
alias[effect:random_this_title_or_de_jure_above] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Line of succession for the scoped title random_title_heir = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = character
alias[effect:random_title_heir] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all factions joined the scope landed title random_title_joined_faction = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = faction
alias[effect:random_title_joined_faction] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Scopes from a title to a neighboring barony (incl. across water, looking trough the de Jure lieges) random_title_to_title_neighboring_and_across_water_barony = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = landed_title
alias[effect:random_title_to_title_neighboring_and_across_water_barony] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Scopes from a title to a neighboring county (incl. across water, looking trough the de Jure lieges) random_title_to_title_neighboring_and_across_water_county = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = landed_title
alias[effect:random_title_to_title_neighboring_and_across_water_county] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Scopes from a title to a neighboring duchy (incl. across water, looking trough the de Jure lieges) random_title_to_title_neighboring_and_across_water_duchy = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = landed_title
alias[effect:random_title_to_title_neighboring_and_across_water_duchy] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Scopes from a title to a neighboring empire (incl. across water, looking trough the de Jure lieges) random_title_to_title_neighboring_and_across_water_empire = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = landed_title
alias[effect:random_title_to_title_neighboring_and_across_water_empire] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Scopes from a title to a neighboring kingdom (incl. across water, looking trough the de Jure lieges) random_title_to_title_neighboring_and_across_water_kingdom = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = landed_title
alias[effect:random_title_to_title_neighboring_and_across_water_kingdom] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Scopes from a title to a neighboring barony (looking trough the de Jure lieges) random_title_to_title_neighboring_barony = { limit = { <triggers> } <effects> 
## scope = landed_title
## push_scope = landed_title
alias[effect:random_title_to_title_neighboring_barony] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Scopes from a title to a neighboring county (looking trough the de Jure lieges) random_title_to_title_neighboring_county = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = landed_title
alias[effect:random_title_to_title_neighboring_county] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Scopes from a title to a neighboring duchy (looking trough the de Jure lieges) random_title_to_title_neighboring_duchy = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = landed_title
alias[effect:random_title_to_title_neighboring_duchy] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Scopes from a title to a neighboring empire (looking trough the de Jure lieges) random_title_to_title_neighboring_empire = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = landed_title
alias[effect:random_title_to_title_neighboring_empire] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Scopes from a title to a neighboring kingdom (looking trough the de Jure lieges) random_title_to_title_neighboring_kingdom = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = landed_title
alias[effect:random_title_to_title_neighboring_kingdom] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

####################################
# FACTION SCOPE
####################################

### Iterate through all faction county members random_faction_county_member = { limit = { <triggers> } <effects> }
## scope = faction
## push_scope = landed_title
alias[effect:random_faction_county_member] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all faction character members random_faction_member = { limit = { <triggers> } <effects> }
## scope = faction
## push_scope = character
alias[effect:random_faction_member] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

####################################
# COMBAT_SIDE SCOPE
####################################

### Iterate through all commanders (the commanders of every army on the side, not just the one leading the battle) random_side_commander = { limit = { <triggers> } <effects> }
## scope = combat_side
## push_scope = character
alias[effect:random_side_commander] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all knights random_side_knight = { limit = { <triggers> } <effects> }
## scope = combat_side
## push_scope = character
alias[effect:random_side_knight] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

#####################################
#
# ORDERED EFFECT
#
#####################################

#TODO: Doesn't work
singles_alias[ordered_effect] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

####################################
# DYNASTY SCOPE
####################################

### Iterate through all dynasty members ordered_dynasty_member = { limit = { <triggers> } <effects> }
## scope = dynasty
## push_scope = character
alias[effect:ordered_dynasty_member] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

####################################
# ACTIVITY SCOPE
####################################

### Iterate through all province locations of the phases of the activity, optionally limited to unique locations.
## scope = activity
## push_scope = province
alias[effect:ordered_activity_phase_location] = {
    ## cardinality = 0..1
    unique = bool
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all future province locations of the phases of the activity, optionally limited to unique locations. ('future' does not include any started phase)
## scope = activity
## push_scope = province
alias[effect:ordered_activity_phase_location_future] = {
    ## cardinality = 0..1
    unique = bool
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all past province locations of the phases of the activity, optionally limited to unique locations. ('past' only includes ended phases)
## scope = activity
## push_scope = province
alias[effect:ordered_activity_phase_location_past] = {
    ## cardinality = 0..1
    unique = bool
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all characters attending an activity. Invited guests that have not accepted/declined yet are not part of this list.Supports an optional state the character must be in.
## scope = activity
## push_scope = character
alias[effect:ordered_attending_character] = {
    ## cardinality = 0..1
    state = enum[activity_state]
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterates through characteres within the specified subset of the current phase.
## scope = activity
## push_scope = character
alias[effect:ordered_guest_subset] = {
    name = value[guest_subset]
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterates through characteres within the specified subset of the current phase.
## scope = activity
## push_scope = character
alias[effect:ordered_guest_subset_current_phase] = {
    name = value[guest_subset]
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all characters invited to an activity. Once they accept/decline, they are removed from this list.
## scope = activity
## push_scope = character
alias[effect:ordered_invited_character] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all special guests of an activity.
## scope = activity
## push_scope = character
alias[effect:ordered_special_guest] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}


####################################
# CULTURE SCOPE
####################################

### Iterate through all counties of the culture
## scope = culture
## push_scope = landed_title
alias[effect:ordered_culture_county] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all counties of the culture
## scope = culture
## push_scope = landed_title
alias[effect:ordered_culture_duchy] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all counties of the culture
## scope = culture
## push_scope = landed_title
alias[effect:ordered_culture_empire] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all counties of the culture
## scope = culture
## push_scope = landed_title
alias[effect:ordered_culture_kingdom] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all counties of the culture
## scope = culture
## push_scope = culture
alias[effect:ordered_parent_culture] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all counties of the culture
## scope = culture
## push_scope = culture
alias[effect:ordered_parent_culture_or_above] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all counties of the culture
## scope = culture
## push_scope = tradition
alias[effect:ordered_tradition] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

####################################
# CHARACTER_MEMORY SCOPE
####################################

### Iterate through all counties of the culture
## scope = memory
## push_scope = character
alias[effect:ordered_memory_participant] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

####################################
# TRAIT SCOPE
####################################

### Iterate through all opposite traits of the scoped trait
## scope = trait
## push_scope = trait
alias[effect:ordered_opposite_trait] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

####################################
# DYNASTY_HOUSE SCOPE
####################################

### Iterate through all claimed artifacts of the scoped house
## scope = dynasty_house
## push_scope = artifact
alias[effect:ordered_opposite_trait] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all house members
## scope = dynasty_house
## push_scope = character
alias[effect:ordered_opposite_trait] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all valid house unity members
## scope = dynasty_house
## push_scope = character
alias[effect:ordered_house_unity_member] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

####################################
# SECRET SCOPE
####################################

### Iterate through all characters who know the secret ordered_secret_knower = { limit = { <triggers> } <effects> }
## scope = secret
## push_scope = character
alias[effect:ordered_secret_knower] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through participants in a secret ordered_secret_participant = { limit = { <triggers> } <effects> }
## scope = secret
## push_scope = character
alias[effect:ordered_secret_participant] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

####################################
# RELIGION SCOPE
####################################

### Iterate through all faiths within a religion ordered_faith = { limit = { <triggers> } <effects> }
## scope = religion
## push_scope = faith
alias[effect:ordered_faith] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all MaA regiments in the army.  ordered_army_maa_regiment = {limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
## scope = army
## push_scope = regiment
alias[effect:ordered_army_maa_regiment] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

####################################
# TRAVEL_PLAN SCOPE
####################################

### Iterate through all characters travelling along with the travel plan owner. Includes travel leader, but not the travel plan owner.
## scope = travel_plan
## push_scope = character
alias[effect:ordered_entourage_character] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all provinces this travel plan has in its route.
## scope = travel_plan
## push_scope = province
alias[effect:ordered_future_path_location] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all provinces this travel plan has arrived at so far.
## scope = travel_plan
## push_scope = province
alias[effect:ordered_visited_location] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

####################################
# FAITH SCOPE
####################################

### Iterate through all great holy wars this faith is defending against ordered_defensive_great_holy_wars = { limit = { <triggers> } <effects> }
## scope = faith
## push_scope = ghw
alias[effect:ordered_defensive_great_holy_wars] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through characters of the scoped faith ordered_faith_character = { limit = { <triggers> } <effects> }
## scope = faith
## push_scope = character
alias[effect:ordered_faith_character] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all holy orders of the faith ordered_faith_holy_order = { limit = { <triggers> } <effects> }
## scope = faith
## push_scope = holy_order
alias[effect:ordered_faith_holy_order] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through playable rulers of the scoped faith
## scope = faith
## push_scope = character
alias[effect:ordered_faith_playable_ruler] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through playable rulers of the scoped faith
## scope = faith
## push_scope = charactr
alias[effect:ordered_faith_ruler] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all holy site provinces of a faith ordered_holy_site = { limit = { <triggers> } <effects> }
## scope = faith
## push_scope = holy_site
alias[effect:ordered_holy_site] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

####################################
# STRUGGLE SCOPE
####################################

### Iterate through all characters that are interloper in a struggle.
## scope = struggle
## push_scope = character
alias[effect:ordered_interloper_ruler] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all counties that are involved in a struggle
## scope = struggle
## push_scope = landed_title
alias[effect:ordered_involved_county] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all characters that are involved in a struggle.
## scope = struggle
## push_scope = character
alias[effect:ordered_involved_ruler] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

####################################
# GHW SCOPE
####################################

### Iterate through all pledged attackers within a great holy war ordered_pledged_attacker = { limit = { <triggers> } <effects> }
## scope = ghw
## push_scope = character
alias[effect:ordered_pledged_attacker] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all pledged defenders within a great holy war ordered_pledged_defender = { limit = { <triggers> } <effects> }
## scope = ghw
## push_scope = character
alias[effect:ordered_pledged_defender] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

####################################
# TAX_SLOT SCOPE
####################################

### Iterates through all Vassals assigned to the scoped Tax Slot
## scope = tax_slot
## push_scope = character
alias[effect:ordered_tax_slot_vassal] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

####################################
# CASUS_BELLI SCOPE
####################################

### Iterate through all casus belli's target titles ordered_target_title = { limit = { <triggers> } <effects> }
## scope = casus_belli
## push_scope = landed_title
alias[effect:ordered_target_title] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

####################################
# ARTIFACT SCOPE
####################################

### Iterate through all characters with a claim on the scoped artifact
## scope = artifact
## push_scope = character
alias[effect:ordered_artifact_claimant] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all dynasty houses with a claim on the scoped artifact
## scope = artifact
## push_scope = dynasty_house
alias[effect:ordered_artifact_house_claimant] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

####################################
# MULTI SCOPE
####################################

### Iterate through all kills of a character
## scope = { character artifact }
## push_scope = character
alias[effect:ordered_killed_character] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

####################################
# NONE SCOPE
####################################

### Undocumented
alias[effect:ordered_accolade_type] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all kills of a character
## push_scope = activity
alias[effect:ordered_activity] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Undodcumented
alias[effect:ordered_activity_type] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all existing artifacts
## push_scope = artifact
alias[effect:ordered_artifact] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all baronies in the game
## push_scope = landed_title
alias[effect:ordered_barony] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through every casus_belli_type in the database ordered_casus_belli_type = { limit = { <triggers> } <effects> }
## push_scope = casus_belli_type
alias[effect:ordered_casus_belli_type] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all characters with a royal court
## push_scope = character
alias[effect:ordered_character_with_royal_court] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Gets all legends in the world that have been completed ordered_completed_legend = {    limit = { <triggers> }    order_by = script_value    position = int    min = int    max = script_value    check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max    <effects> }
## push_scope = legend
alias[effect:ordered_completed_legend] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all counties in the game
## push_scope = landed_title
alias[effect:ordered_county] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all counties in the region. Put 'region = region_name' inside it
## push_scope = landed_title
alias[effect:ordered_county_in_region] = {
    region = <geographical_region>
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all cultures in the game
## push_scope = culture
alias[effect:ordered_culture_global] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Undocumented
alias[effect:ordered_culture_pillar] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Undocumented
alias[effect:ordered_culture_tradition] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Undocumented
alias[effect:ordered_decision] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Undocumented
alias[effect:ordered_doctrine] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all domiciles Iterate through all domiciles ordered_domicile = {    limit = { <triggers> }    order_by = script_value    position = int    min = int    max = script_value    check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max    <effects> }
## push_scope = domicile
alias[effect:ordered_domicile] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all duchies in the game
## push_scope = landed_title
alias[effect:ordered_duchy] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all empires in the game
## push_scope = landed_title
alias[effect:ordered_empire] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Undocumented
alias[effect:ordered_government_type] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Undocumented
alias[effect:ordered_holding_type] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all counties that are important for at least some title ordered_important_location = {    limit = { <triggers> }    order_by = script_value    position = int    min = int    max = script_value    check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max    <effects> }
alias[effect:ordered_important_location] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all items in global list. list = name or variable = name
alias[effect:ordered_in_global_list] = {
    ## cardinality = 0..1
    list = value[list]
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all items in list. list = name or variable = name
alias[effect:ordered_in_list] = {
    ## cardinality = 0..1
    list = value[list]
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all items in local list. list = name or variable = name
alias[effect:ordered_in_local_list] = {
    ## cardinality = 0..1
    list = value[list]
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Independent rulers list with a COUNT tier or above who hold land
## push_scope = character
alias[effect:ordered_independent_ruler] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all inspirations in the world
## push_scope = inspiration
alias[effect:ordered_inspiration] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all characters with an inspirations in the world
## push_scope = character
alias[effect:ordered_inspired_character] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all titles that are interested in any county ordered_interested_title = {    limit = { <triggers> }    order_by = script_value    position = int    min = int    max = script_value    check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max    <effects> }
## push_scope = landed_title
alias[effect:ordered_interested_title] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all kingdoms in the game
## push_scope = landed_title
alias[effect:ordered_kingdom] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Gets all legends in the world that have not been completed. ordered_legend = {    limit = { <triggers> }    order_by = script_value    position = int    min = int    max = script_value    check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max    <effects> }
## push_scope = legend
alias[effect:ordered_legend] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through every legend_type in the database. ordered_legend_type = {    limit = { <triggers> }    order_by = script_value    position = int    min = int    max = script_value    check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max    <effects> }
## push_scope = legend_type
alias[effect:ordered_legend_type] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all living characters
## push_scope = character
alias[effect:ordered_living_character] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all mercenary companies
## push_scope = mercenary_company
alias[effect:ordered_mercenary_company] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all kills of a character
## push_scope = character
alias[effect:ordered_player] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all player characters
## push_scope = activity
alias[effect:ordered_open_invite_activity] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all characters in the pool of the given province
## push_scope = character
alias[effect:ordered_pool_character] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all provinces (skips non-land and impassable provinces)
## push_scope = province
alias[effect:ordered_province] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all religions in the game
## push_scope = religion
alias[effect:ordered_religion_global] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Rulers list with a COUNT tier o above
## push_scope = character
alias[effect:ordered_ruler] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

###  Iterate through all provinces with a special building slot (built or un-built)
## push_scope = province
alias[effect:ordered_special_building_province] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Gets all available and accepted task contracts. ordered_task_contract = {    limit = { <triggers> }    order_by = script_value    position = int    min = int    max = script_value    check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max    <effects> }
## push_scope = task_contract
alias[effect:ordered_task_contract] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Gets all available and accepted task contracts. ordered_task_contract_type = {    limit = { <triggers> }    order_by = script_value    position = int    min = int    max = script_value    check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max    <effects> }
## push_scope = task_contract_type
alias[effect:ordered_task_contract_type] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

###  Iterate through all provinces with a special building slot (built or un-built)
## push_scope = province
alias[effect:ordered_special_building_province] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Undocumented
## push_scope = trait
alias[effect:ordered_trait] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all traits in a given category
## push_scope = trait
alias[effect:ordered_trait_in_category] = {
    category = enum[trait_category]
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Undocumented
alias[effect:ordered_vassal_contract] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

####################################
# PROVINCE SCOPE
####################################

### Iterate through all armies currently located in the scoped province
## scope = province
## push_scope = army
alias[effect:ordered_army_in_location] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all characters currently located in the scoped province
## scope = province
## push_scope = character
alias[effect:ordered_character_in_location] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all neighboring provinces of a province
## scope = province
## push_scope = province
alias[effect:ordered_neighboring_province] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all domiciles of scoped province. ordered_province_domicile = {    limit = { <triggers> }    order_by = script_value    position = int    min = int    max = script_value    check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max    <effects> }
## scope = province
## push_scope = domicile
alias[effect:ordered_province_domicile] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Gets epidemics affecting the scoped province. ordered_province_epidemic  = {    limit = { <triggers> }    order_by = script_value    position = int    min = int    max = script_value    check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max    <effects> }
## scope = province
## push_scope = epidemic
alias[effect:ordered_province_epidemic] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Gets legends affecting the scoped province. ordered_province_legend = {    limit = { <triggers> }    order_by = script_value    position = int    min = int    max = script_value    check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max    <effects> }
## scope = province
## push_scope = legend
alias[effect:ordered_province_legend] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

####################################
# WAR SCOPE
####################################

### Iterate through all attackers in the war ordered_war_attacker = { limit = { <triggers> } <effects> }
## scope = war
## push_scope = character
alias[effect:ordered_war_attacker] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all defenders in the war ordered_war_defender = { limit = { <triggers> } <effects> }
## scope = war
## push_scope = character
alias[effect:ordered_war_defender] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all participants in the war ordered_war_participant = { limit = { <triggers> } <effects> }
## scope = war
## push_scope = character
alias[effect:ordered_war_participant] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

####################################
# HOLY_ORDER SCOPE
####################################

### Iterate through all titles leased to a holy order ordered_leased_title = { limit = { <triggers> } <effects> }
## scope = holy_order
## push_scope = landed_title
alias[effect:ordered_leased_title] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

####################################
# LEGEND SCOPE
####################################

### Gets all promoters of the scoped legend
## scope = legend
## push_scope = character
alias[effect:ordered_legend_promoter] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Gets all provinces the scoped legend has spread into
## scope = legend
## push_scope = province
alias[effect:ordered_spread_province] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

####################################
# SCHEME SCOPE
####################################

### Iterate through all characters in agent slots in the scheme.ordered_scheme_agent_character = {    limit = { <triggers> }    order_by = script_value    position = int    min = int    max = script_value    check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max    <effects> }
## scope = scheme
## push_scope = character
alias[effect:ordered_scheme_agent_character] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all agent slots in the scheme. ordered_scheme_agent_slot = {    limit = { <triggers> }    order_by = script_value    position = int    min = int    max = script_value    check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max    <effects> }
## scope = scheme
## push_scope = agent_slot
alias[effect:ordered_scheme_agent_slot] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

####################################
# CHARACTER SCOPE
####################################

### Iterate through all acclaimed knights employed by a given character
## scope = character
## push_scope = character
alias[effect:ordered_acclaimed_knight] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all ( active and inactive ) Accolades of a given liege character's Acclaimed Knights
## scope = character
## push_scope = accolade
alias[effect:ordered_accolade] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all active Accolades of a given liege character's Acclaimed Knights
## scope = character
## push_scope = accolade
alias[effect:ordered_active_accolade] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all titles that can be created by the character. (only for alerts) ordered_alert_creatable_title = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:ordered_alert_creatable_title] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all titles that can be usurped by the character. (only for alerts) ordered_alert_usurpable_title = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:ordered_alert_usurpable_title] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all allies ordered_ally = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:ordered_ally] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all the ancestors of the scope character up to 5 generations ordered_ancestor = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:ordered_ancestor] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all armies ordered_army = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = army
alias[effect:ordered_army] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all task contracts of location of root province.ordered_available_task_contract = {    limit = { <triggers> }    order_by = cript_value    position = int    min = int    max = script_value    check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max    <effects> }
## scope = character
## push_scope = task_contract
alias[effect:ordered_available_task_contract] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Gets all accepted task contracts of the root character.ordered_character_active_contract = {    limit = { <triggers> }    order_by = script_value    position = int    min = int    max = script_value    check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max    <effects> }
## scope = character
## push_scope = task_contract
alias[effect:ordered_character_active_contract] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all artifacts in a given characters inventory
## scope = character
## push_scope = artifact
alias[effect:ordered_character_artifact] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Gets epidemics affecting the scoped character
## scope = character
## push_scope = epidemic
alias[effect:ordered_character_epidemic] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all struggles that character is involved in. Optional: Narrow down the involvement status *_chracter_struggle = { involvement = involved | interloper }
## scope = character
## push_scope = struggle 
alias[effect:ordered_character_struggle] = {
    ## cardinality = 0..1
    involvement = enum[involvement_status]
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Gets all task contracts of the scoped character ordered_character_task_contract = {    limit = { <triggers> }    order_by = script_value    position = int    min = int    max = script_value    check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max    <effects> }
## scope = character
## push_scope = task_contract
alias[effect:ordered_character_task_contract] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Scopes from a character to a neighboring barony (incl. across water, looking trough the de Jure lieges) ordered_character_to_title_neighboring_and_across_water_barony = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:ordered_character_to_title_neighboring_and_across_water_barony] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Scopes from a character to a neighboring county (incl. across water, looking trough the de Jure lieges) ordered_character_to_title_neighboring_and_across_water_county = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:ordered_character_to_title_neighboring_and_across_water_county] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Scopes from a character to a neighboring duchy (incl. across water, looking trough the de Jure lieges) ordered_character_to_title_neighboring_and_across_water_duchy = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:ordered_character_to_title_neighboring_and_across_water_duchy] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Scopes from a character to a neighboring empire (incl. across water, looking trough the de Jure lieges) ordered_character_to_title_neighboring_and_across_water_empire = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:ordered_character_to_title_neighboring_and_across_water_empire] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Scopes from a character to a neighboring kingdom (incl. across water, looking trough the de Jure lieges) ordered_character_to_title_neighboring_and_across_water_kingdom = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:ordered_character_to_title_neighboring_and_across_water_kingdom] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Scopes from a character to a neighboring barony (looking trough the de Jure lieges) ordered_character_to_title_neighboring_barony = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:ordered_character_to_title_neighboring_barony] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Scopes from a character to a neighboring county (looking trough the de Jure lieges) ordered_character_to_title_neighboring_county = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:ordered_character_to_title_neighboring_county] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Scopes from a character to a neighboring duchy (looking trough the de Jure lieges) ordered_character_to_title_neighboring_duchy = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:ordered_character_to_title_neighboring_duchy] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Scopes from a character to a neighboring empire (looking trough the de Jure lieges) ordered_character_to_title_neighboring_empire = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:ordered_character_to_title_neighboring_empire] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Scopes from a character to a neighboring kingdom (looking trough the de Jure lieges) ordered_character_to_title_neighboring_kingdom = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:ordered_character_to_title_neighboring_kingdom] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all traits a character has
## scope = character
## push_scope = trait
alias[effect:ordered_character_trait] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Wars of the scoped character ordered_character_war = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = war
alias[effect:ordered_character_war] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all children ordered_child = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:ordered_child] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}


### Iterate through the titles of all claims held by a character; parameters: explicit = yes/no/all pressed = yes/no/all ordered_claim = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:ordered_claim] = {
    explicit = enum[yesnoall]
    pressed = enum[yesnoall]
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all claimed artifacts of the scoped character
## scope = character
## push_scope = artifact
alias[effect:ordered_claimed_artifact] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all the close family [father, mother, siblings, children, grandparents] ordered_close_family_member = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:ordered_close_family_member] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all concubines ordered_concubine = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:ordered_concubine] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all consorts (concubines and spouses) ordered_consort = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:ordered_consort] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all contact characters of the root character. ordered_contact = {    limit = { <triggers> }    order_by = script_value    position = int    min = int    max = script_value    check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max    <effects> }
## scope = character
## push_scope = character
alias[effect:ordered_contact] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all councillors ordered_councillor = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:ordered_councillor] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterates through all characters that employ the scoped character in any court position.
## scope = character
## push_scope = character
alias[effect:ordered_court_position_employer] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterates through all characters employed by the scoped character in the target court position.
## scope = character
## push_scope = character
alias[effect:ordered_court_position_holder] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all courtiers ordered_courtier = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:ordered_courtier] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all courtiers that are away ordered_courtier_away = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:ordered_courtier_away] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all courtiers and guests (pool and foreign court guests) ordered_courtier_or_guest = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:ordered_courtier_or_guest] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all de jure claims for a character ordered_de_jure_claim = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:ordered_de_jure_claim] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all character in the diarchy line of succession.If there's no active diarchy or active one doesn't have succession,it iterates over regency candidates
## scope = character
## push_scope = character
alias[effect:ordered_diarchy_succession_character] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all diplomacy-based councillors ordered_diplomacy_councillor = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:ordered_diplomacy_councillor] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all directly owned provinces ordered_directly_owned_province = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = province
alias[effect:ordered_directly_owned_province] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all titles the scoped character can vote on ordered_election_title = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:ordered_election_title] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all equipped artifacts in a given characters inventory
## scope = character
## push_scope = artifact
alias[effect:ordered_equipped_character_artifact] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all the extended family [uncles/aunts, nephew/niece, cousins] ordered_extended_family_member = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:ordered_extended_family_member] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all guests visiting from another court (in contrast to pool_guest they have a liege) ordered_foreign_court_guest = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:ordered_foreign_court_guest] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all former concubines. Not persisted past death ordered_former_concubine = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:ordered_former_concubine] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all former concubinists. Not persisted past death ordered_former_concubinist = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:ordered_former_concubinist] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all former spouses ordered_former_spouse = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:ordered_former_spouse] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all councillors that are not related to a skill ordered_general_councillor = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:ordered_general_councillor] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Heirs of the scoped character ordered_heir = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:ordered_heir] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all titles the scoped character is heir to ordered_heir_title = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:ordered_heir_title] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all held landed titles ordered_held_title = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:ordered_held_title] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all hired mercenary companies ordered_hired_mercenary = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = mercenary_company
alias[effect:ordered_hired_mercenary] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all hostages currently abroad
## scope = character
## push_scope = character
alias[effect:ordered_home_court_hostage] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all characters this character has a hook on ordered_hooked_character = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:ordered_hooked_character] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through anyone the character is hostile to due to their top-liege's realm having been raided ordered_hostile_raider = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:ordered_hostile_raider] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all intrigue-based councillors ordered_intrigue_councillor = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:ordered_intrigue_councillor] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all activities a character has been invited to
## scope = character
## push_scope = activity
alias[effect:ordered_invited_activity] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all knights ordered_knight = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:ordered_knight] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all secrets known by the character ordered_known_secret = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = secret
alias[effect:ordered_known_secret] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all learning-based councillors ordered_learning_councillor = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:ordered_learning_councillor] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all lieges above a character (skipping the character themselves) ordered_liege_or_above = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:ordered_liege_or_above] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all MaA regiments. ordered_maa_regiment = {    limit = { <triggers> }    order_by = script_value    position = int    min = int    max = script_value    check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max    <effects> }
## scope = character
## push_scope = regiment
alias[effect:ordered_maa_regiment] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all martial-based councillors ordered_martial_councillor = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:ordered_martial_councillor] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all memories of a character
## scope = character
## push_scope = character_memory
alias[effect:ordered_memory] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### A sub-realm or realm bordering the scope character's realm (including across water) and has the same rank as the scope character (look for lieges of he owner of the land if necessary) ordered_neighboring_and_across_water_realm_same_rank_owner = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:ordered_neighboring_and_across_water_realm_same_rank_owner] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### A realm with a different top liege neighboring the realm of the scope character's top liege (including across water); switches to the realm's top title ordered_neighboring_and_across_water_top_liege_realm = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:ordered_neighboring_and_across_water_top_liege_realm] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### A realm with a different top liege neighboring the realm of the scope character's top liege (including across water); switches to the holder of the realm ordered_neighboring_and_across_water_top_liege_realm_owner = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:ordered_neighboring_and_across_water_top_liege_realm_owner] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### A sub-realm or realm bordering the scope character's realm and has the same rank as the scope character (look for lieges of he owner of the land if necessary) ordered_neighboring_realm_same_rank_owner = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:ordered_neighboring_realm_same_rank_owner] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### A realm with a different top liege neighboring the realm of the scope character's top liege; switches to the realm's top title ordered_neighboring_top_liege_realm = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:ordered_neighboring_top_liege_realm] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### A realm with a different top liege neighboring the realm of the scope character's top liege; switches to the holder of the realm ordered_neighboring_top_liege_realm_owner = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:ordered_neighboring_top_liege_realm_owner] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all noble family titles in the realm of scoped character.ordered_noble_family = {    limit = { <triggers> }    order_by = script_value    position = int    min = int    max = script_value    check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max    <effects> }
## scope = character
## push_scope = landed_title
alias[effect:ordered_noble_family] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all the spouse candidates of the opposite sex of a character. WARNING: THIS IS VERY SLOW DO NOT DO IT OFTEN.
## scope = character
## push_scope = character
alias[effect:ordered_opposite_sex_spouse_candidate] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all owned stories for a character ordered_owned_story = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = story
alias[effect:ordered_owned_story] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all (both) parents ordered_parent = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:ordered_parent] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all holy orders that the scoped character is a patron of ordered_patroned_holy_order = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = holy_order
alias[effect:ordered_patroned_holy_order] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all personally claimed artifacts of the scoped character
## scope = character
## push_scope = artifact
alias[effect:ordered_personal_claimed_artifact] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through characters this player has pinned ordered_pinned_character = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:ordered_pinned_character] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through characters whose player has this character pinned ordered_pinning_character = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:ordered_pinning_character] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all characters the player playing this character has played. Matches the game over legacy, except for excluding the currently played character
## scope = character
## push_scope = character
alias[effect:ordered_played_character] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through player heirs, capped at the first 10 ordered_player_heir = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:ordered_player_heir] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Get all legends in a player character library. ordered_player_legend_library = {    limit = { <triggers> }    order_by = script_value    position = int    min = int    max = script_value    check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max    <effects> }
## scope = character
## push_scope = legend
alias[effect:ordered_player_legend_library] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all guests visiting the court from the pool (in contrast to foreign_court_guest they don't have a liege) ordered_pool_guest = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:ordered_pool_guest] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all potential selectable marriage or betrohed options ordered_potential_marriage_option = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:ordered_potential_marriage_option] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all directly owned provinces. ordered_powerful_family = {    limit = { <triggers> }    order_by = script_value    position = int    min = int    max = script_value    check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max    <effects> }
## scope = character
## push_scope = dynasty_house
alias[effect:ordered_powerful_family] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through the all powerful vassals of a character
## scope = character
## push_scope = character
alias[effect:ordered_powerful_vassal] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all landed titles character is pretender to ordered_pretender_title = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:ordered_pretender_title] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all primary war enemies ordered_primary_war_enemy = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:ordered_primary_war_enemy] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all prisoners ordered_prisoner = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:ordered_prisoner] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all prowess-based councillors ordered_prowess_councillor = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:ordered_prowess_councillor] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through anyone the character is hostile to due to having raided them. Only returns top lieges ordered_raid_target = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:ordered_raid_target] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all counties that are on the edge of your realm bordering a different neighboring realm. ordered_realm_border_county = {    limit = { <triggers> }    order_by = script_value    position = int    min = int    max = script_value    check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max    <effects> }
## scope = character
## push_scope = landed_title
alias[effect:ordered_realm_border_county] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all counties in the realm. Based on top liege  ordered_realm_county = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:ordered_realm_county] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all de jure duchies that have at least one county in the realm. Based on top liege  ordered_realm_de_jure_duchy = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:ordered_realm_de_jure_duchy] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all de jure empire that have at least one county in the realm. Based on top liege  ordered_realm_de_jure_empire = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:ordered_realm_de_jure_empire] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all de jure kingdom that have at least one county in the realm. Based on top liege  ordered_realm_de_jure_kingdom = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:ordered_realm_de_jure_kingdom] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all realm provinces of a character ordered_realm_province = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = province
alias[effect:ordered_realm_province] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through scripted relations of a given type ordered_relation = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:ordered_relation] = {
    type = <scripted_relation>
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all the spouse candidates of the same sex of a character. WARNING: THIS IS VERY SLOW DO NOT DO IT OFTEN.
## scope = character
## push_scope = character
alias[effect:ordered_same_sex_spouse_candidate] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all schemes owned by the character ordered_scheme = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = scheme
alias[effect:ordered_scheme] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all secrets of the character ordered_secret = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = secret
alias[effect:ordered_secret] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all siblings ordered_sibling = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:ordered_sibling] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all spouses ordered_spouse = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = inspiration
alias[effect:ordered_sponsored_inspiration] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all spouses ordered_spouse = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:ordered_spouse] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all the spouse candidates of a character. WARNING: THIS IS VERY SLOW DO NOT DO IT OFTEN. ordered_spouse_candidate = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:ordered_spouse_candidate] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all stewardship-based councillors ordered_stewardship_councillor = { limit = { <triggers> } <effects> }## scope = character
## push_scope = character
alias[effect:ordered_stewardship_councillor] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all baronies in sub-realm ordered_sub_realm_barony = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:ordered_sub_realm_barony] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all counties in sub-realm ordered_sub_realm_county = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:ordered_sub_realm_county] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all duchies in sub-realm ordered_sub_realm_duchy = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:ordered_sub_realm_duchy] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all empires in sub-realm ordered_sub_realm_empire = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:ordered_sub_realm_empire] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all kingdoms in sub-realm ordered_sub_realm_kingdom = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:ordered_sub_realm_kingdom] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all titles in sub-realm ordered_sub_realm_title = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:ordered_sub_realm_title] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all factions targeting the scope character ordered_targeting_faction = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = faction
alias[effect:ordered_targeting_faction] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all candidates supported by the scoped investor character for any title. It may contain people outside of investor's top realm or no longer valid for appointment ordered_succession_appointment_invested_candidate = { limit = { <triggers> } order_by = script_value  position = int  min = int   max = script_value  check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
## scope = character
## push_scope = character
alias[effect:ordered_succession_appointment_invested_candidate] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all titles that has candidates supported by the scoped investor It may contain titles outside of investor's top realm, and so invalid for appointment,and candidates may be already dead ordered_succession_appointment_invested_title = {  limit = { <triggers> }  order_by = script_value position = int  min = int   max = script_value  check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
## scope = character
## push_scope = landed_title
alias[effect:ordered_succession_appointment_invested_title] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all schemes targeting the character ordered_targeting_scheme = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = scheme
alias[effect:ordered_targeting_scheme] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all secrets that target the specified scope ordered_targeting_secret = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = secret
alias[effect:ordered_targeting_secret] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterates through all Tax Collectors employed by the scoped character
## scope = character
## push_scope = character
alias[effect:ordered_tax_collector] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterates through all Tax Collectors employed by the scoped character
## scope = character
## push_scope = character
alias[effect:ordered_tax_collector_vassal] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterates through all Tax Collectors employed by the scoped character
## scope = character
## push_scope = tax_slot
alias[effect:ordered_tax_slot] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate though all characters that should travel with the scoped one (when moving between courts for instance); includes the scoped character ordered_traveling_family_member = { limit = { <triggers> } <effects> }
alias[effect:ordered_traveling_family_member] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all characters that have a truce on this character ordered_truce_holder = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:ordered_truce_holder] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all characters this character has a truce on ordered_truce_target = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:ordered_truce_target] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterates through all unassigned taxpayers for scoped Character
## scope = character
## push_scope = character
alias[effect:ordered_unassigned_taxpayers] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all unspent secrets known by the character ordered_unspent_known_secret = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = secret
alias[effect:ordered_unspent_known_secret] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all DIRECT vassals ordered_vassal = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:ordered_vassal] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through ALL vassals, not just direct vassals ordered_vassal_or_below = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:ordered_vassal_or_below] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all direct war allies ordered_war_ally = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:ordered_war_ally] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all direct war enemies ordered_war_enemy = { limit = { <triggers> } <effects> }
## scope = character
## push_scope = character
alias[effect:ordered_war_enemy] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all hostages having this warden
## scope = character
## push_scope = character
alias[effect:ordered_warden_hostage] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

####################################
# COMBAT SCOPE
####################################

### Iterate over both sides ( attacker and defender ) of the given combat
## scope = combat
## push_scope = combat_side
alias[effect:ordered_warden_hostage] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

####################################
# LANDED_TITLE SCOPE
####################################

### Iterate through all claimants to title ordered_claimant = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = character
alias[effect:ordered_claimant] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all counties connected to this one. Is based on top liege any/every/whatever_connectec_county = { 	max_naval_distance = 500 	allow_one_county_land_gap = yes ordered_connected_county = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = landed_title
alias[effect:ordered_connected_county] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all faiths headed by a title
## scope = landed_title
## push_scope = faith
alias[effect:ordered_controlled_faith] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all provinces in a county ordered_county_province = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = province
alias[effect:ordered_county_province] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all struggles that a county is involved in
## scope = landed_title
## push_scope = struggle
alias[effect:ordered_county_struggle] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all counties within this dejure title
## scope = landed_title
## push_scope = landed_title
alias[effect:ordered_de_jure_county] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all characters directly holding counties within this dejure title
## scope = landed_title
## push_scope = landed_title
alias[effect:ordered_de_jure_county_holder] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all top lieges of the counts within this dejure title ordered_de_jure_top_liege = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = character
alias[effect:ordered_de_jure_top_liege] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all the vassal holders of the title ordered_dejure_vassal_title_holder = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = character
alias[effect:ordered_dejure_vassal_title_holder] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all de facto vassal titles
## scope = landed_title
## push_scope = landed_title
alias[effect:ordered_direct_de_facto_vassal_title] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through the all de jure vassals titles
## scope = landed_title
## push_scope = landed_title
alias[effect:ordered_direct_de_jure_vassal_title] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all characters who are valid candidates in an election for a title ordered_election_candidate = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = character
alias[effect:ordered_election_candidate] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all characters who are valid electors in an election for a title ordered_elector = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = character
alias[effect:ordered_elector] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through the title itself, all de facto vassals, and below. The continue trigger specifies whether to recursively iterate through the vassal's vassal This is unrelated to the limit; if the limit is met it is added to the list, but its vassals will get checked even if the limit isn't met as long as the 'continue' trigger is ..._de_jure_vassal_and_below = { continue = { conditions } } ordered_in_de_facto_hierarchy = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = landed_title
alias[effect:ordered_in_de_facto_hierarchy] = {
    continue = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through the title itself, all de jure vassals, and below. The continue trigger specifies whether to recursively iterate through the vassal's vassal This is unrelated to the limit; if the limit is met it is added to the list, but its vassals will get checked even if the limit isn't met as long as the 'continue' trigger is ..._de_jure_vassal_and_below = { continue = { conditions } } ordered_in_de_jure_hierarchy = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = landed_title
alias[effect:ordered_in_de_jure_hierarchy] = {
    continue = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all neighboring counties. Can only be used in county scope ordered_neighboring_county = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = landed_title
alias[effect:ordered_neighboring_county] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all past owners of a title from earliest to latest
## scope = landed_title
## push_scope = character
alias[effect:ordered_past_holder] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all past owners of a title from latest to earliest
## scope = landed_title
## push_scope = character
alias[effect:ordered_past_holder_reversed] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through this title and all its dejure liege titles ordered_this_title_or_de_jure_above = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = landed_title
alias[effect:ordered_this_title_or_de_jure_above] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Line of succession for the scoped title ordered_title_heir = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = character
alias[effect:ordered_title_heir] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all factions joined the scope landed title ordered_title_joined_faction = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = faction
alias[effect:ordered_title_joined_faction] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Scopes from a title to a neighboring barony (incl. across water, looking trough the de Jure lieges) ordered_title_to_title_neighboring_and_across_water_barony = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = landed_title
alias[effect:ordered_title_to_title_neighboring_and_across_water_barony] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Scopes from a title to a neighboring county (incl. across water, looking trough the de Jure lieges) ordered_title_to_title_neighboring_and_across_water_county = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = landed_title
alias[effect:ordered_title_to_title_neighboring_and_across_water_county] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Scopes from a title to a neighboring duchy (incl. across water, looking trough the de Jure lieges) ordered_title_to_title_neighboring_and_across_water_duchy = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = landed_title
alias[effect:ordered_title_to_title_neighboring_and_across_water_duchy] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Scopes from a title to a neighboring empire (incl. across water, looking trough the de Jure lieges) ordered_title_to_title_neighboring_and_across_water_empire = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = landed_title
alias[effect:ordered_title_to_title_neighboring_and_across_water_empire] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Scopes from a title to a neighboring kingdom (incl. across water, looking trough the de Jure lieges) ordered_title_to_title_neighboring_and_across_water_kingdom = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = landed_title
alias[effect:ordered_title_to_title_neighboring_and_across_water_kingdom] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Scopes from a title to a neighboring barony (looking trough the de Jure lieges) ordered_title_to_title_neighboring_barony = { limit = { <triggers> } <effects> 
## scope = landed_title
## push_scope = landed_title
alias[effect:ordered_title_to_title_neighboring_barony] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Scopes from a title to a neighboring county (looking trough the de Jure lieges) ordered_title_to_title_neighboring_county = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = landed_title
alias[effect:ordered_title_to_title_neighboring_county] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Scopes from a title to a neighboring duchy (looking trough the de Jure lieges) ordered_title_to_title_neighboring_duchy = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = landed_title
alias[effect:ordered_title_to_title_neighboring_duchy] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Scopes from a title to a neighboring empire (looking trough the de Jure lieges) ordered_title_to_title_neighboring_empire = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = landed_title
alias[effect:ordered_title_to_title_neighboring_empire] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Scopes from a title to a neighboring kingdom (looking trough the de Jure lieges) ordered_title_to_title_neighboring_kingdom = { limit = { <triggers> } <effects> }
## scope = landed_title
## push_scope = landed_title
alias[effect:ordered_title_to_title_neighboring_kingdom] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

####################################
# FACTION SCOPE
####################################

### Iterate through all faction county members ordered_faction_county_member = { limit = { <triggers> } <effects> }
## scope = faction
## push_scope = landed_title
alias[effect:ordered_faction_county_member] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all faction character members ordered_faction_member = { limit = { <triggers> } <effects> }
## scope = faction
## push_scope = character
alias[effect:ordered_faction_member] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

####################################
# COMBAT_SIDE SCOPE
####################################

### Iterate through all commanders (the commanders of every army on the side, not just the one leading the battle) ordered_side_commander = { limit = { <triggers> } <effects> }
## scope = combat_side
## push_scope = character
alias[effect:ordered_side_commander] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all knights ordered_side_knight = { limit = { <triggers> } <effects> }
## scope = combat_side
## push_scope = character
alias[effect:ordered_side_knight] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}



#- Unsorted

### Gets all provinces infected by the scoped epidemic
## scope = epidemic
## push_scope = province
alias[effect:every_infected_province] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Gets all provinces infected by the scoped epidemic
## scope = epidemic
## push_scope = province
alias[effect:ordered_infected_province] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Gets all provinces infected by the scoped epidemic
## scope = epidemic
## push_scope = province
alias[effect:random_infected_province] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}


### Gets all legends in the world that have been completed
## push_scope = legend
alias[effect:every_completed_legend] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Gets all legends in the world that have been completed
## push_scope = legend
alias[effect:ordered_completed_legend] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Gets all legends in the world that have been completed
## push_scope = legend
alias[effect:random_completed_legend] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}



### Gets all epidemics in the world
## push_scope = epidemic
alias[effect:every_epidemic] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Gets all epidemics in the world
## push_scope = epidemic
alias[effect:ordered_epidemic] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Gets all epidemics in the world
## push_scope = epidemic
alias[effect:random_epidemic] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}


### Iterate through every epidemic_type in the database
## push_scope = epidemic_type
alias[effect:every_epidemic_type] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through every epidemic_type in the database
## push_scope = epidemic_type
alias[effect:ordered_epidemic_type] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through every epidemic_type in the database
## push_scope = epidemic_type
alias[effect:random_epidemic_type] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}



### Iterate through every geographical_region in the database
## push_scope = epidemic_type
alias[effect:every_geographical_region] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through every geographical_region in the database
## push_scope = epidemic_type
alias[effect:ordered_geographical_region] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through every geographical_region in the database
## push_scope = epidemic_type
alias[effect:random_geographical_region] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}


### Gets all legends in the world that have not been completed
## push_scope = legend
alias[effect:every_legend] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Gets all legends in the world that have not been completed
## push_scope = legend
alias[effect:ordered_legend] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Gets all legends in the world that have not been completed
## push_scope = legend
alias[effect:random_legend] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}


### Iterate through every legend_type in the database
## push_scope = legend
alias[effect:every_legend_type] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through every legend_type in the database
## push_scope = legend
alias[effect:ordered_legend_type] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through every legend_type in the database
## push_scope = legend
alias[effect:random_legend_type] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}


### Gets epidemics affecting the scoped province
## scope = province
## push_scope = epidemic
alias[effect:every_province_epidemic] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Gets epidemics affecting the scoped province
## scope = province
## push_scope = epidemic
alias[effect:ordered_province_epidemic] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Gets epidemics affecting the scoped province
## scope = province
## push_scope = epidemic
alias[effect:random_province_epidemic] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}


### Gets legends affecting the scoped province
## scope = province
## push_scope = legend
alias[effect:every_province_legend] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Gets legends affecting the scoped province
## scope = province
## push_scope = legend
alias[effect:ordered_province_legend] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Gets legends affecting the scoped province
## scope = province
## push_scope = legend
alias[effect:random_province_legend] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}


### Gets all promoters of the scoped legend
## scope = legend
## push_scope = character
alias[effect:every_legend_promoter] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}



### Gets all promoters of the scoped legend
## scope = legend
## push_scope = character
alias[effect:random_legend_promoter] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}


### Gets all provinces the scoped legend has spread into
## scope = legend
## push_scope = province
alias[effect:every_spread_province] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}



### Gets all provinces the scoped legend has spread into
## scope = legend
## push_scope = province
alias[effect:random_spread_province] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}



### Iterate through all counties that are on the edge of your realm bordering a different neighboring realm.
## scope = character
## push_scope = landed_title
alias[effect:every_realm_border_county] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all counties that are on the edge of your realm bordering a different neighboring realm.
## scope = character
## push_scope = landed_title
alias[effect:ordered_realm_border_county] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all counties that are on the edge of your realm bordering a different neighboring realm.
## scope = character
## push_scope = landed_title
alias[effect:random_realm_border_county] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}



### Iterate through all counties that are on the edge of your realm bordering a different neighboring top realm.
## scope = character
## push_scope = landed_title
alias[effect:every_top_realm_border_county] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all counties that are on the edge of your realm bordering a different neighboring top realm.
## scope = character
## push_scope = landed_title
alias[effect:ordered_top_realm_border_county] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all counties that are on the edge of your realm bordering a different neighboring top realm.
## scope = character
## push_scope = landed_title
alias[effect:random_top_realm_border_county] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}


### Gets epidemics affecting the scoped character
## scope = character
## push_scope = epidemic
alias[effect:every_character_epidemic] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}



### Gets epidemics affecting the scoped character
## scope = character
## push_scope = epidemic
alias[effect:random_character_epidemic] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through controlled title regiments ordered_controlled_title_maa_regiment = {    limit = { <triggers> }  order_by = script_value position = int  min = int   max = script_value  check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
## scope = landed_title
## push_scope = regiment
alias[effect:ordered_top_realm_border_county] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all counties that are important for the scoped title ordered_important_location_for_title = {    limit = { <triggers> }  order_by = script_value position = int  min = int   max = script_value  check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
## scope = landed_title
## push_scope = landed_title
alias[effect:ordered_important_location_for_title] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through owned title MaA regiments ordered_owned_title_maa_regiment = {    limit = { <triggers> }  order_by = script_value position = int  min = int   max = script_value  check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
## scope = landed_title
## push_scope = regiment
alias[effect:ordered_owned_title_maa_regiment] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all investors of target candidate within the scoped title. Optionally specify a value to filter by investment amount. scope:landed_title = {	any/every/ordered/random_succession_appointment_investors = {		candidate = scope:character		value > {			# Optional compare value to			value = 100		# only have characters that			add = 10		# have invested this much.		}	}}
## scope = landed_title
## push_scope = character
alias[effect:ordered_owned_title_maa_regiment] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through titles that consider scoped county an important location ordered_title_interested_in_location = {    limit = { <triggers> }  order_by = script_value position = int  min = int   max = script_value  check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
## scope = landed_title
## push_scope = landed_title
alias[effect:ordered_title_interested_in_location] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}


### Iterate through title all MaA regiments ordered_title_maa_regiment = {    limit = { <triggers> }    order_by = script_value    position = int    min = int    max = script_value    check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max    <effects> }
## scope = landed_title
## push_scope = regiment
alias[effect:ordered_title_maa_regiment] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    max = alias_name[int_value]
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}


### Iterate through every casus_belli_type in the database random_casus_belli_type = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
## push_scope = casus_belli_type
alias[effect:random_casus_belli_type] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all domiciles random_domicile = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
## push_scope = domicile
alias[effect:random_domicile] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all counties that are important for at least some title.random_important_location = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
## push_scope = landed_title
alias[effect:random_important_location] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### IIterate through all titles that are interested in any county random_interested_title = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
## push_scope = landed_title
alias[effect:random_interested_title] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all domiciles of scoped province. random_interested_title = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
## push_scope = domicile
alias[effect:random_province_domicile] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all task contracts of location of root province random_available_task_contract = {    limit = { <triggers> }    order_by = script_value    position = int    min = int    max = script_value    check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max    <effects> }
## scope = character
## push_scope = task_contract
alias[effect:random_available_task_contract] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Gets all accepted task contracts of the root character random_character_active_contract = {    limit = { <triggers> }    order_by = script_value    position = int    min = int    max = script_value    check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max    <effects> }
## scope = character
## push_scope = task_contract
alias[effect:random_character_active_contract] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Gets all task contracts of the scoped character random_character_task_contract = {    limit = { <triggers> }    order_by = script_value    position = int    min = int    max = script_value    check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max    <effects> }
## scope = character
## push_scope = task_contract
alias[effect:random_character_task_contract] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all contact characters of the root character. random_contact = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
## scope = character
## push_scope = character
alias[effect:random_contact] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all MaA regiments. random_maa_regiment = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
## scope = character
## push_scope = regiment
alias[effect:random_maa_regiment] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all noble family titles in the realm of scoped character.random_noble_family = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:random_noble_family] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Get all legends in a player character library. random_player_legend_library = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:random_player_legend_library] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all directly owned provinces. random_powerful_family = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:random_powerful_family] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all counties that are on the edge of your realm bordering a different neighboring realm. random_realm_border_county = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:random_realm_border_county] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all candidates supported by the scoped investor character for any title. It may contain people outside of investor's top realm or no longer valid for appointment. random_succession_appointment_invested_candidate = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:random_succession_appointment_invested_candidate] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all titles that has candidates supported by the scoped investor. It may contain titles outside of investor's top realm, and so invalid for appointment,and candidates may be already dead. random_succession_appointment_invested_title = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:random_succession_appointment_invested_title] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### random_top_realm_border_county - Iterate through all counties that are on the edge of your realm bordering a different neighboring top realm. random_top_realm_border_county = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
## scope = character
## push_scope = landed_title
alias[effect:random_top_realm_border_county] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}


### rIterate through all counties that are important for the scoped title random_important_location_for_title = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
## scope = landed_title
## push_scope = landed_title
alias[effect:random_important_location_for_title] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}


###Iterate through all investors of target candidate within the scoped title. Optionally specify a value to filter by investment amount. scope:landed_title = {	any/every/ordered/random_succession_appointment_investors = {		candidate = scope:character		value > {			# Optional compare value to			value = 100		# only have characters that			add = 10		# have invested this much.		}	}} random_succession_appointment_investors = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
## scope = landed_title
## push_scope = character
alias[effect:random_succession_appointment_investors] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through titles that consider scoped county an important location.random_title_interested_in_location = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
## scope = landed_title
## push_scope = landed_title
alias[effect:random_title_interested_in_location] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through title all MaA regiments. random_title_maa_regiment = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
## scope = landed_title
## push_scope = regiment
alias[effect:random_title_maa_regiment] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}