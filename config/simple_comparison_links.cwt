# Autogenerated file, do not edit manually
links = {
	dynasty_num_unlocked_perks = {
		desc = "does the dynasty has the required number of unlocked dynasty perks?"
		type = value
		input_scopes = dynasty
		output_scope = any
	}
	dynasty_prestige = {
		desc = "does the dynasty have the required prestige?"
		type = value
		input_scopes = dynasty
		output_scope = any
	}
	dynasty_prestige_level = {
		desc = "does the dynasty have the required prestige level?"
		type = value
		input_scopes = dynasty
		output_scope = any
	}
	num_future_phases = {
		desc = "The number of future phases for the scoped activity. num_future_phases > 5"
		type = value
		input_scopes = activity
		output_scope = any
	}
	num_past_phases = {
		desc = "The number of past phases for the scoped activity. num_past_phases > 5"
		type = value
		input_scopes = activity
		output_scope = any
	}
	num_phases = {
		desc = "The number total number of planned phases for the scoped activity. num_phases > 5"
		type = value
		input_scopes = activity
		output_scope = any
	}
	culture_age = {
		desc = "Checks the age of the scope culture in years. If the culture has no creation date set, this will simply return the current year culture_age >= 200"
		type = value
		input_scopes = culture
		output_scope = any
	}
	culture_number_of_counties = {
		desc = "How many counties are there of this culture? culture_number_of_counties > 10"
		type = value
		input_scopes = culture
		output_scope = any
	}
	free_tradition_slot = {
		desc = "How many free tradition slot are in the scoped culturescope:culture = { free_tradition_slot > 1 }"
		type = value
		input_scopes = culture
		output_scope = any
	}
	num_discovered_innovations = {
		desc = "Does the culture have the required number of discovered innovations? num_discovered_innovations > 20"
		type = value
		input_scopes = culture
		output_scope = any
	}
	num_discovered_innovations_in_era = {
		desc = "Does the scoped culture have the required number of active discovered innovations in the specified era? num_discovered_innovations_in_era = {  era = culture_era_early_medieval  value > 5 } num_discovered_innovations_in_era:culture_era_early_medieval > 15 num_discovered_innovations_in_era:culture_era_early_medieval > scope:target_culture.num_discovered_innovations_in_era:culture_era_early_medieval"
		type = value
		input_scopes = culture
		output_scope = any
	}
	memory_age_years = {
		desc = "How many years since the memory was created (rounded down)."
		type = value
		input_scopes = character_memory
		output_scope = any
	}
	memory_creation_date = {
		desc = "Date when the memory was created."
		type = value
		input_scopes = character_memory
		output_scope = any
	}
	memory_end_date = {
		desc = "Date when the memory will be forgotten. (this may change over time)"
		type = value
		input_scopes = character_memory
		output_scope = any
	}
	maa_current_troops_count = {
		desc = "Get current number of soldiers in MaA regiment"
		type = value
		input_scopes = regiment
		output_scope = any
	}
	maa_max_troops_count = {
		desc = "Get max number of soldiers in MaA regiment"
		type = value
		input_scopes = regiment
		output_scope = any
	}
	maa_size = {
		desc = "Get regiment size - number of subregiments in it"
		type = value
		input_scopes = regiment
		output_scope = any
	}
	obligation_level_score = {
		desc = "The score in favour of the vassal for the scoped vassal contract obligation level obligation_level_score > 2"
		type = value
		input_scopes = vassal_contract_obligation_level
		output_scope = any
	}
	member_count = {
		desc = "Number of members in the scoped confederation"
		type = value
		input_scopes = confederation
		output_scope = any
	}
	house_land_share_in_realm = {
		desc = "Calculate share of counties held in the target liege's realm by the house. Only rulers of liege's government type counts scope:house = {  house_land_share_in_realm = {   target = scope:liege   value > 0.5  } }"
		type = value
		input_scopes = dynasty_house
		output_scope = any
	}
	house_power = {
		desc = "Compare house power: scope:house = { house_power >= value }"
		type = value
		input_scopes = dynasty_house
		output_scope = any
	}
	house_unity_value = {
		desc = "does the dynasty house have the required house unity value?"
		type = value
		input_scopes = dynasty_house
		output_scope = any
	}
	task_contract_tier = {
		desc = "Tier value for task contract scope:task_contract = { task_contract_tier = num }"
		type = value
		input_scopes = task_contract
		output_scope = any
	}
	time_since_contract_taken = {
		desc = "Days since the task contract was accepted."
		type = value
		input_scopes = task_contract
		output_scope = any
	}
	army_max_size = {
		desc = "what size is this army's max size?"
		type = value
		input_scopes = army
		output_scope = any
	}
	army_size = {
		desc = "what size is this army?"
		type = value
		input_scopes = army
		output_scope = any
	}
	army_supply = {
		desc = "Can we disband this army?"
		type = value
		input_scopes = army
		output_scope = any
	}
	raid_loot = {
		desc = "How much raid loot is the army carrying?"
		type = value
		input_scopes = army
		output_scope = any
	}
	total_army_damage = {
		desc = "What is the army's total damage stat in its current location?"
		type = value
		input_scopes = army
		output_scope = any
	}
	total_army_pursuit = {
		desc = "What is the army's total pursuit stat in its current location?"
		type = value
		input_scopes = army
		output_scope = any
	}
	total_army_screen = {
		desc = "What is the army's total screen stat in its current location?"
		type = value
		input_scopes = army
		output_scope = any
	}
	total_army_siege_value = {
		desc = "What is the army's total siege value stat in its current location?"
		type = value
		input_scopes = army
		output_scope = any
	}
	total_army_toughness = {
		desc = "What is the army's total toughness stat in its current location?"
		type = value
		input_scopes = army
		output_scope = any
	}
	current_danger_value = {
		desc = "Danger value of the current province the travel plan is in (-100.0 to +100.0)."
		type = value
		input_scopes = travel_plan
		output_scope = any
	}
	days_travelled = {
		desc = "Total number of days since this travel plan started."
		type = value
		input_scopes = travel_plan
		output_scope = any
	}
	departure_date = {
		desc = "Compare the date the travel plan started."
		type = value
		input_scopes = travel_plan
		output_scope = any
	}
	final_destination_arrival_date = {
		desc = "Estimation date of arrival at the final destination"
		type = value
		input_scopes = travel_plan
		output_scope = any
	}
	final_destination_arrival_days = {
		desc = "Estimation of days until we arrive at the final destination?"
		type = value
		input_scopes = travel_plan
		output_scope = any
	}
	final_destination_progress = {
		desc = "Time progress (0.0 - 1.0) towards the final destination of the travel plan, compared to departure date from the very start of the Travel Plan."
		type = value
		input_scopes = travel_plan
		output_scope = any
	}
	next_destination_arrival_date = {
		desc = "Estimation date of arrival at the next destination"
		type = value
		input_scopes = travel_plan
		output_scope = any
	}
	next_destination_arrival_days = {
		desc = "Estimation of days until we arrive at the next destination"
		type = value
		input_scopes = travel_plan
		output_scope = any
	}
	next_destination_progress = {
		desc = "Time progress (0.0 - 1.0) towards the next destination of the travel plan, compared to departure date of the previous destination."
		type = value
		input_scopes = travel_plan
		output_scope = any
	}
	num_entourage_characters = {
		desc = "Size of the travel plan entourage."
		type = value
		input_scopes = travel_plan
		output_scope = any
	}
	num_options = {
		desc = "Number of travel options selected."
		type = value
		input_scopes = travel_plan
		output_scope = any
	}
	travel_safety = {
		desc = "Gets the current travel safety for travel"
		type = value
		input_scopes = travel_plan
		output_scope = any
	}
	travel_speed = {
		desc = "Gets the current travel speed for travel (percentage points above 100%)"
		type = value
		input_scopes = travel_plan
		output_scope = any
	}
	estimated_faith_strength = {
		desc = "How strong is the scoped faith? *Expensive*, if you're gonna use the value repeatedly, save it to a scope first! This is scaled by a factor of 1000, so '1' means 1000 men. This is due to the cap of ~2 million, which would be too low in many cases"
		type = value
		input_scopes = faith
		output_scope = any
	}
	fervor = {
		desc = "What is the faith's fervor?"
		type = value
		input_scopes = faith
		output_scope = any
	}
	holy_sites_controlled = {
		desc = "How many holy sites does the faith control? holy_sites_controlled > 1"
		type = value
		input_scopes = faith
		output_scope = any
	}
	num_character_followers = {
		desc = "Returns how many characters follow the given faith num_character_followers > 0"
		type = value
		input_scopes = faith
		output_scope = any
	}
	num_county_followers = {
		desc = "Returns how many counties follow the given faith num_county_followers > 0"
		type = value
		input_scopes = faith
		output_scope = any
	}
	phase_takeover_duration_days = {
		desc = "Checks the takeover days left of a future phase in this sub-region. phase_takeover_duration_days:future_phase_key <= scripted_value"
		type = value
		input_scopes = situation_sub_region
		output_scope = any
	}
	phase_takeover_points = {
		desc = "Checks the takeover points of a future phase in this sub-region. phase_takeover_points:future_phase_key <= scripted_value"
		type = value
		input_scopes = situation_sub_region
		output_scope = any
	}
	agent_slot_contribution = {
		desc = "The contribution value given by the scoped filled agent slot."
		type = value
		input_scopes = agent_slot
		output_scope = any
	}
	days_until_ghw_launch = {
		desc = "How many days is it until the given GHW launches its war?"
		type = value
		input_scopes = ghw
		output_scope = any
	}
	ghw_attackers_strength = {
		desc = "What is the max (if all levies were fully reinforced) military strength of the pledged attackers in the given Great Holy War?"
		type = value
		input_scopes = ghw
		output_scope = any
	}
	ghw_defenders_strength = {
		desc = "What is the max (if all levies were fully reinforced) military strength of the pledged defenders in the given Great Holy War?"
		type = value
		input_scopes = ghw
		output_scope = any
	}
	ghw_war_chest_gold = {
		desc = "How much gold is in the great holy war's war chest?"
		type = value
		input_scopes = ghw
		output_scope = any
	}
	ghw_war_chest_piety = {
		desc = "How much piety is in the great holy war's war chest?"
		type = value
		input_scopes = ghw
		output_scope = any
	}
	ghw_war_chest_prestige = {
		desc = "How much prestige is in the great holy war's war chest?"
		type = value
		input_scopes = ghw
		output_scope = any
	}
	days_since_outbreak_start = {
		desc = "Number of days since the epidemic outbreak started. days_since_outbreak_start >= 20"
		type = value
		input_scopes = epidemic
		output_scope = any
	}
	outbreak_start_date = {
		desc = "Date when the epidemic outbreak began."
		type = value
		input_scopes = epidemic
		output_scope = any
	}
	total_infected_provinces = {
		desc = "Get the total number of provinces infected over the lifetime of this epidemic. total_infected_provinces >= 20"
		type = value
		input_scopes = epidemic
		output_scope = any
	}
	available_taxpayer_slots = {
		desc = "How many slots for taxpayers are available in scoped tax slot? scope:tax_slot = { available_tax_player_slots > 2 }"
		type = value
		input_scopes = tax_slot
		output_scope = any
	}
	artifact_durability = {
		desc = "does this artifact have the required durability?"
		type = value
		input_scopes = artifact
		output_scope = any
	}
	artifact_max_durability = {
		desc = "does this artifact have the required max durability?"
		type = value
		input_scopes = artifact
		output_scope = any
	}
	num_artifact_kills = {
		desc = "How many kills has this artifact been used in?"
		type = value
		input_scopes = artifact
		output_scope = any
	}
	mercenary_company_expiration_days = {
		desc = "How many days are left in the mercenary contract. 0 if not hired."
		type = value
		input_scopes = mercenary_company
		output_scope = any
	}
	current_computer_date = {
		desc = "Compare the current computer date. An interface trigger, can only be used in specific places"
		type = value
		input_scopes = any
		output_scope = any
	}
	current_computer_date_day = {
		desc = "Compare the current computer day. An interface trigger, can only be used in specific places"
		type = value
		input_scopes = any
		output_scope = any
	}
	current_computer_date_month = {
		desc = "Compare the current computer month. An interface trigger, can only be used in specific places"
		type = value
		input_scopes = any
		output_scope = any
	}
	current_computer_date_year = {
		desc = "Compare the current computer year. An interface trigger, can only be used in specific places"
		type = value
		input_scopes = any
		output_scope = any
	}
	current_date = {
		desc = "Compare the current ingame date."
		type = value
		input_scopes = any
		output_scope = any
	}
	current_day = {
		desc = "Compare the current ingame day [1, 31]"
		type = value
		input_scopes = any
		output_scope = any
	}
	current_month = {
		desc = "Compare the current ingame month [1..12]"
		type = value
		input_scopes = any
		output_scope = any
	}
	current_tooltip_depth = {
		desc = "What is number of tooltips open rigth now? An interface trigger, can only be used in specific places"
		type = value
		input_scopes = any
		output_scope = any
	}
	current_year = {
		desc = "Compare the current ingame year"
		type = value
		input_scopes = any
		output_scope = any
	}
	game_start_date = {
		desc = "Compare the date of the bookmarked game launched."
		type = value
		input_scopes = any
		output_scope = any
	}
	months_from_game_start = {
		desc = "How many months it has been since the start of the game months_from_game_start > 5"
		type = value
		input_scopes = any
		output_scope = any
	}
	years_from_game_start = {
		desc = "How many years it has been since the start of the game years_from_game_start > 5"
		type = value
		input_scopes = any
		output_scope = any
	}
	available_loot = {
		desc = "How much gold is available to loot for raiding armies? available_loot >= 7"
		type = value
		input_scopes = province
		output_scope = any
	}
	building_slots = {
		desc = "How many building slots exist (including occupied ones)? building_slots > 3"
		type = value
		input_scopes = province
		output_scope = any
	}
	combined_building_level = {
		desc = "How many levels of normal buildings are there? Duchy and such buildings do not count. Building under construction does not count. The capital building does count combined_building_level > 10"
		type = value
		input_scopes = province
		output_scope = any
	}
	days_since_province_infection = {
		desc = "Number of days since the target epidemic infected the scoped province. days_since_province_infection >= 20"
		type = value
		input_scopes = province
		output_scope = any
	}
	epidemic_resistance = {
		desc = "Get the epidemic resistance of the scoped province. epidemic_resistance >= 20"
		type = value
		input_scopes = province
		output_scope = any
	}
	fort_level = {
		desc = "Compares the fort level of a province"
		type = value
		input_scopes = province
		output_scope = any
	}
	free_building_slots = {
		desc = "How many free building slots exist? A building in construction is considered to be taking a slot free_building_slots > 3"
		type = value
		input_scopes = province
		output_scope = any
	}
	monthly_income = {
		desc = "Check the income of the scoped province monthly_income > 10"
		type = value
		input_scopes = province
		output_scope = any
	}
	num_buildings = {
		desc = "How many normal buildings are there? Duchy and such buildings do not count. Building under construction does count num_buildings > 3"
		type = value
		input_scopes = province
		output_scope = any
	}
	number_of_characters_in_pool = {
		desc = "Check the number of characters in the pool the scoped province is a part of"
		type = value
		input_scopes = province
		output_scope = any
	}
	province_infection_date = {
		desc = "Date when the target epidemic infected the scoped province."
		type = value
		input_scopes = province
		output_scope = any
	}
	province_infection_rate = {
		desc = "Infection rate of target epidemic in the scoped province. province_infection_rate >= 20"
		type = value
		input_scopes = province
		output_scope = any
	}
	travel_danger_value = {
		desc = "What is the province's danger value for a specific travel plan? travel_danger_value = { target = scope:some_travel_plan value > 1 }"
		type = value
		input_scopes = province
		output_scope = any
	}
	attacker_war_score = {
		desc = "compares the attacker war score"
		type = value
		input_scopes = war
		output_scope = any
	}
	days_since_max_war_score = {
		desc = "Number of days since the war score has been at max (+100 or -100). Returns -1 if the war score is not +100 or -100"
		type = value
		input_scopes = war
		output_scope = any
	}
	defender_war_score = {
		desc = "compares the defender war score"
		type = value
		input_scopes = war
		output_scope = any
	}
	war_contribution = {
		desc = "Checks how much a character has contributed to the scoped war war_contribution = { target = some character value > 5 }"
		type = value
		input_scopes = war
		output_scope = any
	}
	war_days = {
		desc = "compares the number of days the war is going on for"
		type = value
		input_scopes = war
		output_scope = any
	}
	num_leased_titles = {
		desc = "How many holdings the holy order has under lease"
		type = value
		input_scopes = holy_order
		output_scope = any
	}
	accolade_rank = {
		desc = "How many ranks does this Accolade have unlocked? accolade_rank > 2"
		type = value
		input_scopes = accolade
		output_scope = any
	}
	days_since_legend_completion = {
		desc = "Days since when the legend was completed."
		type = value
		input_scopes = legend
		output_scope = any
	}
	days_since_legend_start_date = {
		desc = "Days since when the legend was created."
		type = value
		input_scopes = legend
		output_scope = any
	}
	legend_completion_date = {
		desc = "Date when the legend was completed."
		type = value
		input_scopes = legend
		output_scope = any
	}
	legend_start_date = {
		desc = "Date when the legend was created."
		type = value
		input_scopes = legend
		output_scope = any
	}
	situation_days_since_end_date = {
		desc = "Days since when the situation was completed."
		type = value
		input_scopes = situation
		output_scope = any
	}
	situation_days_since_start_date = {
		desc = "Days since the situation started."
		type = value
		input_scopes = situation
		output_scope = any
	}
	situation_end_date = {
		desc = "Date when the situation was completed."
		type = value
		input_scopes = situation
		output_scope = any
	}
	situation_start_date = {
		desc = "Date when the situation started."
		type = value
		input_scopes = situation
		output_scope = any
	}
	max_scheme_success_chance = {
		desc = "Max Scheme Success Chance"
		type = value
		input_scopes = scheme
		output_scope = any
	}
	maximum_scheme_breaches = {
		desc = "The maximum number of breaches the scheme can have"
		type = value
		input_scopes = scheme
		output_scope = any
	}
	scheme_agent_charges = {
		desc = "The number of the scheme's currently available agent charges"
		type = value
		input_scopes = scheme
		output_scope = any
	}
	scheme_breaches = {
		desc = "The number of breaches the scheme currently has"
		type = value
		input_scopes = scheme
		output_scope = any
	}
	scheme_duration_days = {
		desc = "The number of days since scheme was started"
		type = value
		input_scopes = scheme
		output_scope = any
	}
	scheme_number_of_exposed_agents = {
		desc = "The number of exposed agents in a scheme"
		type = value
		input_scopes = scheme
		output_scope = any
	}
	scheme_number_of_filled_agent_slots = {
		desc = "The number of agents in a scheme"
		type = value
		input_scopes = scheme
		output_scope = any
	}
	scheme_phase_duration = {
		desc = "Scheme phase duration"
		type = value
		input_scopes = scheme
		output_scope = any
	}
	scheme_progress = {
		desc = "Scheme progress (0 - 10 (defined))"
		type = value
		input_scopes = scheme
		output_scope = any
	}
	scheme_secrecy = {
		desc = "Scheme secrecy"
		type = value
		input_scopes = scheme
		output_scope = any
	}
	scheme_success_chance = {
		desc = "Scheme success chance"
		type = value
		input_scopes = scheme
		output_scope = any
	}
	age = {
		desc = "Get character age: scope:character = { age > 16 }"
		type = value
		input_scopes = character
		output_scope = any
	}
	ai_boldness = {
		desc = "AI boldness"
		type = value
		input_scopes = character
		output_scope = any
	}
	ai_compassion = {
		desc = "AI compassion"
		type = value
		input_scopes = character
		output_scope = any
	}
	ai_energy = {
		desc = "AI energy"
		type = value
		input_scopes = character
		output_scope = any
	}
	ai_greed = {
		desc = "AI greed"
		type = value
		input_scopes = character
		output_scope = any
	}
	ai_honor = {
		desc = "AI honor"
		type = value
		input_scopes = character
		output_scope = any
	}
	ai_rationality = {
		desc = "AI rationality"
		type = value
		input_scopes = character
		output_scope = any
	}
	ai_sociability = {
		desc = "AI sociability"
		type = value
		input_scopes = character
		output_scope = any
	}
	ai_values_divergence = {
		desc = "target = other character value >/</= sum of differences in ai values"
		type = value
		input_scopes = character
		output_scope = any
	}
	ai_vengefulness = {
		desc = "AI vengefulness"
		type = value
		input_scopes = character
		output_scope = any
	}
	ai_zeal = {
		desc = "AI zeal"
		type = value
		input_scopes = character
		output_scope = any
	}
	amenity_level = {
		desc = "amenity_level = { type = food value >= 5 } Compares the scoped character's amenity level in the given type to the given value"
		type = value
		input_scopes = character
		output_scope = any
	}
	attraction = {
		desc = "Attraction value for the scoped character"
		type = value
		input_scopes = character
		output_scope = any
	}
	average_amenity_level = {
		desc = "average_amenity_level >= 3 Compares the scoped character's average amenity level to the given value, you probably never want to check for direct equality since the average will be some decimal number"
		type = value
		input_scopes = character
		output_scope = any
	}
	base_weight = {
		desc = "Base weight of the scoped character base_weight > 10"
		type = value
		input_scopes = character
		output_scope = any
	}
	cease_tribute_payments_ai_chance = {
		desc = "cease_tribute_payments_ai_chance > 10 Gets the ai_chance value of the cease_tribute_payments_interaction ai_chance"
		type = value
		input_scopes = character
		output_scope = any
	}
	character_men_at_arms_expense_gold_relative = {
		desc = "What is the ratio of the scoped character's men-at-arms gold expenses, relative to their income? Similar calc compared to `ai_men_at_arms_expense_gold_min` / `ai_men_at_arms_expense_gold_ideal`. (Relative value 0.0 - 1.0 - *, where 1.0 is all income, unraised maa costs)"
		type = value
		input_scopes = character
		output_scope = any
	}
	character_men_at_arms_expense_prestige_relative = {
		desc = "What is the ratio of the scoped character's men-at-arms prestige expenses, relative to their income? Similar calc compared to `ai_men_at_arms_expense_prestige_min` / `ai_men_at_arms_expense_prestige_ideal`. (Relative value 0.0 - 1.0 - *, where 1.0 is all income, unraised maa costs)"
		type = value
		input_scopes = character
		output_scope = any
	}
	council_task_monthly_progress = {
		desc = "Is the scoped character's monthly progress on their assigned council task this big?"
		type = value
		input_scopes = character
		output_scope = any
	}
	court_grandeur_base = {
		desc = "Gets the base court grandeur value for a character, always NRoyalCourt::COURT_GRANDEUR_MIN for those without one"
		type = value
		input_scopes = character
		output_scope = any
	}
	court_grandeur_current = {
		desc = "Gets the current court grandeur value for a character, always NRoyalCourt::COURT_GRANDEUR_MIN for those without one"
		type = value
		input_scopes = character
		output_scope = any
	}
	court_grandeur_current_level = {
		desc = "Gets the current court grandeur level for a character, always 0 for those without one"
		type = value
		input_scopes = character
		output_scope = any
	}
	court_grandeur_minimum_expected = {
		desc = "Gets the minimum expected court grandeur value for a character, always NRoyalCourt::COURT_GRANDEUR_MIN for those without one"
		type = value
		input_scopes = character
		output_scope = any
	}
	court_grandeur_minimum_expected_level = {
		desc = "Gets the minimum expected court grandeur level for a character, always 0 for those without one"
		type = value
		input_scopes = character
		output_scope = any
	}
	court_positions_currently_available = {
		desc = "How many court positions the scoped character CAN currently employs"
		type = value
		input_scopes = character
		output_scope = any
	}
	court_positions_currently_filled = {
		desc = "How many court positions the scope character currently employs"
		type = value
		input_scopes = character
		output_scope = any
	}
	create_faction_type_chance = {
		desc = "Check if the chance to create a faction against a target of the scope character is is true against the scripted value create_faction_type_chance = {      type = faction_type #An ongoing faction     target = target_character     value <|<=|>=|> 0 }"
		type = value
		input_scopes = character
		output_scope = any
	}
	current_domain_fertility = {
		desc = "Get the current domain fertility of the scoped character"
		type = value
		input_scopes = character
		output_scope = any
	}
	current_military_strength = {
		desc = "Is the scoped character's current military strength this big?"
		type = value
		input_scopes = character
		output_scope = any
	}
	current_raised_military_strength = {
		desc = "Is the scoped character's current raised military strength this big?"
		type = value
		input_scopes = character
		output_scope = any
	}
	current_weight = {
		desc = "Current weight of the scoped character current_weight > 10"
		type = value
		input_scopes = character
		output_scope = any
	}
	current_weight_for_portrait = {
		desc = "Current weight of the scoped character as a value for portraits scaled between 0.0 and 1.0 current_weight_for_portrait > 0.1"
		type = value
		input_scopes = character
		output_scope = any
	}
	days_as_ruler = {
		desc = "Number of days this character has been a ruler, returns -1 if character isn't a ruler"
		type = value
		input_scopes = character
		output_scope = any
	}
	days_in_prison = {
		desc = "number of days the character has been imprisoned for (0 if not imprisoned)"
		type = value
		input_scopes = character
		output_scope = any
	}
	days_of_continuous_peace = {
		desc = "Number of days the character has been in peace (0 if in war). Raids count as 'not peace'"
		type = value
		input_scopes = character
		output_scope = any
	}
	days_of_continuous_war = {
		desc = "Number of days the character has been in peace (0 if in peace)"
		type = value
		input_scopes = character
		output_scope = any
	}
	days_since_death = {
		desc = "number of days since the character has died."
		type = value
		input_scopes = character
		output_scope = any
	}
	days_since_joined_court = {
		desc = "days_since_joined_court > 5 Gets the days since scoped character joined their current court"
		type = value
		input_scopes = character
		output_scope = any
	}
	days_since_vassal_contract_liege_dynasty_reign_start = {
		desc = "Days since this vassal's liege's dynasty started ruling over this vassal"
		type = value
		input_scopes = character
		output_scope = any
	}
	debt_level = {
		desc = "Is the scoped character's debt level this value? -1 if not meeting any debt level threshold. 0 for the first one, and so on. Note that this might not match exactly with the modifier in effect as it calculates what the modifier will be now, and the character's actual modifier can lag behind"
		type = value
		input_scopes = character
		output_scope = any
	}
	diarch_aptitude = {
		desc = "Diarch aptitude score for the scoped (potential) diarch"
		type = value
		input_scopes = character
		output_scope = any
	}
	diarch_loyalty = {
		desc = "Diarch loyalty score for the scoped (potential) diarch scope:diarch = { diarch_loyalty >= 50 }"
		type = value
		input_scopes = character
		output_scope = any
	}
	diarchy_swing = {
		desc = "Get diarchy scales of power swing scope:liege = { diarchy_swing > 50 }"
		type = value
		input_scopes = character
		output_scope = any
	}
	diplomacy = {
		desc = "does the character have the required diplomacy skill level?"
		type = value
		input_scopes = character
		output_scope = any
	}
	diplomacy_diff = {
		desc = "does the character have the required diplomacy skill level difference against target? diplomacy = { target = character value <= script_value abs = yes/no(optional, default no) }"
		type = value
		input_scopes = character
		output_scope = any
	}
	diplomacy_for_portrait = {
		desc = "Diplomacy skill scaled between 0.0 and 1.0 for portraits"
		type = value
		input_scopes = character
		output_scope = any
	}
	domain_limit = {
		desc = "Is the scoped character's domain limit this big?"
		type = value
		input_scopes = character
		output_scope = any
	}
	domain_limit_available = {
		desc = "Is there this much space left in the character's domain limit? Negative values also work for checking characters that are above their limit"
		type = value
		input_scopes = character
		output_scope = any
	}
	domain_limit_percentage = {
		desc = "Is the scoped character's domain this big in comparison to their limit?"
		type = value
		input_scopes = character
		output_scope = any
	}
	domain_size = {
		desc = "Is the scoped character's domain this big?"
		type = value
		input_scopes = character
		output_scope = any
	}
	domain_size_excluding_grace_period = {
		desc = "Is the scoped character's domain this big? Does not count titles currently in the grace period"
		type = value
		input_scopes = character
		output_scope = any
	}
	dread = {
		desc = "does the character have the required dread?"
		type = value
		input_scopes = character
		output_scope = any
	}
	effective_age = {
		desc = "is the character old/young enough? If immortal, this uses the age they became immortal at"
		type = value
		input_scopes = character
		output_scope = any
	}
	fertility = {
		desc = "does the character have the required fertility?"
		type = value
		input_scopes = character
		output_scope = any
	}
	focus_progress = {
		desc = "Does the character have this much focus progress"
		type = value
		input_scopes = character
		output_scope = any
	}
	gold = {
		desc = "does the character have the required gold?"
		type = value
		input_scopes = character
		output_scope = any
	}
	has_had_focus_for_days = {
		desc = "Does the character had a focus for that time?"
		type = value
		input_scopes = character
		output_scope = any
	}
	has_trait_xp = {
		desc = "Checks if the scopd character has the given amount of XP in the trait level track. Track name is required if the trait has multiple tracks, otherwise should not be provided. has_trait_xp = { trait = <trait_key> track = <track_key> value = <script_value> }"
		type = value
		input_scopes = character
		output_scope = any
	}
	health = {
		desc = "does the character have the required health?"
		type = value
		input_scopes = character
		output_scope = any
	}
	highest_held_title_tier = {
		desc = "what is the highest held landed title tier of the character?"
		type = value
		input_scopes = character
		output_scope = any
	}
	influence = {
		desc = "does the character have the required influence?"
		type = value
		input_scopes = character
		output_scope = any
	}
	influence_level = {
		desc = "does the character have the required influence level?"
		type = value
		input_scopes = character
		output_scope = any
	}
	intrigue = {
		desc = "does the character have the required intrigue skill level?"
		type = value
		input_scopes = character
		output_scope = any
	}
	intrigue_diff = {
		desc = "does the character have the required intrigue skill level difference against target? intrigue = { target = character value <= script_value abs = yes/no(optional, default no) }"
		type = value
		input_scopes = character
		output_scope = any
	}
	intrigue_for_portrait = {
		desc = "Intrigue skill scaled between 0.0 and 1.0 for portraits"
		type = value
		input_scopes = character
		output_scope = any
	}
	join_faction_chance = {
		desc = "Check if the chance of the scope character to join the faction against the scripted value join_faction_chance = {      target = faction_target #An ongoing faction     value <|<=|>=|> 0 }"
		type = value
		input_scopes = character
		output_scope = any
	}
	learning = {
		desc = "does the character have the required learning skill level?"
		type = value
		input_scopes = character
		output_scope = any
	}
	learning_diff = {
		desc = "does the character have the required learning skill level difference against target? learning = { target = character value <= script_value abs = yes/no(optional, default no) }"
		type = value
		input_scopes = character
		output_scope = any
	}
	learning_for_portrait = {
		desc = "Learning skill scaled between 0.0 and 1.0 for portraits"
		type = value
		input_scopes = character
		output_scope = any
	}
	legitimacy = {
		desc = "Gets the scoped character's current legitimacy"
		type = value
		input_scopes = character
		output_scope = any
	}
	legitimacy_level = {
		desc = "Gets the scoped character's current legitimacy level"
		type = value
		input_scopes = character
		output_scope = any
	}
	levies_to_liege = {
		desc = "The amount of levies a character sends to their liege"
		type = value
		input_scopes = character
		output_scope = any
	}
	long_term_gold = {
		desc = "does the character have the required gold? (AI category 'long term')"
		type = value
		input_scopes = character
		output_scope = any
	}
	long_term_gold_maximum = {
		desc = "How big is the 'long term' budget is supposed to get?"
		type = value
		input_scopes = character
		output_scope = any
	}
	maa_regiments_count = {
		desc = "Current number of personal MaA regiments"
		type = value
		input_scopes = character
		output_scope = any
	}
	maa_regiments_max_count = {
		desc = "Max number of personal MaA regiment"
		type = value
		input_scopes = character
		output_scope = any
	}
	mandate_type_qualification = {
		desc = "Diarch qualification for spefic mandate type"
		type = value
		input_scopes = character
		output_scope = any
	}
	martial = {
		desc = "does the character have the required martial skill level?"
		type = value
		input_scopes = character
		output_scope = any
	}
	martial_diff = {
		desc = "does the character have the required martial skill level difference against target? martial = { target = character value <= script_value abs = yes/no(optional, default no) }"
		type = value
		input_scopes = character
		output_scope = any
	}
	martial_for_portrait = {
		desc = "Martial skill scaled between 0.0 and 1.0 for portraits"
		type = value
		input_scopes = character
		output_scope = any
	}
	max_active_accolades = {
		desc = "How many active accolades can this character have at most? max_active_accolades <= 3"
		type = value
		input_scopes = character
		output_scope = any
	}
	max_domain_fertility = {
		desc = "Get the max domain fertility of the scoped character"
		type = value
		input_scopes = character
		output_scope = any
	}
	max_military_strength = {
		desc = "Is the scoped character's max military strength this big?"
		type = value
		input_scopes = character
		output_scope = any
	}
	max_number_maa_soldiers_of_base_type = {
		desc = "Does the scope character have value amount of max soldiers of MaA of the base type?"
		type = value
		input_scopes = character
		output_scope = any
	}
	max_number_maa_soldiers_of_type = {
		desc = "Does the scope character have value amount of max soldiers of MaA of the type?"
		type = value
		input_scopes = character
		output_scope = any
	}
	max_number_of_concubines = {
		desc = "The maximum number of concubines a character can have max_number_of_concubines > 2"
		type = value
		input_scopes = character
		output_scope = any
	}
	max_number_of_knights = {
		desc = "Check how many knights the scoped character can potentially have"
		type = value
		input_scopes = character
		output_scope = any
	}
	military_power = {
		desc = "Is the scoped character's military power this big?"
		type = value
		input_scopes = character
		output_scope = any
	}
	monthly_character_balance = {
		desc = "Is the scoped character's monthly balance this big?"
		type = value
		input_scopes = character
		output_scope = any
	}
	monthly_character_expenses = {
		desc = "Is the scoped character's monthly expenses this big?"
		type = value
		input_scopes = character
		output_scope = any
	}
	monthly_character_income = {
		desc = "Is the scoped character's monthly income this big?"
		type = value
		input_scopes = character
		output_scope = any
	}
	monthly_character_income_long_term = {
		desc = "did the character allocate the required gold? (AI category long term)"
		type = value
		input_scopes = character
		output_scope = any
	}
	monthly_character_income_reserved = {
		desc = "did the character allocate the required gold? (AI category reserved)"
		type = value
		input_scopes = character
		output_scope = any
	}
	monthly_character_income_short_term = {
		desc = "did the character allocate the required gold? (AI category short term)"
		type = value
		input_scopes = character
		output_scope = any
	}
	monthly_character_income_war_chest = {
		desc = "did the character allocate the required gold? (AI category war chest)"
		type = value
		input_scopes = character
		output_scope = any
	}
	monthly_character_men_at_arms_expense_gold = {
		desc = "Is the scoped character's monthly military gold expenses this big? (unraised maa costs)"
		type = value
		input_scopes = character
		output_scope = any
	}
	monthly_character_men_at_arms_expense_prestige = {
		desc = "Is the scoped character's monthly military prestige expenses this big? (unraised maa costs)"
		type = value
		input_scopes = character
		output_scope = any
	}
	months_as_ruler = {
		desc = "Number of months this character has been a ruler, returns -1 if character isn't a ruler"
		type = value
		input_scopes = character
		output_scope = any
	}
	morph_gene_attribute = {
		desc = "Compare entity attribute from specific gene Example scope:character = {  morph_gene_attribute = {   category = gene_height   attribute = body_height   value < 0.05  } } An interface trigger, can only be used in specific places"
		type = value
		input_scopes = character
		output_scope = any
	}
	morph_gene_value = {
		desc = "Compare value of specific gene. Does NOT take into account trait modifiers scope:character = {  morph_gene_attribute = {   category = gene_height   value < 0.05  } } scope:character = {  morph_gene_value:gene_baldness > 0.05  0.05 < morph_gene_value:gene_baldness } An interface trigger, can only be used in specific places"
		type = value
		input_scopes = character
		output_scope = any
	}
	num_active_accolades = {
		desc = "How many active accolades does this character currently have? num_active_accolades < 4"
		type = value
		input_scopes = character
		output_scope = any
	}
	num_inactive_accolades = {
		desc = "How many inactive accolades does this character currently have? num_inactive_accolades > 0"
		type = value
		input_scopes = character
		output_scope = any
	}
	num_of_bad_genetic_traits = {
		desc = "Compare the number of bad genetic traits <charater> = { num_of_bad_genetic_traits = 0 }"
		type = value
		input_scopes = character
		output_scope = any
	}
	num_of_good_genetic_traits = {
		desc = "Compare the number of good genetic traits <charater> = { num_of_good_genetic_traits >= 2 }"
		type = value
		input_scopes = character
		output_scope = any
	}
	num_of_known_languages = {
		desc = "How many languages does the character know? num_of_known_languages > 1"
		type = value
		input_scopes = character
		output_scope = any
	}
	num_offered_task_contracts = {
		desc = "Count of active task contract offered scope:actor = { num_offered_task_contracts > 0 }"
		type = value
		input_scopes = character
		output_scope = any
	}
	num_personal_legend_seeds = {
		desc = "How many personal legend seeds are available to this character?"
		type = value
		input_scopes = character
		output_scope = any
	}
	num_scripted_legend_seeds = {
		desc = "How many scripted legend seeds are available to this character? They do not need to be valid to start"
		type = value
		input_scopes = character
		output_scope = any
	}
	num_sinful_traits = {
		desc = "Does the scoped character have this number of virtous traits? num_virtous_traits > 5 ORnum_virtous_traits = { value > 5 faith = scope:faith }, to base it on what a specific faith considers virtuous"
		type = value
		input_scopes = character
		output_scope = any
	}
	num_taken_task_contracts = {
		desc = "Amount of taken task contracts for character (accepted & not yet completed) scope:actor = { num_taken_task_contracts > 0 }"
		type = value
		input_scopes = character
		output_scope = any
	}
	num_task_contracts = {
		desc = "Amount of tas contracts for character scope:actor = { num_task_contracts > 0 }"
		type = value
		input_scopes = character
		output_scope = any
	}
	num_triggered_legend_seeds = {
		desc = "How many scripted legend seeds are available to this character and valid to start?"
		type = value
		input_scopes = character
		output_scope = any
	}
	num_virtuous_traits = {
		desc = "Does the scoped character have this number of virtous traits? num_virtous_traits > 5 ORnum_virtous_traits = { value > 5 faith = scope:faith }, to base it on what a specific faith considers virtuous"
		type = value
		input_scopes = character
		output_scope = any
	}
	number_maa_regiments_of_type = {
		desc = "Does the scope character have value amount of MaA of the type?"
		type = value
		input_scopes = character
		output_scope = any
	}
	number_maa_soldiers_of_base_type = {
		desc = "Does the scope character have value amount of soldiers of MaA of the base type?"
		type = value
		input_scopes = character
		output_scope = any
	}
	number_maa_soldiers_of_type = {
		desc = "Does the scope character have value amount of soldiers of MaA of the type?"
		type = value
		input_scopes = character
		output_scope = any
	}
	number_of_commander_traits = {
		desc = "does the character have this many commander traits?"
		type = value
		input_scopes = character
		output_scope = any
	}
	number_of_concubines = {
		desc = "The number of concubines the scoped character has number_of_concubines > 2"
		type = value
		input_scopes = character
		output_scope = any
	}
	number_of_desired_concubines = {
		desc = "The number of fertile concubines the scoped character should have to not get penalties number_of_desired_concubines > 2"
		type = value
		input_scopes = character
		output_scope = any
	}
	number_of_election_votes = {
		desc = "Check the number of votes the scoped character has in the target title number_of_election_votes = { title = scope:actor.primary_title value = 0 }"
		type = value
		input_scopes = character
		output_scope = any
	}
	number_of_fertile_concubines = {
		desc = "The number of visibly fertile concubines the scoped character has number_of_fertile_concubines > 2"
		type = value
		input_scopes = character
		output_scope = any
	}
	number_of_knights = {
		desc = "Check how many knights the scoped character has at the moment"
		type = value
		input_scopes = character
		output_scope = any
	}
	number_of_lifestyle_traits = {
		desc = "does the character have this many lifestyle traits?"
		type = value
		input_scopes = character
		output_scope = any
	}
	number_of_maa_regiments = {
		desc = "The number of men at arms the scoped character has"
		type = value
		input_scopes = character
		output_scope = any
	}
	number_of_personality_traits = {
		desc = "does the character have this many personality traits?"
		type = value
		input_scopes = character
		output_scope = any
	}
	number_of_powerful_vassals = {
		desc = "Does the character have a specified number of powerful vassals?"
		type = value
		input_scopes = character
		output_scope = any
	}
	number_of_sinful_traits_in_common = {
		desc = "do the two characters share a number of traits that is considered sinful by both of their respective faiths? number_of_sinful_traits_in_common = { target = X value >/</>=/<= Y }"
		type = value
		input_scopes = character
		output_scope = any
	}
	number_of_stationed_maa_regiments = {
		desc = "The number of stationed men at arms the scoped character has"
		type = value
		input_scopes = character
		output_scope = any
	}
	number_of_traits = {
		desc = "does the character have this many traits?"
		type = value
		input_scopes = character
		output_scope = any
	}
	number_of_tributaries = {
		desc = "The number of tributaries the scoped character has number_of_tributaries > 2"
		type = value
		input_scopes = character
		output_scope = any
	}
	number_of_virtue_traits_in_common = {
		desc = "do the two characters share a number of traits that is considered virtuous by both of their respective faiths? number_of_virtue_traits_in_common = { target = X value >/</>=/<= Y }"
		type = value
		input_scopes = character
		output_scope = any
	}
	number_title_maa_regiments_of_type = {
		desc = "Does the scope character have value amount of MaA of the type for their controlled title troops?"
		type = value
		input_scopes = character
		output_scope = any
	}
	parent_relatedness = {
		desc = "The percentage of shared DNA between the character's parents. Traverses the family tree for NDefines::NChildbirth::INBREEDING_ANCESTOR_GENERATIONS amount of generations to find common ancestors. By default this means that we're traversing 4 generations (62 ancestors) and report the relatedness between the two parents. (See https://relatednesscalculator.nolanlawson.com/ for some examples). `relatedness > 0.25` where 0.0 means not related at all and 1.0 means identical twins"
		type = value
		input_scopes = character
		output_scope = any
	}
	participated_wars = {
		desc = "Checks how many wars the character has been in during their lifetime. (Only for alive characters): scope:character = { participated_wars > 3 }"
		type = value
		input_scopes = character
		output_scope = any
	}
	perk_points = {
		desc = "Does the character have this many perk points across all lifestyles combined?"
		type = value
		input_scopes = character
		output_scope = any
	}
	perk_points_assigned = {
		desc = "Does the character have this many perk points assigned across all lifestyles combined?"
		type = value
		input_scopes = character
		output_scope = any
	}
	piety = {
		desc = "does the character have the required piety?"
		type = value
		input_scopes = character
		output_scope = any
	}
	piety_level = {
		desc = "does the character have the required piety level?"
		type = value
		input_scopes = character
		output_scope = any
	}
	player_heir_position = {
		desc = "Check where the target character is in the scoped character's player heir list. player_heir_position = { target = scope:actor position = 0 }"
		type = value
		input_scopes = character
		output_scope = any
	}
	pregnancy_days = {
		desc = "How long has the character been pregnant? Counts from impregnation, not reveal"
		type = value
		input_scopes = character
		output_scope = any
	}
	prestige = {
		desc = "does the character have the required prestige?"
		type = value
		input_scopes = character
		output_scope = any
	}
	prestige_level = {
		desc = "does the character have the required prestige level?"
		type = value
		input_scopes = character
		output_scope = any
	}
	provision_cost_to_domicile = {
		desc = "What is the provision cost between the domicile owner and the domicile's current location." In order to calculate the cost we will operate in three stages:  1. Check if the from and to provinces are direct neighbours.  2. Check any travel plan the domicile owner might have and see if the from and     to are part of the travel plan. This will require domicile's location to be     the first entry in the travel plan.  3. Do a pathfind between the domicile and domicile owner's current location,     using that path for the cost. scope:character = {  provision_cost_to_domicile > 100 }"
		type = value
		input_scopes = character
		output_scope = any
	}
	prowess = {
		desc = "does the character have the required prowess skill level?"
		type = value
		input_scopes = character
		output_scope = any
	}
	prowess_diff = {
		desc = "does the character have the required prowess skill level difference against target? prowess = { target = character value <= script_value abs = yes/no(optional, default no) }"
		type = value
		input_scopes = character
		output_scope = any
	}
	prowess_for_portrait = {
		desc = "Prowess skill scaled between 0.0 and 1.0 for portraits"
		type = value
		input_scopes = character
		output_scope = any
	}
	prowess_no_portrait = {
		desc = "does the character have the required prowess skill level (ignores the prowess_no_portrait modifier)?"
		type = value
		input_scopes = character
		output_scope = any
	}
	ransom_cost = {
		desc = "what is the ransom cost of the character?"
		type = value
		input_scopes = character
		output_scope = any
	}
	realm_size = {
		desc = "Is the scoped character's top liege's realm this big (# of counties)?"
		type = value
		input_scopes = character
		output_scope = any
	}
	realm_to_title_distance_squared = {
		desc = "Is the character's realm within this distance of the title? Distance is in pixels, squared for performance reasons. realm_to_title_distance_squared = { title = some_title value > 10000 }"
		type = value
		input_scopes = character
		output_scope = any
	}
	reserved_gold = {
		desc = "does the character have the required gold? (AI category 'reserved')"
		type = value
		input_scopes = character
		output_scope = any
	}
	reserved_gold_maximum = {
		desc = "How big is the 'reserved' budget is supposed to get?"
		type = value
		input_scopes = character
		output_scope = any
	}
	scriptedtests_dread_base = {
		desc = "does the character have the specified dread baseline value?"
		type = value
		input_scopes = character
		output_scope = any
	}
	scriptedtests_gold_income_no_theocracy = {
		desc = "does the character have the specified tax income, excluding income from the theocratic lessee?"
		type = value
		input_scopes = character
		output_scope = any
	}
	scriptedtests_piety_income = {
		desc = "does the character have the specified piety income?"
		type = value
		input_scopes = character
		output_scope = any
	}
	short_term_gold = {
		desc = "does the character have the required gold? (AI category 'short term')"
		type = value
		input_scopes = character
		output_scope = any
	}
	short_term_gold_maximum = {
		desc = "How big is the 'short term' budget is supposed to get?(It may exceed this if all other budgets are full)"
		type = value
		input_scopes = character
		output_scope = any
	}
	stewardship = {
		desc = "does the character have the required stewardship skill level?"
		type = value
		input_scopes = character
		output_scope = any
	}
	stewardship_diff = {
		desc = "does the character have the required stewardship skill level difference against target? stewardship = { target = character value <= script_value abs = yes/no(optional, default no) }"
		type = value
		input_scopes = character
		output_scope = any
	}
	stewardship_for_portrait = {
		desc = "Stewardship skill scaled between 0.0 and 1.0 for portraits"
		type = value
		input_scopes = character
		output_scope = any
	}
	stress = {
		desc = "does the character have the required stress?"
		type = value
		input_scopes = character
		output_scope = any
	}
	stress_level = {
		desc = "does the character have the required stress level?"
		type = value
		input_scopes = character
		output_scope = any
	}
	strife_opinion = {
		desc = "Strife opinion value accumulated by the character"
		type = value
		input_scopes = character
		output_scope = any
	}
	sub_realm_size = {
		desc = "Is the scoped character's sub-realm this big (# of counties)?"
		type = value
		input_scopes = character
		output_scope = any
	}
	succession_appointment_score_invested = {
		desc = "How much has the scoped character invested in the target title towards the target candidate? scope:character = {  succession_appointment_score_invested = {   title = scope:title   candidate = scope:character   value < 0  } }"
		type = value
		input_scopes = character
		output_scope = any
	}
	target_weight = {
		desc = "Target weight of the scoped character target_weight > 10"
		type = value
		input_scopes = character
		output_scope = any
	}
	tax_collector_aptitude = {
		desc = "What is the scoped character's Tax Collector aptitude in the target tax slot type? tax_collector_aptitude = { tax_slot_type = tax_slot_type value >= 1 }"
		type = value
		input_scopes = character
		output_scope = any
	}
	tax_to_liege = {
		desc = "The amount of tax a character sends to their liege"
		type = value
		input_scopes = character
		output_scope = any
	}
	time_to_hook_expiry = {
		desc = "The # of days until the scoped character's hook on the target expires time_to_hook_expiry = { target = someone value > 50 }"
		type = value
		input_scopes = character
		output_scope = any
	}
	trait_compatibility = {
		desc = "target = other character value >/</= sum of trait compatibility values"
		type = value
		input_scopes = character
		output_scope = any
	}
	travel_leader_cost = {
		desc = "What this character would cost as a travel leader"
		type = value
		input_scopes = character
		output_scope = any
	}
	travel_leader_safety = {
		desc = "The safety-aptitude of the current travel leader"
		type = value
		input_scopes = character
		output_scope = any
	}
	travel_leader_speed = {
		desc = "The speed-aptitude of the current travel leader"
		type = value
		input_scopes = character
		output_scope = any
	}
	tyranny = {
		desc = "does the character have the required tyranny?"
		type = value
		input_scopes = character
		output_scope = any
	}
	vassal_contract_liege_dynasty_reign_start_date = {
		desc = "Date when this vassal's liege's dynasty started ruling over this vassal"
		type = value
		input_scopes = character
		output_scope = any
	}
	vassal_contract_obligation_level_score = {
		desc = "The score in favour of the vassal for the provided contract type in the scoped character's current vassal contract"
		type = value
		input_scopes = character
		output_scope = any
	}
	vassal_count = {
		desc = "Is the scoped character's number of vassals (excluding barons) this high?"
		type = value
		input_scopes = character
		output_scope = any
	}
	vassal_limit = {
		desc = "Is the scoped character's vassal limit this big?"
		type = value
		input_scopes = character
		output_scope = any
	}
	vassal_limit_available = {
		desc = "Is there this much space left in the character's vassal limit? Negative values also work for checking characters that are above their limit"
		type = value
		input_scopes = character
		output_scope = any
	}
	vassal_limit_percentage = {
		desc = "Is the scoped character's vassal count this big in comparison to their limit?"
		type = value
		input_scopes = character
		output_scope = any
	}
	war_chest_gold = {
		desc = "does the character have the required gold? (AI category 'war chest')"
		type = value
		input_scopes = character
		output_scope = any
	}
	war_chest_gold_maximum = {
		desc = "How big is the 'war chest' budget is supposed to get?"
		type = value
		input_scopes = character
		output_scope = any
	}
	year_of_birth = {
		desc = "Get character year_of_birth: scope:character = { year_of_birth > 1096 }"
		type = value
		input_scopes = character
		output_scope = any
	}
	yearly_character_balance = {
		desc = "Is the scoped character's yearly balance this big?"
		type = value
		input_scopes = character
		output_scope = any
	}
	yearly_character_expenses = {
		desc = "Is the scoped character's yearly expenses this big?"
		type = value
		input_scopes = character
		output_scope = any
	}
	yearly_character_income = {
		desc = "Is the scoped character's yearly income this big?"
		type = value
		input_scopes = character
		output_scope = any
	}
	yearly_character_men_at_arms_expense_gold = {
		desc = "Is the scoped character's yearly military gold expenses this big? (unraised maa costs)"
		type = value
		input_scopes = character
		output_scope = any
	}
	yearly_character_men_at_arms_expense_prestige = {
		desc = "Is the scoped character's yearly military prestige expenses this big? (unraised maa costs)"
		type = value
		input_scopes = character
		output_scope = any
	}
	years_as_diarch = {
		desc = "How many whole years has the character been an active diarch?"
		type = value
		input_scopes = character
		output_scope = any
	}
	years_as_ruler = {
		desc = "Number of years this character has been a ruler, returns -1 if character isn't a ruler"
		type = value
		input_scopes = character
		output_scope = any
	}
	years_in_diarchy = {
		desc = "How many whole years has liege spent in a diarchy?"
		type = value
		input_scopes = character
		output_scope = any
	}
	num_total_troops = {
		desc = "Number of total troops on boths sides. num_total_troops >= 2000"
		type = value
		input_scopes = combat
		output_scope = any
	}
	warscore_value = {
		desc = "Warscore value. warscore_value >= 25"
		type = value
		input_scopes = combat
		output_scope = any
	}
	active_de_jure_drift_progress = {
		desc = "task_current_value = scope:county.active_de_jure_drift_progress"
		type = value
		input_scopes = landed_title
		output_scope = any
	}
	county_control = {
		desc = "does the county title have the required county countrol?"
		type = value
		input_scopes = landed_title
		output_scope = any
	}
	county_fertility = {
		desc = "Does the county title have the required County Fertility value? scope:county.county_fertility >= <value>"
		type = value
		input_scopes = landed_title
		output_scope = any
	}
	county_holder_opinion = {
		desc = "Compares the county's opinion of its holder"
		type = value
		input_scopes = landed_title
		output_scope = any
	}
	county_opinion = {
		desc = "compares the county's opinion of the current count"
		type = value
		input_scopes = landed_title
		output_scope = any
	}
	county_opinion_target = {
		desc = "compares the county's opinion of the target character to the specified value, county_opinion_target = { target = X value >/</= Y }"
		type = value
		input_scopes = landed_title
		output_scope = any
	}
	development_level = {
		desc = "does the county title have the required county development level?"
		type = value
		input_scopes = landed_title
		output_scope = any
	}
	development_rate = {
		desc = "how much development progress is the county gaining each month?"
		type = value
		input_scopes = landed_title
		output_scope = any
	}
	development_rate_modifier = {
		desc = "What's the multiplier to the development progress?"
		type = value
		input_scopes = landed_title
		output_scope = any
	}
	development_towards_level_increase = {
		desc = "does the county title have the required progress towards the next level of development? E.G., if level 1 is 100, level 2 is 300 (these are set in defines), and current total is 150, this would return 50"
		type = value
		input_scopes = landed_title
		output_scope = any
	}
	fertility_equilibrium = {
		desc = "Check the projected fertility equilibrium of a scoped county This script is very heavy - and should only be used in script at your own risk, modders."
		type = value
		input_scopes = landed_title
		output_scope = any
	}
	monthly_county_control_change = {
		desc = "How much county control is the county gaining/losing each month in total?"
		type = value
		input_scopes = landed_title
		output_scope = any
	}
	monthly_county_control_decline = {
		desc = "How much county control is the county declining each month? (ignoring any growth)"
		type = value
		input_scopes = landed_title
		output_scope = any
	}
	monthly_county_control_decline_factor = {
		desc = "What's the multiplier to the control decline rate? E.G., if there's just a +20% modifier, this would return 1.2"
		type = value
		input_scopes = landed_title
		output_scope = any
	}
	monthly_county_control_growth = {
		desc = "How much county control is the county gaining each month? (ignoring any decline)"
		type = value
		input_scopes = landed_title
		output_scope = any
	}
	monthly_county_control_growth_factor = {
		desc = "What's the multiplier to the control growth rate? E.G., if there's just a +20% modifier, this would return 1.2"
		type = value
		input_scopes = landed_title
		output_scope = any
	}
	num_county_holdings = {
		desc = "How many provinces in this county have holdings"
		type = value
		input_scopes = landed_title
		output_scope = any
	}
	place_in_line_of_succession = {
		desc = "what place in line of succession does the character hold?"
		type = value
		input_scopes = landed_title
		output_scope = any
	}
	tier = {
		desc = "What tier is the scoped title? barony = 1, empire = 5. Use the script values please, not raw numbers"
		type = value
		input_scopes = landed_title
		output_scope = any
	}
	title_held_years = {
		desc = "Returns the number of years a title is held if valid (otherwise returns 0)"
		type = value
		input_scopes = landed_title
		output_scope = any
	}
	title_join_faction_chance = {
		desc = "Check if the chance of the scope landed title to join the faction against the scripted value title_join_faction_chance = {      faction = faction_target #An ongoing faction     value <|<=|>=|> 0 }"
		type = value
		input_scopes = landed_title
		output_scope = any
	}
	average_faction_opinion = {
		desc = "Average opinion of all the characters of the faction scope target"
		type = value
		input_scopes = faction
		output_scope = any
	}
	average_faction_opinion_not_powerful_vassal = {
		desc = "Average opinion of the character that are NOT powerful vassals of the faction scope target"
		type = value
		input_scopes = faction
		output_scope = any
	}
	average_faction_opinion_powerful_vassal = {
		desc = "Average opinion of the character that are powerful vassals of the faction scope target"
		type = value
		input_scopes = faction
		output_scope = any
	}
	discontent_per_month = {
		desc = "How much is the Faction's Discontent increasing each month?"
		type = value
		input_scopes = faction
		output_scope = any
	}
	faction_discontent = {
		desc = "Current discontent of the faction"
		type = value
		input_scopes = faction
		output_scope = any
	}
	faction_power = {
		desc = "Current power of the faction"
		type = value
		input_scopes = faction
		output_scope = any
	}
	faction_power_threshold = {
		desc = "Current power threshold of the faction"
		type = value
		input_scopes = faction
		output_scope = any
	}
	months_until_max_discontent = {
		desc = "How many months until Discontent is max (100)?"
		type = value
		input_scopes = faction
		output_scope = any
	}
	number_of_faction_members_in_council = {
		desc = "Current number of faction members in faction"
		type = value
		input_scopes = faction
		output_scope = any
	}
	building_levies = {
		desc = "The amount of levies in a county or province from buildings levies > 100"
		type = value
		input_scopes = { landed_title province }
		output_scope = any
	}
	building_max_garrison = {
		desc = "The max amount of garrison in a county or province from buildings levies > 100"
		type = value
		input_scopes = { landed_title province }
		output_scope = any
	}
	num_enemies_killed = {
		desc = "Number of troops killed on the opposite side. num_enemies_killed >= 500"
		type = value
		input_scopes = combat_side
		output_scope = any
	}
	percent_enemies_killed = {
		desc = "Percantage of enemies killed out of total number of enemy soldiers. percent_enemies_killed >= 80"
		type = value
		input_scopes = combat_side
		output_scope = any
	}
	side_army_size = {
		desc = "what is the current size of all armies combined on this combat side?"
		type = value
		input_scopes = combat_side
		output_scope = any
	}
	side_max_army_size = {
		desc = "what is the max possible size of all armies combined on this combat side?"
		type = value
		input_scopes = combat_side
		output_scope = any
	}
	side_soldiers = {
		desc = "How many soldiers does this side have still fighting?"
		type = value
		input_scopes = combat_side
		output_scope = any
	}
	side_strength = {
		desc = "How strong is this side (based on soldiers still fighting)? Scaled down by a factor of 1000 so it doesn't get too large to do math on"
		type = value
		input_scopes = combat_side
		output_scope = any
	}
	troops_ratio = {
		desc = "Side's troops/opposide side's troops.ntroops_ratio < 0.5"
		type = value
		input_scopes = combat_side
		output_scope = any
	}
	external_domicile_building_slots = {
		desc = "Total amount of external building slots for scoped domicile scope:domicile = { external_domicile_building_slots == 5 }"
		type = value
		input_scopes = domicile
		output_scope = any
	}
	free_external_domicile_building_slots = {
		desc = "Amount of free external building slots for scoped domicile scope:domicile = { free_external_domicile_building_slots < 1 }"
		type = value
		input_scopes = domicile
		output_scope = any
	}
	herd = {
		desc = "does the scoped domicile have the required herd?"
		type = value
		input_scopes = domicile
		output_scope = any
	}
	horde = {
		desc = "what is the amount of currently raised horde (or potential horde if none are raised) of the scoped domicile?"
		type = value
		input_scopes = domicile
		output_scope = any
	}
	max_herd = {
		desc = "what is the herd limit of the scoped domicile?"
		type = value
		input_scopes = domicile
		output_scope = any
	}
	max_provisions = {
		desc = "does the scoped domicile have the required max provisions?"
		type = value
		input_scopes = domicile
		output_scope = any
	}
	num_domicile_buildings = {
		desc = "Amount of buildings constructed for scoped domicile scope:domicile = { num_domicile_buildings > 0 }"
		type = value
		input_scopes = domicile
		output_scope = any
	}
	provision_cost_to_owner = {
		desc = "Is the provision cost from the domicile's current location to it's owner. In order to calculate the cost we will operate in three stages:  1. Check if the from and to provinces are direct neighbours.  2. Check any travel plan the domicile owner might have and see if the from and     to are part of the travel plan. This will require domicile's location to be     the first entry in the travel plan.  3. Do a pathfind between the domicile and domicile owner's current location,     using that path for the cost. scope:domicile = {  provision_cost_to_owner < 100 }"
		type = value
		input_scopes = domicile
		output_scope = any
	}
	provisions = {
		desc = "does the scoped domicile have the required provisions?"
		type = value
		input_scopes = domicile
		output_scope = any
	}
	base_inspiration_gold_cost = {
		desc = "base_inspiration_gold_cost > 5 Gets the base gold cost of the scoped inspiration"
		type = value
		input_scopes = inspiration
		output_scope = any
	}
	days_since_creation = {
		desc = "days_since_creation > 5 Gets the days since creation of the scoped inspiration"
		type = value
		input_scopes = inspiration
		output_scope = any
	}
	days_since_sponsorship = {
		desc = "days_since_sponsorship > 5 Gets the days since sponsorship started of the scoped inspiration"
		type = value
		input_scopes = inspiration
		output_scope = any
	}
	inspiration_gold_invested = {
		desc = "inspiration_gold_invested > 5 Gets the amount of gold invested in the scoped inspiration"
		type = value
		input_scopes = inspiration
		output_scope = any
	}
	inspiration_progress = {
		desc = "inspiration_progress > 5 Gets the progress of the scoped inspiration"
		type = value
		input_scopes = inspiration
		output_scope = any
	}
}
