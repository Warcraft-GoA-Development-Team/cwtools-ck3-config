types = {
    type[lifestyle] = {
        path = "game/common/lifestyles"
        localisation = {
            ## required
            ## primary
            Name = "$_name"

            ## required
            Description = "$_desc"

            HighlightDescription = "$_highlight_desc"
		}
    }
    type[lifestyle_perk] = {
        path = "game/common/lifestyle_perks"
        localisation = {
            ## required
            ## primary
            Name = "$_name"
        }
    }
}

lifestyle = {
    ## cardinality = 0..1
    ## replace_scope = { root = character }
    ### Trigger for being highlighted.
    is_highlighted = single_alias_right[trigger_clause]

    ### Amount of XP needed per perk point.
    xp_per_level = int
    ### Amount of XP gained each month. Before modifiers.
    base_xp_gain = int

    ## cardinality = 0..1
    ### What key to use for the icon; if not defined, will use the key of the lifestyle.
    icon = filepath[gfx/interface/icons/lifestyles/,.dds]

    # TODO: What these do
    ## cardinality = 0..1
    ## push_scope = character
    ### these will be shown only if they fail; scope: character; default: { always = yes }
    is_valid_showing_failures_only = single_alias_right[trigger_clause]
    ## cardinality = 0..1
    ## push_scope = character
    ### scope: character; default: { always = yes }
    is_valid = single_alias_right[trigger_clause]
}

lifestyle_perk = {
    ## cardinality = 0..1
    ### What key to use for the icon; if not defined, will use the key of the perk.
    icon = filepath[game/gfx/interface/icons/lifestyles_perks/,.dds]
    ## cardinality = 0..1
    ### Dynamic description. If not set, generated loc key will be used. Character scope.
    name = localisation
    ## cardinality = 0..1
    ## push_scope = character
    ### Dynamic description. If not set, generated loc key will be used. Character scope.
    name = single_alias_right[complex_desc]

    ### Key of the tree it belongs to. Only used for GUI layout.
    tree = scalar
    ### Its positioning within the tree. Only used for GUI layout. Multiplied with PERK_X_OFFSET and PERK_Y_OFFSET.
    position = single_alias_right[position]

    ### Which lifestyle the perk belongs to.
    lifestyle = <lifestyle>
    # TODO: Is there an upper limit?
    ## cardinality = 0..inf
    ### Parent perk. Needed to unlock this perk. Multiple parents can be defined.
    parent = <lifestyle_perk>

    ## cardinality = 0..1
    ## push_scope = character
    ### Trigger in character scope. Used in addition to the parent perks to determine if a character can pick a perk.
    can_be_picked = single_alias_right[trigger_clause]
    ## cardinality = 0..1
    ## push_scope = character
    ### Trigger in character scope. Used in addition to can_be_picked and the parent perks to determine if a character can get a given perk on auto-selection (campaign start, and when becoming landed).
    can_be_auto_selected = single_alias_right[trigger_clause]
    ## cardinality = 0..1
    ## push_scope = character
    ### Run on unlock. Character scope.
    effect = single_alias_right[effect_clause]
    ## cardinality = 0..1
    ### Applied to characters with the perk.
    character_modifier = single_alias_right[character_modifier]
    ## cardinality = 0..inf
    ### Additional modifier applied to characters with the perk and their faith having the specified doctrine. Multiple ones can be defined.
    doctrine_character_modifier = single_alias_right[doctrine_character_modifier]
    ## cardinality = 0..1
    ## push_scope = character
    ### Script value for weight for auto-selection. Scope is the character. If omitted, default weight is 1000.
    auto_selection_weight = single_alias_right[score_formula]
}

single_alias[position] = {
    ## cardinality = 2..2
    float
}

enums = {
    complex_enum[perk_tree] = {
        path = "game/common/lifestyle_perks"

        name = {
            tree = enum_name
        }
    }
}