types = {
    type[maa_type] = {
        path = "game/common/men_at_arms_types"
    }
}

maa_type = {
    ### Unit archetype of the regiment. Used for modifiers and counters.
    type = value_set[unit_type]
    ## cardinality = 0..1
    ### Optional, use this name instead of the key when selecting icon graphics.
    icon = scalar

    ## cardinality = 0..1
    ### If set, can't be recruited. For use by mercs/holy orders instead. Defaults to yes.
    can_recruit = bool
    ## cardinality = 0..1
    ### Whether it's allowed to have this regiment type for mercenaries and holy orders. Defaults to yes.
    allowed_in_hired_troops = bool
    # TODO: IDK what these can do exactly.
    ## cardinality = 0..1
    ### Whether mercenaries are allowed to be select this regiment type if there are no valid options defined for them after filtering out regiments that haven't been unlocked. Defaults to no.
    mercenary_fallback = bool
    ## cardinality = 0..1
    ### Whether holy orders are allowed to be select this regiment type if there are no valid options defined for them after filtering out regiments that haven't been unlocked. Defaults to no.
    holy_order_fallback = bool
    ## cardinality = 0..1
    ### Mercs/holy orders won't have a preference towards this MaA if it is unlocked
    fallback_in_hired_troops_if_unlocked = bool

    ## cardinality = 0..inf
	###  Unit modifier.
    alias_name[maa_modifier] = alias_match_left[maa_modifier]

	## cardinality = 0..1
	###  If set, only affects the pursuit phase. Handy for siege weapons.
	fights_in_main_phase = bool
	## cardinality = 0..1
	###  How good it is at countering forts.
	siege_tier = int_value_field

	### Costs. Support gold, prestige, and piety.
	buy_cost = single_alias_right[cost]
	###  Maintenance paid when the regiment is unraised and fully reinforced or when reinforcement is disabled.
	low_maintenance_cost = single_alias_right[cost]
	###  Maintenance paid when the regiment is raised or not fully reinforced.
	high_maintenance_cost = single_alias_right[cost]
	
	## cardinality = 0..1
	### Terrain bonuses pursuit, siege_value, etc.
	terrain_bonus = {
        ## cardinality = 1..inf
		<terrain> = {
            ## cardinality = 1..inf
            alias_name[maa_modifier] = alias_match_left[maa_modifier]
        }
	}

    ## cardinality = 0..1
	### Winter modifications for unit
    winter_bonus = {
        ## cardinality = 0..1
    	### Normal winter modifications for unit
        normal_winter = {
            ## cardinality = 1..inf
            alias_name[maa_modifier] = alias_match_left[maa_modifier]
        }
        ## cardinality = 0..1
    	### Harsh winter modifications for unit
        harsh_winter = {
            ## cardinality = 1..inf
            alias_name[maa_modifier] = alias_match_left[maa_modifier]
        }
    }
    
    ## cardinality = 0..1
	### Winter modifications for unit
    era_bonus = {
        ## cardinality = 1..inf
    	### Cultural era modifier
        <era> = {
            ## cardinality = 1..inf
            alias_name[maa_modifier] = alias_match_left[maa_modifier]
        }
    }
    
    ## cardinality = 0..1
	### Trigger in character scope for whether you can recruit it. Optional. Mutually exclusive with being unlocked by innovation
    can_recruit = single_alias_right[trigger_clause]

	## cardinality = 0..1
	### What archetypes it counters, and how much. The number is how many subregiments it counters
	counters = {
        ## cardinality = 0..inf
		value[unit_type] = int_value_field
	}

    ## cardinality = 0..inf
	### Size of one sub-regiment.
    stack = int_value_field
    ## cardinality = 0..1
	### Maximal amount of sub-regiments.
    max_sub_regiments = int_value_field
    ## cardinality = 0..1
	### size of sub-regiment for the purpose of hired troops. If not set, this will be the same as the "stack" value
    hired_stack_size = int_value_field

	## push_scope = character
    ## cardinality = 0..inf
	###  Script value in character scope. Used in addition to a quality calculation (based on TOUGHNESS_SCORE_MULT, etc.) to figure out what the AI should buy/disband.
	ai_quality = single_alias_right[int_conditional_formula]
}

###  Extra damage dealt in pursuit phase if on winning side.
alias[maa_modifier:pursuit] = int_value_field
###  Extra damage mitigated in pursuit phase if on losing side.
alias[maa_modifier:screen] = int_value_field
###  Extra damage dealt.
alias[maa_modifier:damage] = int_value_field
###  Extra ability to absorb damage.
alias[maa_modifier:toughness] = int_value_field
###  How much more it contributes to sieges.
alias[maa_modifier:siege_value] = int_value_field