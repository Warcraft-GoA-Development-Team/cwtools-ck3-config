# Best place to put this is probably here: bookmark_portraits is not covered (TODO: cover it) since it's supposed to be autogenerated anyway

types = {
    type[bookmark] = {
        path = "game/common/bookmarks/bookmarks"

        localisation = {
            ## required
            Name = "$"

            ## required
            Description = "$_desc"
        }
    }

    ## type_key_filter = character
    type[bookmark_character] = {
        path = "game/common/bookmarks/bookmarks"

        skip_root_key = { any }

        subtype[hidden] = {
            display = no
        }
    }
}

bookmark = {
    # Used in bm_1066_rags_to_riches in vanilla as of 1.8.2
    ## cardinality = 0..1
    test_default = bool

    ## cardinality = 0..1
    requires_dlc_flag = enum[dlc_feature]

    ### Which date this bookmark starts at
    start_date = date_field

    ## cardinality = 0..1
    ### Sets if this bookmark is playable or not. Defaults to yes.
    is_playable = bool

	### Sets the weight for this bookmark to be the default bookmark Bookmark with the highest value will be the default. Note that this is calculated before a gamestate exists and thus cannot use gamestate related triggers. defaults value: -1
    ## cardinality = 0..1
    weight = single_alias_right[score_formula]


    ## cardinality = 0..1
    ### If bookmark should show as recommended or not. Defaults to no.
    recommended = bool

    ## cardinality = 0..1
	### Set what group this bookmark is part of. Left empty bookmark will be ungrouped.
	group = <bookmark_group>
}

bookmark_character = {
    name = localisation
    ## cardinality = 0..1
    dynasty = <dynasty>
    ## cardinality = 0..1
    dynasty_house = <house>
    ## cardinality = 0..1
    dynasty_splendor_level = int[0..inf] # TODO: confirm bounds
    subtype[!hidden] = {
        type = enum[genders] # TODO: dig into this; something tells me this can be scripted to be more than just male/female
    }
    subtype[hidden] = {
        ## cardinality = 0..1
        type = enum[genders] # TODO: dig into this; something tells me this can be scripted to be more than just male/female
    }
    birth = date_field # TODO: see if it can be made to validate to be before the given start_date for the bookmark? Probably not worth the effort
    title = <landed_title>
    ## cardinality = 0..1
    title_text_override = localisation
    government = <government>
    ## cardinality = 0..1
    fallback_government = <government>
    culture = <culture>
    religion = <religion>
    difficulty = localisation
    history_id = <character>
    position = {
        ## cardinality = 2..2
        int[1..inf] # TODO: confirm bounds
    }

    ## cardinality = 0..1
    animation = <animation>

    ## cardinality = 0..1
    tutorial = bool

    ## cardinality = 0..1
    display = bool

    # TODO: see if I can remember how to make it with subtypes so that I don't need to duplicate stuff :D
    ## cardinality = 0..inf
    character = {
        name = localisation
        relation = localisation
        ## cardinality = 0..1
        dynasty = <dynasty>
        ## cardinality = 0..1
        dynasty_house = <house>
        ## cardinality = 0..1
        dynasty_splendor_level = int[0..inf] # TODO: confirm bounds
        type = enum[genders] # TODO: dig into this; something tells me this can be scripted to be more than just male/female
        birth = date_field # TODO: see if it can be made to validate to be before the given start_date for the bookmark? Probably not worth the effort
        ## cardinality = 0..1
        title = <landed_title>
        ## cardinality = 0..1
        government = <government>
        ## cardinality = 0..1
        fallback_government = <government>
        culture = <culture>
        religion = <religion>
        history_id = <character>

        ## cardinality = 0..1
        animation = <animation>
    }
}