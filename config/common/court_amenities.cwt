types = {
    type[court_amenity_category] = {
        path = "game/common/court_amenities"
    }
	##type_key_filter <> { default }
    type[court_amenity_level] = {
        path = "game/common/court_amenities"
        skip_root_key = any
    }
}


court_amenity_category = {

	### Optional specification of what counts as the default setting. New rulers will by default start with court amenities at this setting for this category. If it is not set, it will pick the first defined setting below.
    ## cardinality = 0..1
	default = <court_amenity_level>
	
	### Defines a court amenity setting within this category. The order individual settings are defined in here determines the order they are displayed in in the UI. I.e. settings defined first are displayed to the left, and those defined last are displayed to the right.
    ## cardinality = 1..inf
	<court_amenity_level> = {

		### Modifier applied to the owner of the court when amenities are at this setting.
        ## cardinality = 0..1
		owner_modifier = single_alias_right[character_modifier]

		### Localization key reference to text that should display in combination with the modifier effect breakdown when the bonus is not just a modifier, but a constant effect. 
		### Example entry in example_l_english.yml: 
		### 	EXAMPLE_DESCRIPTION: "More likely to attract skilled guests."
        ## cardinality = 0..1
		owner_modifier_description = localisation
		
		### Modifier applied to the courtiers and guests when court amenities are at this setting.
        ## cardinality = 0..1
		courtier_guest_modifier = single_alias_right[character_modifier]

		### Localization key reference to text that should display in combination with the modifier effect breakdown when the bonus is not just a  modifier, but a constant effect.
		### Example entry in example_l_english.yml: 
		### 	EXAMPLE_DESCRIPTION: "Higher stress loss from participating in feasts."
        ## cardinality = 0..1
		courtier_guest_modifier_description = localisation 
		
		### Determines if the AI will select this setting or not. Evaluation is done in the RARE_TASK_TICK.
		### If multiple amenity levels are possible, the AI will enact the one with the highest score, with a bias towards the currently active one of CURRENT_COURT_AMENITY_SETTING_ADDED_WEIGHT to prevent switching back and forth to closely scored options.
		### The AI tries to get the single-level increase that gives the biggest increase in score. This means that you want the scores to gradually become smaller, or the AI will go far down one path ignoring all the rest.
        ## cardinality = 0..1
        ## replace_scope = { root = character }
		ai_will_do = single_alias_right[int_conditional_formula]	

		### Trigger to check if the scoped character can pick this setting. Make sure that there are no gaps in tiers here.
		### Note that these triggers MUST be repeated to higher tiers because the AI does not skip levels when adjusting court amenities, it goes level by level both up and down.
        ## cardinality = 0..1
        ## replace_scope = { root = character }
		can_pick = single_alias_right[trigger_clause]	 
	}										
	
}