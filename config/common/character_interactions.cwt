types = {
    type[character_interaction] = {
        path = "game/common/character_interactions"
    }
}

enums = {
    enum[ai_targets] = {
        known_secrets
        scheme_targets
        hooked_characters
        neighboring_rulers
        peer_vassals
        guests
        dynasty
        courtiers
        councillors
        prisoners
        sub_realm_characters
        realm_characters
        vassals
        liege
        self
        head_of_faith
        spouses
        family
        children
        primary_war_enemies
        war_enemies
        war_allies
        scripted_relations
        activity_host
        activity_guests
    }
    
    enum[greeting] = {
        positive
        negative
    }
    
    enum[target_type] = {
        title
    }
    
    enum[target_filter] = {
        actor_domain_titles
        recipient_domain_titles
        secondary_actor_domain_titles
        secondary_recipient_domain_titles
        actor_domain_titles_including_leases
        recipient_domain_titles_including_leases
        secondary_actor_domain_titles_including_leases
        secondary_recipient_domain_titles_including_leases
        actor_de_jure_titles
        recipient_de_jure_titles
        secondary_actor_de_jure_titles
        secondary_recipient_de_jure_titles
    }
}
# TODO: Check if of the int_value_fields accept values or just ints
character_interaction = {
    ### Used by interaction menu
    ## cardinality = 0..1
    interface_priority = int_value_field
    ### Used by interaction menu
    ## cardinality = 0..1
    common_interaction = bool
    ### Used by interaction menu
    ## cardinality = 0..1
    category = <character_interaction_category>
    ### What icon to use. If an icon is used for more than one interaction; please consider making it general (such as icon_culture for interactions relating to culture or icon_personal for personal schemes.). Otherwise defaults to none/the my_interaction key + related my_interaction.dds in gfx/interface/icons/character_interactions
    ## cardinality = 0..1
    icon = filepath[gfx/interface/icons/character_interactions/,.dds]

    ### Should the interaction be highlighted in the menu
    ## cardinality = 0..1
    is_highlighted = single_alias_right[trigger_clause]
    ### Tooltip if highlighted in menu
    ## cardinality = 0..1
    highlighted_reason = localisation
    ### Flavor text that is shown under acceptance widget. Use it when you need to draw more attention to the on decline effect
    ## cardinality = 0..1
    on_decline_summary = single_alias_right[complex_desc]
    ### This interaction uses specialized GUI
    ## cardinality = 0..1
    special_interaction = <character_interaction>
    ## cardinality = 0..1
    ### This interaction runs specialized code that identifies the interaction by this
    special_ai_interaction = <character_interaction>
    ### What interface does the interaction use?
    ## cardinality = 0..1
    interface = <character_interaction>
    ## cardinality = 0..1
    ### The type of scheme the interaction starts
    scheme = <scheme>
    ### Have the interaction pop-up for the recipient when received
    ## cardinality = 0..1
    popup_on_receive = bool
    ### Force diplomatic item if interaction is auto-accept
    ## cardinality = 0..1
    force_notification = bool
    ### Pause the game on receive. It usually makes sense to combine it with popup_on_receive
    ## cardinality = 0..1
	pause_on_receive = bool
    ### If the interaction is declined negotiations will start. We don't show "won't accept", etc. because there is still a possibility that the interaction will be accepted via negotiation event chain
    ## cardinality = 0..1
    ai_accept_negotiation = bool
    ### Is the interaction hidden?
    ## cardinality = 0..1
    hidden = bool
    ### Does this interaction check diplomatic range? Yes by default
    ## cardinality = 0..1
    use_diplomatic_range = bool
    ### Does this interaction check diplomatic range? Yes by default
    ## cardinality = 0..1
    use_diplomatic_range = single_alias_right[trigger_clause]
    ### Interaction can be sent and the ai might reject
    ## cardinality = 0..1
    can_send_despite_rejection = bool
    ### If the actor is a player and the recipient already has received an interaction from them pending a response, can this interaction be sent anyway. 
    ## cardinality = 0..1
    ignores_pending_interaction_block = bool
    ### The name of the interaction in context of it being seen once sent. Defaults to 
    ## cardinality = 0..1
    send_name = localisation
    ### Does the interaction need a recipient set to be able to be allowed to open and be shown. Defaults to no
    ## cardinality = 0..1
    needs_recipient_to_open = bool
    ### Undocumented
    ## cardinality = 0..1
    show_answer_notification = bool


    ### Should the effects of the interaction be shown in the notification window when an interaction is sent. Defaults to yes
    ## cardinality = 0..1
    show_effects_in_notification = bool

    ### If this interaction should be taken by diarch, including unlanded one
    diarch_interaction = bool


    ### Default is gfx/interface/icons/character_interactions/my_interaction_alert.dds
    ## cardinality = 0..1
    alert_icon = filepath[gfx/interface/icons/character_interactions/,.dds]
    ### Default is gfx/interface/icons/character_interactions/my_interaction_small.dds
    ## cardinality = 0..1
    icon_small = filepath[gfx/interface/icons/character_interactions/,.dds]
    ### When to show an extra icon. Tooltip key is <key>_extra_icon
    ## cardinality = 0..1
    should_use_extra_icon = single_alias_right[trigger_clause]
    ### Icon to show when should_use_extra_icon is true
    ## cardinality = 0..1
    extra_icon = filepath[gfx/interface/icons/character_interactions/,.dds]

    ### Possible types: title, none (default)
    ## cardinality = 0..1
    target_type = enum[target_type]
    ### See FAQ for possible types
    ## cardinality = 0..1
    target_filter = enum[target_filter]

    ### The ai intermediary answer is randomized
    ## cardinality = 0..1
    ai_intermediary_maybe = bool
    ### The ai answer is randomized
    ## cardinality = 0..1
    ai_maybe = bool
    ### Minimum days before ai replies
    ## cardinality = 0..1
    ai_min_reply_days = int_value_field
    ### Maximum days before ai replies
    ## cardinality = 0..1
    ai_max_reply_days = int_value_field
    
    ### Short description of the interaction
    ## cardinality = 0..1
    desc = localisation
    ### Short description of the interaction
    ## cardinality = 0..1
    desc = single_alias_right[complex_desc]
    ### Sets tone in request text
    ## cardinality = 0..1
    greeting = enum[greeting]
    ### Request text shown to the intermediary
    ## cardinality = 0..1
    notification_text = localisation
    ### What text should be shown under the portrait? (For example: "Pick a Guardian")
    ## cardinality = 0..1
    prompt = localisation
    
    ### How long until the interaction can be used again?
    ## cardinality = 0..1
    cooldown = { enum[duration] = int }
    ### How long until the interaction can be used again against recipient?
    ## cardinality = 0..1
    cooldown_against_recipient = { enum[duration] = int }
    ### Under what circumstances can an interaction against a recipient be used despite there being a cooldown for targeting that recipient?
    ## cardinality = 0..1
    ## replace_scope = { actor = character recipient = character }
    ignore_recipient_recieve_cooldown = single_alias_right[trigger_clause]
    ### Will apply a cooldown to all interactions in the same category as this interaction.
	### If an interaction already has a cooldown, the longer cooldown one will be applied
    ## cardinality = 0..1
    category_cooldown = single_alias_right[duration_block]
    ### Will apply a cooldown to all interactions in the same category as this interaction
	### If an interaction already has a cooldown, the longer cooldown one will be applied
    ## cardinality = 0..1
    category_cooldown_against_recipient = single_alias_right[duration_block]

    ### Is the interaction available and visible between scope:actor and scope:recipient
    ## cardinality = 0..1
    ## replace_scope = { actor = character recipient = character }
    is_shown = single_alias_right[trigger_clause]
    ### Is the interaction valid to be selected in it's current setup, trigger only displays failures
    ## cardinality = 0..1
    is_valid_showing_failures_only = single_alias_right[trigger_clause]
    ### Is the interaction valid to be selected in it's current setup
    ## cardinality = 0..1
    is_valid = single_alias_right[trigger_clause]
    ### Is the target valid, trigger only displays failures
    ## cardinality = 0..1
    has_valid_target_showing_failures_only = single_alias_right[trigger_clause]
    ### Is the target valid
    ## cardinality = 0..1
    has_valid_target = single_alias_right[trigger_clause]
    ### Can this character be picked as a valid target
    ## cardinality = 0..1
    can_be_picked = single_alias_right[trigger_clause]
    ### Can this title be picked as a valid target
    ## cardinality = 0..1
    can_be_picked_title = single_alias_right[trigger_clause]
    ### Can this artifact be picked as a valid target
    ## cardinality = 0..1
    can_be_picked_artifact = single_alias_right[trigger_clause]
    ### Is the interaction automatically accepted, or can recipient decide
    ## cardinality = 0..1
    auto_accept = bool
    ### Is the interaction automatically accepted, or can recipient decide
    ## cardinality = 0..1
    auto_accept = single_alias_right[trigger_clause]
    ### Can the interaction be sent?
    ## cardinality = 0..1
    can_send = single_alias_right[trigger_clause]
    ### Can the interaction be blocked by the recipient (i.e. by a hook on the actor)
    ## cardinality = 0..1
    can_be_blocked = single_alias_right[trigger_clause]
    
    ### This changes the redirection of characters using the scopes actor, recipient, secondary_actor and secondary_recipient
    ## cardinality = 0..1
    redirect = single_alias_right[effect_clause]
    ### Everyone sorted into the list 'characters' has the potential of being shown to be selected. Uses the scopes actor, recipient, secondary_actor and secondary_recipient.
    ## cardinality = 0..1
    ## replace_scope = { actor = character recipient = character secondary_actor = character secondary_recipient = character }
    populate_actor_list = single_alias_right[effect_clause]
    ### Everyone sorted into the list 'characters' has the potential of being shown to be selected. Uses the scopes actor, recipient, secondary_actor and secondary_recipient.
    ## replace_scope = { actor = character recipient = character secondary_actor = character secondary_recipient = character }
    ## cardinality = 0..1
    populate_recipient_list = single_alias_right[effect_clause]
    
    ### To be able to use values in loc (for example: RANSOM_COST = scope:secondary_recipient.ransom_cost_value lets you use $RANSOM_COST|0$ in loc)
    ## cardinality = 0..1
    localization_values = single_alias_right[effect_clause]

    ### Text shown above options block - describes all options in general
    ## cardinality = 0..inf
    options_heading = localisation
    ### Adds an option
    ## cardinality = 0..inf
    send_option = {
        ### Is option shown
        ## cardinality = 0..1
        is_shown = single_alias_right[trigger_clause]
        ### Is option selectable
        ## cardinality = 0..1
        is_valid = single_alias_right[trigger_clause]
        ### Tooltip
        ## cardinality = 0..1
        current_description = localisation
        ### If selected then scope:flag_name will be set to yes
        ## cardinality = 0..1
        flag = value_set[event_target]
        ### Loc_key for option label
        ## cardinality = 0..1
        localization = localisation
        ### Trigger for whether this should be on when the window opens. If not defined, defaults to off
        ## cardinality = 0..1
        starts_enabled = single_alias_right[trigger_clause]
        ### Trigger for whether this option can be changed from its default
        ## cardinality = 0..1
        can_be_changed = single_alias_right[trigger_clause]
        ### If yes then when the AI picks an interaction it will do the full can send this entire interaction check instead of the more performance saving checking of recipient refusal and ai will do, use with care and profile it
        ## cardinality = 0..1
        can_invalidate_interaction = bool
    }
    ### Are the options exclusive?
    ## cardinality = 0..1
    send_options_exclusive = bool
    ### Are the secondary scope targets optional?
    ## cardinality = 0..1
    secondary_scopes_optiional = bool

    ### Executes directly the interaction is sent
    ## cardinality = 0..1
    on_send = single_alias_right[effect_clause]
    ### Executes when accepted by recipient (only if intermediary accepts)
    ## cardinality = 0..1
    on_accept = single_alias_right[effect_clause]
    ### Executes when declined by recipient (only if intermediary accepts)
    ## cardinality = 0..1
    on_decline = single_alias_right[effect_clause]
    ### Executes when blocked by recipient (only if intermediary accepts)
    ## cardinality = 0..1
    on_blocked_effect = single_alias_right[effect_clause]
    ### Only executes if the interaction was auto accepted. Done before any other side 
    ## cardinality = 0..1
    pre_auto_accept = single_alias_right[effect_clause]
    ### Only executes if the interaction was auto accepted
    ## cardinality = 0..1
    on_auto_accept = single_alias_right[effect_clause]

    ### Executes when intermediary allows the interaction to happen. It's followd by recipient decision
    ## cardinality = 0..1
    on_intermediary_accept = single_alias_right[effect_clause]
    ### Executes when intermediary declines the interaction. It's prevents any effect from being calledon the recipient
    ## cardinality = 0..1
    on_intermediary_decline = single_alias_right[effect_clause]
    
    ### The key to the loc to show in the interaction item tooltip. Receives the name of the interaction in $INTERACTION$. Default value "INTERACTION_REPLY_ITEM"
    ## cardinality = 0..1
    reply_item_key = localisation
    
    ### The key to the loc when the interaction is going to be accepted. Default value 
    ## cardinality = 0..1
    pre_answer_yes_key = localisation
    
    ### The key to the loc when the interaction is NOT going to be accepted. Default value 
    ## cardinality = 0..1
    pre_answer_no_key = localisation
    ### The key to the loc when the interaction maybe is accepted. Receives the acceptance value in $VALUE$. Default value "ANSWER_MAYBE"
    ## cardinality = 0..1
    pre_answer_maybe_key = localisation
    ### Summary header for acceptance breakdown for recipient, when they accept
    ## cardinality = 0..1
    pre_answer_maybe_breakdown_key = localisation
    
    ### Summary header for acceptance breakdown for recipient, when they accept
    ## cardinality = 0..1
    pre_answer_yes_breakdown_key = localisation
    ### Summary header for acceptance breakdown for recipient, when they decline
    ## cardinality = 0..1
	pre_answer_no_breakdown_key = localisation
    ### Summary header for acceptance breakdown for recipient, when they decline
    ## cardinality = 0..1
	pre_answer_maybe_breakdown_key = localisation

    ### Summary header for acceptance breakdown for intermediary, when they accept
    ## cardinality = 0..1
    intermediary_breakdown_yes = localisation	
    ### Summary header for acceptance breakdown for intermediary, when they decline	
    ## cardinality = 0..1
	intermediary_breakdown_no = localisation
    ### Summary header for acceptance breakdown for intermediary, when it's randomized
    ## cardinality = 0..1
	intermediary_breakdown_maybe = localisation		

    ### Intermediary Accept interaction button text
    ## cardinality = 0..1
    intermediary_answer_accept_key = localisation
    ### Intermediary Decline interaction button text
	## cardinality = 0..1
    intermediary_answer_reject_key = localisation			
    ### Recipient Block interaction text
    ## cardinality = 0..1
    answer_block_key = localisation
    ### Recipient Accept interaction button text
    ## cardinality = 0..1
    answer_accept_key = localisation
    ### Recipient Decline interaction button text
    ## cardinality = 0..1
    answer_reject_key = localisation
    ### Recipient Acknowledge interaction button text. Used for notifications when it's already happened
    ## cardinality = 0..1
    answer_acknowledge_key = localisation

    ### Scripted cost for the interaction. The interaction will be disabled if the actor can't pay up, and the cost will be subtracted from the actor when the interaction is sent. Renown can only be spent by the dynast.
    ## cardinality = 0..1
    cost = single_alias_right[cost]
    
    ### Set scope:target to make the AI target something specific. Title targeting interactions don't need this
    ## cardinality = 0..1
    ai_set_target = single_alias_right[effect_clause]
    ## cardinality = 0..inf
    ai_targets = {
        
        ### Maximum number of targets to consider, unset considers all of them, will 
        max = integer
        ### Which characters does the ai consider as recipient for the interaction, can be scripted multiple times to combine lists.
        ### Available lists are in the "ai_targets" section of this file (trying to add an invalid list will trigger an error message with all available )
        ai_recipients = enum[ai_targets]
        ### Maximum number of targets to consider, unset considers all of them, will 
        ## cardinality = 0..1
        max = int_value_field
    }
    ### Quick triggers for the ai_targets
    ## cardinality = 0..inf
    ai_target_quick_trigger = single_alias_right[quick_trigger_block]

    ### How often should the ai consider doing this interaction
    ## cardinality = 0..1
    ai_frequency = int_value_field
    ### Will the ai consider trying this interaction. Root scope is the actor, and other event target are not available
    ## cardinality = 0..1
    ## replace_scope { ROOT = character }
    ai_potential = single_alias_right[trigger_clause]
    ### Will the intermediary ai approve for this interaction and forward it to the recipient
    ai_intermediary_accept = single_alias_right[chance_block]
    ### Will the ai accept a request for this interaction
    ## cardinality = 0..1
    ai_accept = single_alias_right[chance_block]
    ### How interested is the ai in sending this interaction (tested after selecting 
    ## cardinality = 0..1
    ai_will_do = single_alias_right[chance_block]
    
}
