types = {
    type[faction] = {
        path = "common/factions"
        localisation = {
            name = "$_faction_name"
            desc = "$_faction_desc"
        }
    }
}

#Identifier for the faction. Also used for localizing the name. Posfixed with "_faction" for localizing the faction
faction = { 					
    ### Dynamic name, will look for the identifier of the type (faction_name) if doesn't exist or if it's empty.
    ## cardinality = 0..1
	name = single_alias_right[complex_desc]
    ### Dynamic description, will look for the identifier of the type + _desc (faction_name_desc) if doesn't exist or if it's empty.
	description = single_alias_right[complex_desc]
    ## cardinality = 0..1
    ### Dynamic description of the effect, used to summarize faction goals
	short_effect_desc = single_alias_right[complex_desc]
    ## cardinality = 0..1
    ### Effect that will launch when the demand triggers. Uses the FACTION scope.
	## replace_scope = {root = faction }
    demand = single_alias_right[effect_clause]
    ## cardinality = 0..1
    ### Effect that will launch every NDefines::NFaction::UPDATE_INTERVAL_DAYS. Uses the FACTION scope.
    ## replace_scope = {root = faction }
	update_effect = single_alias_right[effect_clause]
    ## cardinality = 0..1
    ### Effect that will launch when the faction declares war. Uses the FACTION scope.
    ## replace_scope = {root = faction }
	on_declaration = single_alias_right[effect_clause]
    ## cardinality = 0..1
    ### Effect that will launch when a character leaves the faction. Uses the FACTION scope. The leaving character can be accessed as scope:faction_member
    ## replace_scope = {root = faction faction_member = character}
	character_leaves = single_alias_right[effect_clause]
    ## cardinality = 0..1
    ### Effect that will launch when the leader leaves the faction. Uses the FACTION scope. The leaving character can be accessed as scope:faction_member
    ## replace_scope = { root = faction faction_member = character }
	leader_leaves = single_alias_right[effect_clause]
    ## cardinality = 0..1
    ### MTTH that calculates the the score to join an active faction of this type. Uses the SCOPE_CHARACTER of the character that tries to join. SCOPE:faction target is the active faction. Note that the score is then modified by code to weigh in the effects of Boldness/Dread, Energy and Rationality. See NFaction AI defines.
    ## replace_scope = { character = character faction = faction }
	ai_join_score = single_alias_right[score_formula]
    ## cardinality = 0..1
    ### MTTH that calculates the the score to create an active faction of this type. Uses the SCOPE_CHARACTER of the character that tries to create it. SCOPE:target target is the targeted character. The claimant faction has two aditional scopes, SCOPE:claimant (who is the potential claimant) and SCOPE:title (the title to claim for). Note that the score is then modified by code to weigh in the effects of Boldness/Dread, Energy and Rationality. See NFaction AI defines.
    ## replace_scope = { character = character target = character claimant = character title = character }	
	ai_create_score = single_alias_right[score_formula]
    ## cardinality = 0..1
    ### MTTH that calculates the the score to join an active faction of this type. Uses the SCOPE_LANDED_TITLE of the title that tries to join. SCOPE:faction target is the active faction.
    ## replace_scope = { faction = faction }	
	county_join_score =  single_alias_right[score_formula]
    ## cardinality = 0..1
    ### MTTH that calculates the the score to create an active faction of this type. Uses the SCOPE_LANDED_TITLE of the title that tries to create it.
    ### SCOPE:target target is the targeted character. If the score is >= NDefines::NFaction::COUNTY_CREATE_MIN_SCORE and it gets a random chance 0-100 on a monthly update
    ## replace_scope = { root = landed_title target = character }	
	county_create_score = single_alias_right[score_formula]
	
    ## cardinality = 0..1
    ### Script value defining the absolute power of a single county member. The final power is calculated as ratio of this power and the target's military strength.
	county_power = single_alias_right[score_formula]
    ## cardinality = 0..1
    ### MTTH that calculates the the score to trigger the demand effect of active faction of this type. Uses the FACTION scope. Checked once a month
	## cardinality = 0..1
     ## replace_scope = { root = faction }
    ai_demand_chance = single_alias_right[score_formula]
    ### MTTH that calculates the discontent progress change of the active faction. Uses the FACTION scope.
	## cardinality = 0..1
    ## replace_scope = { root = faction }
    discontent_progress = single_alias_right[score_formula]
    ### MTTH for power threshold at which the discontent starts ticking up. NFaction::DEFAULT_POWER_THRESHOLD define if not set
	## cardinality = 0..1
    power_threshold = single_alias_right[score_formula]
    ### Trigger to check if the faction is still valid. Uses the FACTION scope.
	## cardinality = 0..1
    ## replace_scope = { root = faction }
    is_valid = single_alias_right[trigger_clause]
    ### Trigger to check if a character is still valid to be part of the faction. Uses the SCOPE_CHARACTER of the character. SCOPE:faction target is the active faction.				
	## cardinality = 0..1
    ## replace_scope = { root = character faction = faction }
    is_character_valid = single_alias_right[trigger_clause]
    ### Trigger to check if a county is still valid to be part of the faction. Uses the SCOPE_LANDED_TITLE of the county. SCOPE:faction target is the active faction.
	## cardinality = 0..1
    ## replace_scope = { root = landed_title faction = faction }
    is_county_valid = single_alias_right[trigger_clause]
    ## replace_scope = { root = character faction = faction }
    ### Trigger to check if a character can join the active faction. Uses the SCOPE_CHARACTER of the character that tries to join. SCOPE:faction target is the active faction. is_character_valid is automatically included and its triggers should not be repeated here.
	## cardinality = 0..1
    can_character_join = single_alias_right[trigger_clause]
    ## replace_scope = { root = character target = character }
    ### Trigger to check if a character can create the active faction. Uses the SCOPE_CHARACTER of the character that tries to create. SCOPE:target target is target character of the faction.
	## cardinality = 0..1
    can_character_create = single_alias_right[trigger_clause]
    ### Trigger to check if the button to create a faction will be enabled or not (overrides can_character_create if it's not empty). Uses the SCOPE_CHARACTER of the character that tries to create. SCOPE:target target is target character of the faction.
	## cardinality = 0..1
    ## replace_scope = { root = character target = character }
    can_character_create_ui = single_alias_right[trigger_clause]
    ### Trigger to check if a member character can become the leader of the faction.
	## cardinality = 0..1
    ## replace_scope = { root = character }
    can_character_become_leader = single_alias_right[trigger_clause]
    ### Trigger to check if a title can join the active faction. Uses the SCOPE_LANDED_TITLE of the title that tries to join. SCOPE:faction target is the active faction. is_county_valid is automatically included and its triggers should not be repeated here.
	## cardinality = 0..1
    ## replace_scope = { root = landed_title faction = faction }
    can_county_join = single_alias_right[trigger_clause]
    ### Trigger to check if a title can create the active faction. Uses the SCOPE_LANDED_TITLE of the title that tries to create. SCOPE:target target is target character of the faction.
	## cardinality = 0..1
    ## replace_scope = { root = landed_title target = character }
    can_county_create = single_alias_right[trigger_clause]
    ### Is allow at all
	## cardinality = 0..1
    character_allow_create = bool
	### Is allow at all
    ## cardinality = 0..1
    character_allow_join = bool
	### Is allow at all
    ## cardinality = 0..1
    county_allow_create = bool
	### Is allow at all
    ## cardinality = 0..1
    county_allow_join = bool	
	### Is the leader allowed to leave the faction? (used for faction that create leaders)
    ## cardinality = 0..1
    leaders_allowed_to_leave = bool	

    ### default yes, when this is no the join button will be hidden for players
	## cardinality = 0..1
    player_can_join = bool			
	
    ### Can the taarget have more of one of this type targeting
	## cardinality = 0..1
    multiple_targeting = bool
    ### The casus belly to be executed for the war
	## cardinality = 0..1
    casus_belli = <casus_belli>

    ### How the special character of this faction will be called
	## cardinality = 0..1
    special_character_title = localisation

    ### Will this faction ignore the faction soft block
	## cardinality = 0..1
    ignore_soft_block = bool
    ### By default, heirs that changed liege or tier as a result of succession will inherit faction membership. Set this to no to prevent that
	## cardinality = 0..1
    inherit_membership = bool	

    ### Requires at least one county member, otherwise it will be destroyed. defaults to no
	## cardinality = 0..1
    requires_county = bool
    ### Requires at least one character member, otherwise it will be destroyed. defaults to yes	
	## cardinality = 0..1
    requires_character = bool
    ### Requires a valid faction leader, otherwise it will be destroyed. defaults to no
	## cardinality = 0..1
    requires_leader = bool	
	
    ### Default no, if set to yes, counties will leave this faction if there's a better factions available for them to join or create
	## cardinality = 0..1
    county_can_switch_to_other_faction = bool
	
    ### Order to sort factions in the UI, lower value => higher in list
	## cardinality = 0..1
    sort_order = int_value_field
    ### Should the special title be shown in the interface or not
	## cardinality = 0..1
    show_special_title = bool	
}

#== Event targets ==
#[SCOPE_FACTION.faction_target]					- Links to the character targeting the faction
#[SCOPE_FACTION.faction_leader]					- Links to the character leading the faction
#[SCOPE_FACTION.faction_war]						- Links to the faction war
#[SCOPE_FACTION.special_character]				- Links to the special character
#[SCOPE_FACTION.special_title]					- Links to the special title
#[SCOPE_CHARACTER.leading_faction] 				- Links to the faction is leading. Null faction if it's not leading any faction
#[SCOPE_CHARACTER.joined_faction]  				- Links to the faction the character is in. Null faction if it's not in any faction

#== Related modifiers ==
#TODO

#== Related loc/UI functions ==
#[Faction.GetName] 					- Gets the name of the faction type. E.G., "Independent Faction"
#[Faction.GetDescription]			- Gets the description of the faction type
#[Faction.GetDiscontent] 			- Gets the current dicontent of the faction
#[Faction.IsAtWar]					- Gets if the faction is currently at war
#[Faction.GetPower] 					- Gets tthe current power of the faction
#[Faction.GetTarget] 				- Gets the target character of the faction
#[Faction.GetLeader] 				- Gets the leader of the faction
#[Faction.GetSpecialCharacter] 		- Gets the special character of the faction
#[Faction.GetSpecialTitle] 			- Gets the special title of the faction
#[Faction.GetSpecialCharacterTitle] 	- Gets the title for the faction's special character eg: Claimant, Leader etc.
#[Faction.HasSpecialCharacter]		- Checks if there is a special character of the faction
#[Faction.HasSpecialTitle] 			- Checks if there is a special title of the faction

#== Related lists ==
#[targeting_faction]			- List of the factions targeting the SCOPE_CHARCTER
#[faction_member]			- List of the character members in the SCOPE_FACTION
#[faction_county_member]		- List of the county members in the SCOPE_FACTION
