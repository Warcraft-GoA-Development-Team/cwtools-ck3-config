# Autogenerated file, do not edit manually
### Iterate through all dynasty members
### any_dynasty_member = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = dynasty
## push_scope = character
alias[trigger:any_dynasty_member] = single_alias_right[any_trigger]

### Iterate through all characters invited to an activity. Once they accept/decline, they are removed from this list.
### any_invited_character = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = activity
## push_scope = character
alias[trigger:any_invited_character] = single_alias_right[any_trigger]

### Iterate through all special guests of an activity.
### any_special_guest = { ... }
### any_special_guest = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = activity
## push_scope = character
alias[trigger:any_special_guest] = single_alias_right[any_trigger]

### Iterate through all counties of the culture
### any_culture_county = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = culture
## push_scope = landed_title
alias[trigger:any_culture_county] = single_alias_right[any_trigger]

### Iterate through all duchies of the culture (duchies with at least one county of the culture
### any_culture_duchy = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = culture
## push_scope = landed_title
alias[trigger:any_culture_duchy] = single_alias_right[any_trigger]

### Iterate through all empires of the culture (empires with at least one county of the culture
### any_culture_empire = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = culture
## push_scope = landed_title
alias[trigger:any_culture_empire] = single_alias_right[any_trigger]

### Iterate through all kingdoms of the culture (kingdoms with at least one county of the culture
### any_culture_kingdom = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = culture
## push_scope = landed_title
alias[trigger:any_culture_kingdom] = single_alias_right[any_trigger]

### Iterate through all parent cultures
### any_parent_culture = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = culture
## push_scope = culture
alias[trigger:any_parent_culture] = single_alias_right[any_trigger]

### Iterate through all parent cultures or above
### any_parent_culture_or_above = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = culture
## push_scope = culture
alias[trigger:any_parent_culture_or_above] = single_alias_right[any_trigger]

### Iterate through all traditions of the given culture
### any_tradition = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = culture
## push_scope = culture_tradition
alias[trigger:any_tradition] = single_alias_right[any_trigger]

### Iterate through all participating character of a memory
### any_memory_participant = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character_memory
## push_scope = character
alias[trigger:any_memory_participant] = single_alias_right[any_trigger]

### Iterates through all members of the scoped confederation
### any_confederation_member = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = confederation
## push_scope = character
alias[trigger:any_confederation_member] = single_alias_right[any_trigger]

### Iterate through all opposite traits of the scoped trait
### any_opposite_trait = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = trait
## push_scope = trait
alias[trigger:any_opposite_trait] = single_alias_right[any_trigger]

### Iterate through all claimed artifacts of the scoped house
### any_house_claimed_artifact = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = dynasty_house
## push_scope = artifact
alias[trigger:any_house_claimed_artifact] = single_alias_right[any_trigger]

### Iterate through all house members
### any_house_member = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = dynasty_house
## push_scope = character
alias[trigger:any_house_member] = single_alias_right[any_trigger]

### Iterate through all valid house unity members
### any_house_unity_member = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = dynasty_house
## push_scope = character
alias[trigger:any_house_unity_member] = single_alias_right[any_trigger]

### Iterate through all characters who know the secret
### any_secret_knower = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = secret
## push_scope = character
alias[trigger:any_secret_knower] = single_alias_right[any_trigger]

### Iterate through participants in a secret
### any_secret_participant = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = secret
## push_scope = character
alias[trigger:any_secret_participant] = single_alias_right[any_trigger]

### Iterate through all faiths within a religion
### any_faith = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = religion
## push_scope = faith
alias[trigger:any_faith] = single_alias_right[any_trigger]

### Iterate through all characters travelling along with the travel plan owner. Includes travel leader, but not the travel plan owner.
### any_entourage_character = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = travel_plan
## push_scope = character
alias[trigger:any_entourage_character] = single_alias_right[any_trigger]

### Iterate through all provinces this travel plan has in its route.
### any_future_path_location = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = travel_plan
## push_scope = province
alias[trigger:any_future_path_location] = single_alias_right[any_trigger]

### Iterate through all provinces this travel plan has arrived at so far.
### any_visited_location = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = travel_plan
## push_scope = province
alias[trigger:any_visited_location] = single_alias_right[any_trigger]

### Iterate through all great holy wars this faith is defending against
### any_defensive_great_holy_wars = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = faith
## push_scope = ghw
alias[trigger:any_defensive_great_holy_wars] = single_alias_right[any_trigger]

### Iterate through characters of the scoped faith
### any_faith_character = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = faith
## push_scope = character
alias[trigger:any_faith_character] = single_alias_right[any_trigger]

### Iterate through all holy orders of the faith
### any_faith_holy_order = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = faith
## push_scope = holy_order
alias[trigger:any_faith_holy_order] = single_alias_right[any_trigger]

### Iterate through playable rulers of the scoped faith
### any_faith_playable_ruler = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = faith
## push_scope = character
alias[trigger:any_faith_playable_ruler] = single_alias_right[any_trigger]

### Iterate through rulers of the scoped faith
### any_faith_ruler = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = faith
## push_scope = character
alias[trigger:any_faith_ruler] = single_alias_right[any_trigger]

### Iterate through all holy site baronies of a faith
### any_holy_site = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = faith
## push_scope = landed_title
alias[trigger:any_holy_site] = single_alias_right[any_trigger]

### Iterate through all characters that are interloper in a struggle.
### any_interloper_ruler = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = struggle
## push_scope = character
alias[trigger:any_interloper_ruler] = single_alias_right[any_trigger]

### Iterate through all counties that are involved in a struggle
### any_involved_county = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = struggle
## push_scope = landed_title
alias[trigger:any_involved_county] = single_alias_right[any_trigger]

### Iterate through all characters that are involved in a struggle.
### any_involved_ruler = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = struggle
## push_scope = character
alias[trigger:any_involved_ruler] = single_alias_right[any_trigger]

### Iterate through all counties of a situation sub-region (warning: not fast)
### any_situation_sub_region_county = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = situation_sub_region
## push_scope = landed_title
alias[trigger:any_situation_sub_region_county] = single_alias_right[any_trigger]

### Iterate through all geographical regions of a situation sub-region
### any_situation_sub_region_geographical_region = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = situation_sub_region
## push_scope = geographical_region
alias[trigger:any_situation_sub_region_geographical_region] = single_alias_right[any_trigger]

### Iterate through all characters that are participating in a situation, in a specific subregion
### any_situation_sub_region_participant = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = situation_sub_region
## push_scope = character
alias[trigger:any_situation_sub_region_participant] = single_alias_right[any_trigger]

### Iterate through all participant groups of the situation sub-region
### any_situation_sub_region_participant_group = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = situation_sub_region
## push_scope = situation_participant_group
alias[trigger:any_situation_sub_region_participant_group] = single_alias_right[any_trigger]

### Iterate through all pledged attackers within a great holy war
### any_pledged_attacker = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = ghw
## push_scope = character
alias[trigger:any_pledged_attacker] = single_alias_right[any_trigger]

### Iterate through all pledged defenders within a great holy war
### any_pledged_defender = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = ghw
## push_scope = character
alias[trigger:any_pledged_defender] = single_alias_right[any_trigger]

### Gets all provinces infected by the scoped epidemic
### any_infected_province = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = epidemic
## push_scope = province
alias[trigger:any_infected_province] = single_alias_right[any_trigger]

### Iterates through all Vassals assigned to the scoped Tax Slot
### any_tax_slot_vassal = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = tax_slot
## push_scope = character
alias[trigger:any_tax_slot_vassal] = single_alias_right[any_trigger]

### Iterate through all characters that are part of a participation group in a situation.
### any_situation_group_participant = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = situation_participant_group
## push_scope = character
alias[trigger:any_situation_group_participant] = single_alias_right[any_trigger]

### Iterate through all casus belli's target titles
### any_target_title = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = casus_belli
## push_scope = landed_title
alias[trigger:any_target_title] = single_alias_right[any_trigger]

### Iterate through all characters with a claim on the scoped artifact
### any_artifact_claimant = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = artifact
## push_scope = character
alias[trigger:any_artifact_claimant] = single_alias_right[any_trigger]

### Iterate through all dynasty houses with a claim on the scoped artifact
### any_artifact_house_claimant = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = artifact
## push_scope = dynasty_house
alias[trigger:any_artifact_house_claimant] = single_alias_right[any_trigger]

### Iterate through all kills of a character
### any_killed_character = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = { character artifact }
## push_scope = character
alias[trigger:any_killed_character] = single_alias_right[any_trigger]

### Iterate through every accolade_type in the database
### any_accolade_type = { <count=num/all> / <percent=fixed_point> <triggers> }
## push_scope = accolade_type
alias[trigger:any_accolade_type] = single_alias_right[any_trigger]

### Iterate through all activities in the world
### any_activity = { <count=num/all> / <percent=fixed_point> <triggers> }
## push_scope = activity
alias[trigger:any_activity] = single_alias_right[any_trigger]

### Iterate through every activity_type in the database
### any_activity_type = { <count=num/all> / <percent=fixed_point> <triggers> }
## push_scope = activity_type
alias[trigger:any_activity_type] = single_alias_right[any_trigger]

### Iterate through all existing artifacts
### any_artifact = { <count=num/all> / <percent=fixed_point> <triggers> }
## push_scope = artifact
alias[trigger:any_artifact] = single_alias_right[any_trigger]

### Iterate through all baronies in the game
### any_barony = { <count=num/all> / <percent=fixed_point> <triggers> }
## push_scope = landed_title
alias[trigger:any_barony] = single_alias_right[any_trigger]

### Iterate through every casus_belli_type in the database
### any_casus_belli_type = { <count=num/all> / <percent=fixed_point> <triggers> }
## push_scope = casus_belli_type
alias[trigger:any_casus_belli_type] = single_alias_right[any_trigger]

### Iterate through all characters with a royal court
### any_character_with_royal_court = { <count=num/all> / <percent=fixed_point> <triggers> }
## push_scope = character
alias[trigger:any_character_with_royal_court] = single_alias_right[any_trigger]

### Gets all legends in the world that have been completed
### any_completed_legend = { <count=num/all> / <percent=fixed_point> <triggers> }
## push_scope = legend
alias[trigger:any_completed_legend] = single_alias_right[any_trigger]

### Iterate through all counties in the game
### any_county = { <count=num/all> / <percent=fixed_point> <triggers> }
## push_scope = landed_title
alias[trigger:any_county] = single_alias_right[any_trigger]

### Iterate through every court_position_type in the database
### any_court_position_type = { <count=num/all> / <percent=fixed_point> <triggers> }
## push_scope = court_position_type
alias[trigger:any_court_position_type] = single_alias_right[any_trigger]

### Iterate through all cultures in the game
### any_culture_global = { <count=num/all> / <percent=fixed_point> <triggers> }
## push_scope = culture
alias[trigger:any_culture_global] = single_alias_right[any_trigger]

### Iterate through every culture_pillar in the database
### any_culture_pillar = { <count=num/all> / <percent=fixed_point> <triggers> }
## push_scope = culture_pillar
alias[trigger:any_culture_pillar] = single_alias_right[any_trigger]

### Iterate through every culture_tradition in the database
### any_culture_tradition = { <count=num/all> / <percent=fixed_point> <triggers> }
## push_scope = culture_tradition
alias[trigger:any_culture_tradition] = single_alias_right[any_trigger]

### Iterate through every decision in the database
### any_decision = { <count=num/all> / <percent=fixed_point> <triggers> }
## push_scope = decision
alias[trigger:any_decision] = single_alias_right[any_trigger]

### Iterate through every doctrine in the database
### any_doctrine = { <count=num/all> / <percent=fixed_point> <triggers> }
## push_scope = doctrine
alias[trigger:any_doctrine] = single_alias_right[any_trigger]

### Iterate through all domiciles
### any_domicile = { <count=num/all> / <percent=fixed_point> <triggers> }
## push_scope = domicile
alias[trigger:any_domicile] = single_alias_right[any_trigger]

### Iterate through all duchies in the game
### any_duchy = { <count=num/all> / <percent=fixed_point> <triggers> }
## push_scope = landed_title
alias[trigger:any_duchy] = single_alias_right[any_trigger]

### Iterate through all empires in the game
### any_empire = { <count=num/all> / <percent=fixed_point> <triggers> }
## push_scope = landed_title
alias[trigger:any_empire] = single_alias_right[any_trigger]

### Gets all epidemics in the world
### any_epidemic = { <count=num/all> / <percent=fixed_point> <triggers> }
## push_scope = epidemic
alias[trigger:any_epidemic] = single_alias_right[any_trigger]

### Iterate through every epidemic_type in the database
### any_epidemic_type = { <count=num/all> / <percent=fixed_point> <triggers> }
## push_scope = epidemic_type
alias[trigger:any_epidemic_type] = single_alias_right[any_trigger]

### true if any child is false (equivalent to NAND)
alias[trigger:any_false] = single_alias_right[any_trigger]

### Iterate through every geographical_region in the database
### any_geographical_region = { <count=num/all> / <percent=fixed_point> <triggers> }
## push_scope = geographical_region
alias[trigger:any_geographical_region] = single_alias_right[any_trigger]

### Iterate through every government_type in the database
### any_government_type = { <count=num/all> / <percent=fixed_point> <triggers> }
## push_scope = government_type
alias[trigger:any_government_type] = single_alias_right[any_trigger]

### Iterate through every holding_type in the database
### any_holding_type = { <count=num/all> / <percent=fixed_point> <triggers> }
## push_scope = holding_type
alias[trigger:any_holding_type] = single_alias_right[any_trigger]

### Iterate through all counties that are important for at least some title
### any_important_location = { <count=num/all> / <percent=fixed_point> <triggers> }
## push_scope = landed_title
alias[trigger:any_important_location] = single_alias_right[any_trigger]

### Independent rulers list with a COUNT tier or above who hold land
### any_independent_ruler = { <count=num/all> / <percent=fixed_point> <triggers> }
## push_scope = character
alias[trigger:any_independent_ruler] = single_alias_right[any_trigger]

### Iterate through all inspirations in the world
### any_inspiration = { <count=num/all> / <percent=fixed_point> <triggers> }
## push_scope = inspiration
alias[trigger:any_inspiration] = single_alias_right[any_trigger]

### Iterate through all characters with an inspirations in the world
### any_inspired_character = { <count=num/all> / <percent=fixed_point> <triggers> }
## push_scope = character
alias[trigger:any_inspired_character] = single_alias_right[any_trigger]

### Iterate through all titles that are interested in any county
### any_interested_title = { <count=num/all> / <percent=fixed_point> <triggers> }
## push_scope = landed_title
alias[trigger:any_interested_title] = single_alias_right[any_trigger]

### Iterate through all kingdoms in the game
### any_kingdom = { <count=num/all> / <percent=fixed_point> <triggers> }
## push_scope = landed_title
alias[trigger:any_kingdom] = single_alias_right[any_trigger]

### Gets all legends in the world that have not been completed
### any_legend = { <count=num/all> / <percent=fixed_point> <triggers> }
## push_scope = legend
alias[trigger:any_legend] = single_alias_right[any_trigger]

### Iterate through every legend_type in the database
### any_legend_type = { <count=num/all> / <percent=fixed_point> <triggers> }
## push_scope = legend_type
alias[trigger:any_legend_type] = single_alias_right[any_trigger]

### Iterate through all living characters
### any_living_character = { <count=num/all> / <percent=fixed_point> <triggers> }
## push_scope = character
alias[trigger:any_living_character] = single_alias_right[any_trigger]

### Iterate through all mercenary companies
### any_mercenary_company = { <count=num/all> / <percent=fixed_point> <triggers> }
## push_scope = mercenary_company
alias[trigger:any_mercenary_company] = single_alias_right[any_trigger]

### Iterate through all open invite activities in the world
### any_open_invite_activity = { <count=num/all> / <percent=fixed_point> <triggers> }
## push_scope = activity
alias[trigger:any_open_invite_activity] = single_alias_right[any_trigger]

### Iterate through all player characters
### any_player = { <count=num/all> / <percent=fixed_point> <triggers> }
## push_scope = character
alias[trigger:any_player] = single_alias_right[any_trigger]

### Iterate through all provinces (skips non-land and impassable provinces)
### any_province = { <count=num/all> / <percent=fixed_point> <triggers> }
## push_scope = province
alias[trigger:any_province] = single_alias_right[any_trigger]

### Iterate through all religions in the game
### any_religion_global = { <count=num/all> / <percent=fixed_point> <triggers> }
## push_scope = religion
alias[trigger:any_religion_global] = single_alias_right[any_trigger]

### Rulers list with a COUNT tier o above
### any_ruler = { <count=num/all> / <percent=fixed_point> <triggers> }
## push_scope = character
alias[trigger:any_ruler] = single_alias_right[any_trigger]

### Iterate through all provinces with a special building slot (built or un-built)
### any_special_building_province = { <count=num/all> / <percent=fixed_point> <triggers> }
## push_scope = province
alias[trigger:any_special_building_province] = single_alias_right[any_trigger]

### Gets all available and accepted task contracts.
### any_task_contract = { <count=num/all> / <percent=fixed_point> <triggers> }
## push_scope = task_contract
alias[trigger:any_task_contract] = single_alias_right[any_trigger]

### Iterate through every task_contract_type in the database
### any_task_contract_type = { <count=num/all> / <percent=fixed_point> <triggers> }
## push_scope = task_contract_type
alias[trigger:any_task_contract_type] = single_alias_right[any_trigger]

### Iterate through every trait in the database
### any_trait = { <count=num/all> / <percent=fixed_point> <triggers> }
## push_scope = trait
alias[trigger:any_trait] = single_alias_right[any_trigger]

### Iterate through every vassal_contract in the database
### any_vassal_contract = { <count=num/all> / <percent=fixed_point> <triggers> }
## push_scope = vassal_contract
alias[trigger:any_vassal_contract] = single_alias_right[any_trigger]

### Iterate through all armies currently located in the scoped province
### any_army_in_location = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = province
## push_scope = army
alias[trigger:any_army_in_location] = single_alias_right[any_trigger]

### Iterate through all characters currently located in the scoped province
### any_character_in_location = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = province
## push_scope = character
alias[trigger:any_character_in_location] = single_alias_right[any_trigger]

### Iterate through all neighboring provinces of a province
### any_neighboring_province = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = province
## push_scope = province
alias[trigger:any_neighboring_province] = single_alias_right[any_trigger]

### Iterate through all domiciles of scoped province
### any_province_domicile = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = province
## push_scope = domicile
alias[trigger:any_province_domicile] = single_alias_right[any_trigger]

### Gets epidemics affecting the scoped province
### any_province_epidemic = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = province
## push_scope = epidemic
alias[trigger:any_province_epidemic] = single_alias_right[any_trigger]

### Gets legends affecting the scoped province
### any_province_legend = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = province
## push_scope = legend
alias[trigger:any_province_legend] = single_alias_right[any_trigger]

### Iterate through all attackers in the war
### any_war_attacker = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = war
## push_scope = character
alias[trigger:any_war_attacker] = single_alias_right[any_trigger]

### Iterate through all defenders in the war
### any_war_defender = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = war
## push_scope = character
alias[trigger:any_war_defender] = single_alias_right[any_trigger]

### Iterate through all participants in the war
### any_war_participant = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = war
## push_scope = character
alias[trigger:any_war_participant] = single_alias_right[any_trigger]

### Iterate through all titles leased to a holy order
### any_leased_title = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = holy_order
## push_scope = landed_title
alias[trigger:any_leased_title] = single_alias_right[any_trigger]

### Iterate through all defined required government types for a holding type
### any_required_heir_government_type = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = holding_type
## push_scope = government_type
alias[trigger:any_required_heir_government_type] = single_alias_right[any_trigger]

### Gets all promoters of the scoped legend
### any_legend_promoter = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = legend
## push_scope = character
alias[trigger:any_legend_promoter] = single_alias_right[any_trigger]

### Gets all provinces the scoped legend has spread into
### any_spread_province = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = legend
## push_scope = province
alias[trigger:any_spread_province] = single_alias_right[any_trigger]

### Iterate through all participant groups of the situation (in all sub-regions)
### any_participant_group = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = situation
## push_scope = situation_participant_group
alias[trigger:any_participant_group] = single_alias_right[any_trigger]

### Iterate through all counties that are involved in a situation
### any_situation_county = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = situation
## push_scope = landed_title
alias[trigger:any_situation_county] = single_alias_right[any_trigger]

### Iterate through all characters that are participating in a situation.
### any_situation_participant = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = situation
## push_scope = character
alias[trigger:any_situation_participant] = single_alias_right[any_trigger]

### Iterate through all sub-regions of a situation
### any_situation_sub_region = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = situation
## push_scope = situation_sub_region
alias[trigger:any_situation_sub_region] = single_alias_right[any_trigger]

### Iterate through all characters in agent slots in the scheme
### any_scheme_agent_character = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = scheme
## push_scope = character
alias[trigger:any_scheme_agent_character] = single_alias_right[any_trigger]

### Iterate through all agent slots in the scheme
### any_scheme_agent_slot = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = scheme
## push_scope = agent_slot
alias[trigger:any_scheme_agent_slot] = single_alias_right[any_trigger]

### Iterate through all acclaimed knights employed by a given character
### any_acclaimed_knight = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_acclaimed_knight] = single_alias_right[any_trigger]

### Iterate through all ( active and inactive ) Accolades of a given liege character's Acclaimed Knights
### any_accolade = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = accolade
alias[trigger:any_accolade] = single_alias_right[any_trigger]

### Iterate through all active Accolades of a given liege character's Acclaimed Knights
### any_active_accolade = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = accolade
alias[trigger:any_active_accolade] = single_alias_right[any_trigger]

### Iterate through all titles that can be created by the character. (only for alerts)
### any_alert_creatable_title = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = landed_title
alias[trigger:any_alert_creatable_title] = single_alias_right[any_trigger]

### Iterate through all titles that can be usurped by the character. (only for alerts)
### any_alert_usurpable_title = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = landed_title
alias[trigger:any_alert_usurpable_title] = single_alias_right[any_trigger]

### Iterate through all allies
### any_ally = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_ally] = single_alias_right[any_trigger]

### Iterate through all armies
### any_army = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = army
alias[trigger:any_army] = single_alias_right[any_trigger]

### Iterate through all task contracts of location of root province
### any_available_task_contract = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = task_contract
alias[trigger:any_available_task_contract] = single_alias_right[any_trigger]

### Gets all accepted task contracts of the root character
### any_character_active_contract = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = task_contract
alias[trigger:any_character_active_contract] = single_alias_right[any_trigger]

### Iterate through all artifacts in a given characters inventory
### any_character_artifact = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = artifact
alias[trigger:any_character_artifact] = single_alias_right[any_trigger]

### Gets epidemics affecting the scoped character
### any_character_epidemic = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = epidemic
alias[trigger:any_character_epidemic] = single_alias_right[any_trigger]

### Iterate through all situations that a character is participating in
### any_character_situation = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = situation
alias[trigger:any_character_situation] = single_alias_right[any_trigger]

### Gets all task contracts of the scoped character
### any_character_task_contract = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = task_contract
alias[trigger:any_character_task_contract] = single_alias_right[any_trigger]

### Scopes from a character to a neighboring county (incl. across water, looking trough the de Jure lieges)
### any_character_to_title_neighboring_and_across_water_county = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = landed_title
alias[trigger:any_character_to_title_neighboring_and_across_water_county] = single_alias_right[any_trigger]

### Scopes from a character to a neighboring duchy (incl. across water, looking trough the de Jure lieges)
### any_character_to_title_neighboring_and_across_water_duchy = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = landed_title
alias[trigger:any_character_to_title_neighboring_and_across_water_duchy] = single_alias_right[any_trigger]

### Scopes from a character to a neighboring empire (incl. across water, looking trough the de Jure lieges)
### any_character_to_title_neighboring_and_across_water_empire = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = landed_title
alias[trigger:any_character_to_title_neighboring_and_across_water_empire] = single_alias_right[any_trigger]

### Scopes from a character to a neighboring kingdom (incl. across water, looking trough the de Jure lieges)
### any_character_to_title_neighboring_and_across_water_kingdom = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = landed_title
alias[trigger:any_character_to_title_neighboring_and_across_water_kingdom] = single_alias_right[any_trigger]

### Scopes from a character to a neighboring county (looking trough the de Jure lieges)
### any_character_to_title_neighboring_county = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = landed_title
alias[trigger:any_character_to_title_neighboring_county] = single_alias_right[any_trigger]

### Scopes from a character to a neighboring duchy (looking trough the de Jure lieges)
### any_character_to_title_neighboring_duchy = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = landed_title
alias[trigger:any_character_to_title_neighboring_duchy] = single_alias_right[any_trigger]

### Scopes from a character to a neighboring empire (looking trough the de Jure lieges)
### any_character_to_title_neighboring_empire = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = landed_title
alias[trigger:any_character_to_title_neighboring_empire] = single_alias_right[any_trigger]

### Scopes from a character to a neighboring kingdom (looking trough the de Jure lieges)
### any_character_to_title_neighboring_kingdom = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = landed_title
alias[trigger:any_character_to_title_neighboring_kingdom] = single_alias_right[any_trigger]

### Iterate through all traits a character has
### any_character_trait = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = trait
alias[trigger:any_character_trait] = single_alias_right[any_trigger]

### Wars of the scoped character
### any_character_war = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = war
alias[trigger:any_character_war] = single_alias_right[any_trigger]

### Iterate through all claimed artifacts of the scoped character
### any_claimed_artifact = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = artifact
alias[trigger:any_claimed_artifact] = single_alias_right[any_trigger]

### Iterate through all concubines
### any_concubine = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_concubine] = single_alias_right[any_trigger]

### Iterate through all consorts (concubines and spouses)
### any_consort = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_consort] = single_alias_right[any_trigger]

### Iterate through all contact characters of the root character
### any_contact = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_contact] = single_alias_right[any_trigger]

### Iterate through all councillors
### any_councillor = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_councillor] = single_alias_right[any_trigger]

### Iterate through all valid candidates for a court position type.
### *_court_position_candidate = {
###    court_position = bodyguard_court_position
### 
### OR
###    court_position = scope:my_scoped_court_position_type
###    ...
### }
### any_court_position_candidate = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_court_position_candidate] = single_alias_right[any_trigger]

### Iterates through all characters that employ the scoped character in any court position.
### any_court_position_employer = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_court_position_employer] = single_alias_right[any_trigger]

### Iterate through all courtiers
### any_courtier = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_courtier] = single_alias_right[any_trigger]

### Iterate through all courtiers that are away
### any_courtier_away = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_courtier_away] = single_alias_right[any_trigger]

### Iterate through all courtiers and guests (pool and foreign court guests)
### any_courtier_or_guest = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_courtier_or_guest] = single_alias_right[any_trigger]

### Iterate through all de jure claims for a character
### any_de_jure_claim = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = landed_title
alias[trigger:any_de_jure_claim] = single_alias_right[any_trigger]

### Iterate through all character in the diarchy line of succession.If there's no active diarchy or active one doesn't have succession,it iterates over regency candidates
### any_diarchy_succession_character = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_diarchy_succession_character] = single_alias_right[any_trigger]

### Iterate through all diplomacy-based councillors
### any_diplomacy_councillor = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_diplomacy_councillor] = single_alias_right[any_trigger]

### Iterate through all directly owned provinces
### any_directly_owned_province = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = province
alias[trigger:any_directly_owned_province] = single_alias_right[any_trigger]

### Iterate through all titles the scoped character can vote on
### any_election_title = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = landed_title
alias[trigger:any_election_title] = single_alias_right[any_trigger]

### Iterate through all equipped artifacts in a given characters inventory
### any_equipped_character_artifact = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = artifact
alias[trigger:any_equipped_character_artifact] = single_alias_right[any_trigger]

### Iterate through all the extended family [uncles/aunts, nephew/niece, cousins]
### any_extended_family_member = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_extended_family_member] = single_alias_right[any_trigger]

### Iterate through all guests visiting from another court (in contrast to pool_guest they have a liege)
### any_foreign_court_guest = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_foreign_court_guest] = single_alias_right[any_trigger]

### Iterate through all former concubines. Not persisted past death
### any_former_concubine = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_former_concubine] = single_alias_right[any_trigger]

### Iterate through all former concubinists. Not persisted past death
### any_former_concubinist = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_former_concubinist] = single_alias_right[any_trigger]

### Iterate through all councillors that are not related to a skill
### any_general_councillor = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_general_councillor] = single_alias_right[any_trigger]

### Heirs of the scoped character
### any_heir = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_heir] = single_alias_right[any_trigger]

### Iterate through all titles the scoped character is heir to
### any_heir_title = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = landed_title
alias[trigger:any_heir_title] = single_alias_right[any_trigger]

### Iterate through all held landed titles
### any_held_title = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = landed_title
alias[trigger:any_held_title] = single_alias_right[any_trigger]

### Iterate through all hired mercenary companies
### any_hired_mercenary = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = mercenary_company
alias[trigger:any_hired_mercenary] = single_alias_right[any_trigger]

### Iterate through all hostages currently abroad
### any_home_court_hostage = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_home_court_hostage] = single_alias_right[any_trigger]

### Iterate through all characters this character has a hook on
### any_hooked_character = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_hooked_character] = single_alias_right[any_trigger]

### Iterate through anyone the character is hostile to due to their top-liege's realm having been raided
### any_hostile_raider = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_hostile_raider] = single_alias_right[any_trigger]

### Iterate through all intrigue-based councillors
### any_intrigue_councillor = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_intrigue_councillor] = single_alias_right[any_trigger]

### Iterate through all activities a character has been invited to
### any_invited_activity = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = activity
alias[trigger:any_invited_activity] = single_alias_right[any_trigger]

### Iterate through all knights
### any_knight = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_knight] = single_alias_right[any_trigger]

### Iterate through all secrets known by the character
### any_known_secret = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = secret
alias[trigger:any_known_secret] = single_alias_right[any_trigger]

### A realm with a different top liege neighboring the realm of the scope character's top liege; switches to the realm's top title. Can be based on borders a day or two out of date. Includes land borders extended due to tributaries.
### any_land_neighboring_realm_with_tributaries = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = landed_title
alias[trigger:any_land_neighboring_realm_with_tributaries] = single_alias_right[any_trigger]

### A realm with a different top liege neighboring the realm of the scope character's top liege; switches to the holder of the realm. Can be based on borders a day or two out of date. Includes land borders extended due to tributaries.
### any_land_neighboring_realm_with_tributaries_owner = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_land_neighboring_realm_with_tributaries_owner] = single_alias_right[any_trigger]

### Iterate through all learning-based councillors
### any_learning_councillor = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_learning_councillor] = single_alias_right[any_trigger]

### Iterate through all lieges above a character (skipping the character themselves)
### any_liege_or_above = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_liege_or_above] = single_alias_right[any_trigger]

### Iterate through all MaA regiments
### any_maa_regiment = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = regiment
alias[trigger:any_maa_regiment] = single_alias_right[any_trigger]

### Iterate through all martial-based councillors
### any_martial_councillor = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_martial_councillor] = single_alias_right[any_trigger]

### Iterate through all memories of a character
### any_memory = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character_memory
alias[trigger:any_memory] = single_alias_right[any_trigger]

### A sub-realm or realm bordering the scope character's realm (including across water) and has the same rank as the scope character (look for lieges of he owner of the land if necessary)
### any_neighboring_and_across_water_realm_same_rank_owner = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_neighboring_and_across_water_realm_same_rank_owner] = single_alias_right[any_trigger]

### A realm with a different top liege neighboring the realm of the scope character's top liege (including across water); switches to the realm's top title. Can be based on borders a day or two out of date
### any_neighboring_and_across_water_top_liege_realm = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = landed_title
alias[trigger:any_neighboring_and_across_water_top_liege_realm] = single_alias_right[any_trigger]

### A realm with a different top liege neighboring the realm of the scope character's top liege (including across water); switches to the holder of the realm. Can be based on borders a day or two out of date
### any_neighboring_and_across_water_top_liege_realm_owner = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_neighboring_and_across_water_top_liege_realm_owner] = single_alias_right[any_trigger]

### A realm with a different top suzerain neighboring the realm of the scope character's top suzerain (including across water); switches to the realm's top title. Can be based on borders a day or two out of date
### any_neighboring_and_across_water_top_suzerain_realm = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = landed_title
alias[trigger:any_neighboring_and_across_water_top_suzerain_realm] = single_alias_right[any_trigger]

### A realm with a different top suzerain neighboring the realm of the scope character's top suzerain (including across water); switches to the holder of the realm. Can be based on borders a day or two out of date
### any_neighboring_and_across_water_top_suzerain_realm_owner = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_neighboring_and_across_water_top_suzerain_realm_owner] = single_alias_right[any_trigger]

### A sub-realm or realm bordering the scope character's realm and has the same rank as the scope character (look for lieges of he owner of the land if necessary)
### any_neighboring_realm_same_rank_owner = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_neighboring_realm_same_rank_owner] = single_alias_right[any_trigger]

### A realm with a different top liege neighboring the realm of the scope character's top liege; switches to the realm's top title. Can be based on borders a day or two out of date
### any_neighboring_top_liege_realm = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = landed_title
alias[trigger:any_neighboring_top_liege_realm] = single_alias_right[any_trigger]

### A realm with a different top liege neighboring the realm of the scope character's top liege; switches to the holder of the realm. Can be based on borders a day or two out of date
### any_neighboring_top_liege_realm_owner = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_neighboring_top_liege_realm_owner] = single_alias_right[any_trigger]

### A realm with a different top suzerain neighboring the realm of the scope character's top suzerain; switches to the realm's top title. Can be based on borders a day or two out of date
### any_neighboring_top_suzerain_realm = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = landed_title
alias[trigger:any_neighboring_top_suzerain_realm] = single_alias_right[any_trigger]

### A realm with a different top suzerain neighboring the realm of the scope character's top suzerain; switches to the holder of the realm. Can be based on borders a day or two out of date
### any_neighboring_top_suzerain_realm_owner = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_neighboring_top_suzerain_realm_owner] = single_alias_right[any_trigger]

### Iterate through all noble family titles in the realm of scoped character
### any_noble_family = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = landed_title
alias[trigger:any_noble_family] = single_alias_right[any_trigger]

### Iterate through all the spouse candidates of the opposite sex of a character.
### WARNING: THIS IS VERY SLOW DO NOT DO IT OFTEN.
### any_opposite_sex_spouse_candidate = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_opposite_sex_spouse_candidate] = single_alias_right[any_trigger]

### Iterate through all owned stories for a character
### any_owned_story = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = story
alias[trigger:any_owned_story] = single_alias_right[any_trigger]

### Iterate through all holy orders that the scoped character is a patron of
### any_patroned_holy_order = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = holy_order
alias[trigger:any_patroned_holy_order] = single_alias_right[any_trigger]

### Iterate through all personally claimed artifacts of the scoped character
### any_personal_claimed_artifact = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = artifact
alias[trigger:any_personal_claimed_artifact] = single_alias_right[any_trigger]

### Iterate through characters this player has pinned
### any_pinned_character = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_pinned_character] = single_alias_right[any_trigger]

### Iterate through characters whose player has this character pinned
### any_pinning_character = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_pinning_character] = single_alias_right[any_trigger]

### Iterate through all characters the player playing this character has played. Matches the game over legacy, except for excluding the currently played character
### any_played_character = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_played_character] = single_alias_right[any_trigger]

### Iterate through player heirs, capped at the first 10
### any_player_heir = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_player_heir] = single_alias_right[any_trigger]

### Get all legends in a player character library.
### any_player_legend_library = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = legend
alias[trigger:any_player_legend_library] = single_alias_right[any_trigger]

### Iterate through all guests visiting the court from the pool (in contrast to foreign_court_guest they don't have a liege)
### any_pool_guest = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_pool_guest] = single_alias_right[any_trigger]

### Iterate through all potential selectable marriage or betrohed options
### any_potential_marriage_option = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_potential_marriage_option] = single_alias_right[any_trigger]

### Iterate through all directly owned provinces
### any_powerful_family = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = dynasty_house
alias[trigger:any_powerful_family] = single_alias_right[any_trigger]

### Iterate through the all powerful vassals of a character
### any_powerful_vassal = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_powerful_vassal] = single_alias_right[any_trigger]

### Iterate through all landed titles character is pretender to
### any_pretender_title = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = landed_title
alias[trigger:any_pretender_title] = single_alias_right[any_trigger]

### Iterate through all primary war enemies
### any_primary_war_enemy = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_primary_war_enemy] = single_alias_right[any_trigger]

### Iterate through all prisoners
### any_prisoner = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_prisoner] = single_alias_right[any_trigger]

### Iterate through all prowess-based councillors
### any_prowess_councillor = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_prowess_councillor] = single_alias_right[any_trigger]

### Iterate through anyone the character is hostile to due to having raided them. Only returns top lieges
### any_raid_target = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_raid_target] = single_alias_right[any_trigger]

### Iterate through all counties that are on the edge of your realm bordering a different neighboring realm.
### any_realm_border_county = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = landed_title
alias[trigger:any_realm_border_county] = single_alias_right[any_trigger]

### Iterate through all counties in the realm. Based on top liege
### any_realm_county = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = landed_title
alias[trigger:any_realm_county] = single_alias_right[any_trigger]

### Iterate through all de jure duchies that have at least one county in the realm. Based on top liege
### any_realm_de_jure_duchy = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = landed_title
alias[trigger:any_realm_de_jure_duchy] = single_alias_right[any_trigger]

### Iterate through all de jure empire that have at least one county in the realm. Based on top liege
### any_realm_de_jure_empire = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = landed_title
alias[trigger:any_realm_de_jure_empire] = single_alias_right[any_trigger]

### Iterate through all de jure kingdom that have at least one county in the realm. Based on top liege
### any_realm_de_jure_kingdom = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = landed_title
alias[trigger:any_realm_de_jure_kingdom] = single_alias_right[any_trigger]

### Iterate through all realm provinces of a character
### any_realm_province = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = province
alias[trigger:any_realm_province] = single_alias_right[any_trigger]

### Iterate through all the spouse candidates of the same sex of a character.
### WARNING: THIS IS VERY SLOW DO NOT DO IT OFTEN.
### any_same_sex_spouse_candidate = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_same_sex_spouse_candidate] = single_alias_right[any_trigger]

### Iterate through all schemes owned by the character
### any_scheme = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = scheme
alias[trigger:any_scheme] = single_alias_right[any_trigger]

### Iterate through all secrets of the character
### any_secret = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = secret
alias[trigger:any_secret] = single_alias_right[any_trigger]

### Iterate through all siblings
### any_sibling = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_sibling] = single_alias_right[any_trigger]

### Iterate through all sponsored inspirations
### any_sponsored_inspiration = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = inspiration
alias[trigger:any_sponsored_inspiration] = single_alias_right[any_trigger]

### Iterate through all the spouse candidates of a character.
### WARNING: THIS IS VERY SLOW DO NOT DO IT OFTEN.
### any_spouse_candidate = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_spouse_candidate] = single_alias_right[any_trigger]

### Iterate through all stewardship-based councillors
### any_stewardship_councillor = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_stewardship_councillor] = single_alias_right[any_trigger]

### Iterate through all baronies in sub-realm
### any_sub_realm_barony = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = landed_title
alias[trigger:any_sub_realm_barony] = single_alias_right[any_trigger]

### Iterate through all counties in sub-realm
### any_sub_realm_county = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = landed_title
alias[trigger:any_sub_realm_county] = single_alias_right[any_trigger]

### Iterate through all duchies in sub-realm
### any_sub_realm_duchy = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = landed_title
alias[trigger:any_sub_realm_duchy] = single_alias_right[any_trigger]

### Iterate through all empires in sub-realm
### any_sub_realm_empire = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = landed_title
alias[trigger:any_sub_realm_empire] = single_alias_right[any_trigger]

### Iterate through all kingdoms in sub-realm
### any_sub_realm_kingdom = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = landed_title
alias[trigger:any_sub_realm_kingdom] = single_alias_right[any_trigger]

### Iterate through all titles in sub-realm
### any_sub_realm_title = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = landed_title
alias[trigger:any_sub_realm_title] = single_alias_right[any_trigger]

### Iterate through all candidates supported by the scoped investor character for any title
### It may contain people outside of investor's top realm or no longer valid for appointment
### any_succession_appointment_invested_candidate = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_succession_appointment_invested_candidate] = single_alias_right[any_trigger]

### Iterate through all titles that has candidates supported by the scoped investor
### It may contain titles outside of investor's top realm, and so invalid for appointment,
### and candidates may be already dead
### any_succession_appointment_invested_title = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = landed_title
alias[trigger:any_succession_appointment_invested_title] = single_alias_right[any_trigger]

### Iterate through all factions targeting the scope character
### any_targeting_faction = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = faction
alias[trigger:any_targeting_faction] = single_alias_right[any_trigger]

### Iterate through all schemes targeting the character
### any_targeting_scheme = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = scheme
alias[trigger:any_targeting_scheme] = single_alias_right[any_trigger]

### Iterate through all secrets that target the specified scope
### any_targeting_secret = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = secret
alias[trigger:any_targeting_secret] = single_alias_right[any_trigger]

### Iterates through all Tax Collectors employed by the scoped character
### any_tax_collector = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_tax_collector] = single_alias_right[any_trigger]

### Iterates through all Vassals the scoped Character is the Tax Collector for
### any_tax_collector_vassal = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_tax_collector_vassal] = single_alias_right[any_trigger]

### Iterates through all Tax Slots the scoped character has
### any_tax_slot = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = tax_slot
alias[trigger:any_tax_slot] = single_alias_right[any_trigger]

### Iterate through all counties that are on the edge of your realm bordering a different neighboring top realm.
### any_top_realm_border_county = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = landed_title
alias[trigger:any_top_realm_border_county] = single_alias_right[any_trigger]

### Iterate though all characters that should travel with the scoped one (when moving between courts for instance); includes the scoped character
### any_traveling_family_member = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_traveling_family_member] = single_alias_right[any_trigger]

### Iterate through all tributaries
### any_tributary = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_tributary] = single_alias_right[any_trigger]

### Iterate through all characters that have a truce on this character
### any_truce_holder = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_truce_holder] = single_alias_right[any_trigger]

### Iterate through all characters this character has a truce on
### any_truce_target = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_truce_target] = single_alias_right[any_trigger]

### Iterates through all unassigned taxpayers for scoped Character
### any_unassigned_taxpayers = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_unassigned_taxpayers] = single_alias_right[any_trigger]

### Iterate through all unspent secrets known by the character
### any_unspent_known_secret = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = secret
alias[trigger:any_unspent_known_secret] = single_alias_right[any_trigger]

### Iterate through all DIRECT vassals
### any_vassal = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_vassal] = single_alias_right[any_trigger]

### Iterate through ALL vassals, not just direct vassals
### any_vassal_or_below = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_vassal_or_below] = single_alias_right[any_trigger]

### Iterate through all direct war allies
### any_war_ally = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_war_ally] = single_alias_right[any_trigger]

### Iterate through all direct war enemies
### any_war_enemy = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_war_enemy] = single_alias_right[any_trigger]

### Iterate through all hostages having this warden
### any_warden_hostage = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = character
## push_scope = character
alias[trigger:any_warden_hostage] = single_alias_right[any_trigger]

### Iterate over both sides ( attacker and defender ) of the given combat
### any_combat_side = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = combat
## push_scope = combat_side
alias[trigger:any_combat_side] = single_alias_right[any_trigger]

### Iterate through all claimants to title. parameters: explicit = yes/no/all - default yes
### any_claimant = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = landed_title
## push_scope = character
alias[trigger:any_claimant] = single_alias_right[any_trigger]

### Iterate through all counties connected to this one. Is based on top liege
### any/every/whatever_connectec_county = {
### 
### max_naval_distance = 500
### 
### allow_one_county_land_gap = yes
### any_connected_county = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = landed_title
## push_scope = landed_title
alias[trigger:any_connected_county] = single_alias_right[any_trigger]

### Iterate through all faiths headed by a title
### any_controlled_faith = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = landed_title
## push_scope = faith
alias[trigger:any_controlled_faith] = single_alias_right[any_trigger]

### Iterate through controlled title regiments
### any_controlled_title_maa_regiment = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = landed_title
## push_scope = regiment
alias[trigger:any_controlled_title_maa_regiment] = single_alias_right[any_trigger]

### Iterate through all provinces in a county
### any_county_province = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = landed_title
## push_scope = province
alias[trigger:any_county_province] = single_alias_right[any_trigger]

### Iterate through all situations that a county is involved in.
### any_county_situation = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = landed_title
## push_scope = situation
alias[trigger:any_county_situation] = single_alias_right[any_trigger]

### Iterate through all situation sub-regions that a county is involved in.
### any_county_situation_sub_region = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = landed_title
## push_scope = situation_sub_region
alias[trigger:any_county_situation_sub_region] = single_alias_right[any_trigger]

### Iterate through all struggles that a county is involved in.
### any_county_struggle = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = landed_title
## push_scope = struggle
alias[trigger:any_county_struggle] = single_alias_right[any_trigger]

### Iterate through all counties within this dejure title
### any_de_jure_county = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = landed_title
## push_scope = landed_title
alias[trigger:any_de_jure_county] = single_alias_right[any_trigger]

### Iterate through all characters directly holding counties within this dejure title
### any_de_jure_county_holder = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = landed_title
## push_scope = character
alias[trigger:any_de_jure_county_holder] = single_alias_right[any_trigger]

### Iterate through all top lieges of the counts within this dejure title
### any_de_jure_top_liege = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = landed_title
## push_scope = character
alias[trigger:any_de_jure_top_liege] = single_alias_right[any_trigger]

### Iterate through all the vassal holders of the title
### any_dejure_vassal_title_holder = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = landed_title
## push_scope = character
alias[trigger:any_dejure_vassal_title_holder] = single_alias_right[any_trigger]

### Iterate through all de facto vassal titles
### any_direct_de_facto_vassal_title = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = landed_title
## push_scope = landed_title
alias[trigger:any_direct_de_facto_vassal_title] = single_alias_right[any_trigger]

### Iterate through the all de jure vassals titles
### any_direct_de_jure_vassal_title = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = landed_title
## push_scope = landed_title
alias[trigger:any_direct_de_jure_vassal_title] = single_alias_right[any_trigger]

### Iterate through all characters who are valid candidates in an election for a title
### any_election_candidate = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = landed_title
## push_scope = character
alias[trigger:any_election_candidate] = single_alias_right[any_trigger]

### Iterate through all characters who are valid electors in an election for a title
### any_elector = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = landed_title
## push_scope = character
alias[trigger:any_elector] = single_alias_right[any_trigger]

### Iterate through all counties that are important for the scoped title
### any_important_location_for_title = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = landed_title
## push_scope = landed_title
alias[trigger:any_important_location_for_title] = single_alias_right[any_trigger]

### Iterate through the title itself, all de facto vassals, and below. The continue trigger specifies whether to recursively iterate through the vassal's vassal
### This is unrelated to the limit; if the limit is met it is added to the list, but its vassals will get checked even if the limit isn't met as long as the 'continue' trigger is
### ..._de_jure_vassal_and_below = { continue = { conditions } }
### any_in_de_facto_hierarchy = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = landed_title
## push_scope = landed_title
alias[trigger:any_in_de_facto_hierarchy] = single_alias_right[any_trigger]

### Iterate through all neighboring counties. Can only be used in county scope
### any_neighboring_county = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = landed_title
## push_scope = landed_title
alias[trigger:any_neighboring_county] = single_alias_right[any_trigger]

### Iterate through owned title MaA regiments
### any_owned_title_maa_regiment = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = landed_title
## push_scope = regiment
alias[trigger:any_owned_title_maa_regiment] = single_alias_right[any_trigger]

### Iterate through all past owners of a title from earliest to latest
### any_past_holder = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = landed_title
## push_scope = character
alias[trigger:any_past_holder] = single_alias_right[any_trigger]

### Iterate through all past owners of a title from latest to earliest
### any_past_holder_reversed = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = landed_title
## push_scope = character
alias[trigger:any_past_holder_reversed] = single_alias_right[any_trigger]

### Iterate through this title and all its dejure liege titles
### any_this_title_or_de_jure_above = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = landed_title
## push_scope = landed_title
alias[trigger:any_this_title_or_de_jure_above] = single_alias_right[any_trigger]

### Line of succession for the scoped title
### any_title_heir = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = landed_title
## push_scope = character
alias[trigger:any_title_heir] = single_alias_right[any_trigger]

### Iterate through titles that consider scoped county an important location
### any_title_interested_in_location = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = landed_title
## push_scope = landed_title
alias[trigger:any_title_interested_in_location] = single_alias_right[any_trigger]

### Iterate through all factions joined the scope landed title
### any_title_joined_faction = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = landed_title
## push_scope = faction
alias[trigger:any_title_joined_faction] = single_alias_right[any_trigger]

### Iterate through title all MaA regiments
### any_title_maa_regiment = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = landed_title
## push_scope = regiment
alias[trigger:any_title_maa_regiment] = single_alias_right[any_trigger]

### Scopes from a title to a neighboring county (incl. across water, looking trough the de Jure lieges)
### any_title_to_title_neighboring_and_across_water_county = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = landed_title
## push_scope = landed_title
alias[trigger:any_title_to_title_neighboring_and_across_water_county] = single_alias_right[any_trigger]

### Scopes from a title to a neighboring duchy (incl. across water, looking trough the de Jure lieges)
### any_title_to_title_neighboring_and_across_water_duchy = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = landed_title
## push_scope = landed_title
alias[trigger:any_title_to_title_neighboring_and_across_water_duchy] = single_alias_right[any_trigger]

### Scopes from a title to a neighboring empire (incl. across water, looking trough the de Jure lieges)
### any_title_to_title_neighboring_and_across_water_empire = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = landed_title
## push_scope = landed_title
alias[trigger:any_title_to_title_neighboring_and_across_water_empire] = single_alias_right[any_trigger]

### Scopes from a title to a neighboring kingdom (incl. across water, looking trough the de Jure lieges)
### any_title_to_title_neighboring_and_across_water_kingdom = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = landed_title
## push_scope = landed_title
alias[trigger:any_title_to_title_neighboring_and_across_water_kingdom] = single_alias_right[any_trigger]

### Scopes from a title to a neighboring county (looking trough the de Jure lieges)
### any_title_to_title_neighboring_county = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = landed_title
## push_scope = landed_title
alias[trigger:any_title_to_title_neighboring_county] = single_alias_right[any_trigger]

### Scopes from a title to a neighboring duchy (looking trough the de Jure lieges)
### any_title_to_title_neighboring_duchy = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = landed_title
## push_scope = landed_title
alias[trigger:any_title_to_title_neighboring_duchy] = single_alias_right[any_trigger]

### Scopes from a title to a neighboring empire (looking trough the de Jure lieges)
### any_title_to_title_neighboring_empire = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = landed_title
## push_scope = landed_title
alias[trigger:any_title_to_title_neighboring_empire] = single_alias_right[any_trigger]

### Scopes from a title to a neighboring kingdom (looking trough the de Jure lieges)
### any_title_to_title_neighboring_kingdom = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = landed_title
## push_scope = landed_title
alias[trigger:any_title_to_title_neighboring_kingdom] = single_alias_right[any_trigger]

### Iterate through all faction county members
### any_faction_county_member = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = faction
## push_scope = landed_title
alias[trigger:any_faction_county_member] = single_alias_right[any_trigger]

### Iterate through all faction character members
### any_faction_member = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = faction
## push_scope = character
alias[trigger:any_faction_member] = single_alias_right[any_trigger]

### Iterate through all commanders (the commanders of every army on the side, not just the one leading the battle)
### any_side_commander = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = combat_side
## push_scope = character
alias[trigger:any_side_commander] = single_alias_right[any_trigger]

### Iterate through all knights
### any_side_knight = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = combat_side
## push_scope = character
alias[trigger:any_side_knight] = single_alias_right[any_trigger]

### Returns all participants in a combat side
### any_side_participant = { <count=num/all> / <percent=fixed_point> <triggers> }
## scope = combat_side
## push_scope = character
alias[trigger:any_side_participant] = single_alias_right[any_trigger]

