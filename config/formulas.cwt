# This is a hardcoded reference for value_field
single_alias[range] = {
    ## cardinality = 2..2
    float
}

# This is a hardcoded reference for value_field
single_alias[formula] = {
    ## cardinality = 0..inf
    alias_name[arithmetic_operation] = alias_match_left[arithmetic_operation]
}

alias[arithmetic_operation:add] = alias_keys_field[int_value]
alias[arithmetic_operation:add] = value_field
alias[arithmetic_operation:add] = single_alias_right[score_formula]
alias[arithmetic_operation:subtract] = alias_keys_field[int_value]
alias[arithmetic_operation:subtract] = value_field
alias[arithmetic_operation:subtract] = single_alias_right[score_formula]
alias[arithmetic_operation:multiply] = alias_keys_field[int_value]
alias[arithmetic_operation:multiply] = value_field
alias[arithmetic_operation:multiply] = single_alias_right[score_formula]
alias[arithmetic_operation:divide] = alias_keys_field[int_value]
alias[arithmetic_operation:divide] = value_field
alias[arithmetic_operation:divide] = single_alias_right[score_formula]
alias[arithmetic_operation:value] = alias_keys_field[int_value]
alias[arithmetic_operation:value] = value_field
alias[arithmetic_operation:value] = single_alias_right[score_formula]
alias[arithmetic_operation:max] = alias_keys_field[int_value]
alias[arithmetic_operation:max] = value_field
alias[arithmetic_operation:max] = single_alias_right[score_formula]
alias[arithmetic_operation:min] = alias_keys_field[int_value]
alias[arithmetic_operation:min] = value_field
alias[arithmetic_operation:min] = single_alias_right[score_formula]

alias[arithmetic_operation:round] = yes
alias[arithmetic_operation:ceiling] = yes
alias[arithmetic_operation:floor] = yes

alias[int_value:value_field] = value_field
alias[int_value:int_value_field] = int_value_field
alias[int_value:<script_value>] = <script_value>
alias[int_value:<static_value>] = <static_value>
alias[int_value:$define_reference] = $define_reference
alias[int_value:scope[value]] = scope[value]

alias[float_value:value_field] = value_field
alias[float_value:<script_value>] = <script_value>
alias[float_value:<static_value>] = <static_value>
alias[float_value:$define_reference] = $define_reference
alias[float_value:scope[value]] = scope[value]

alias[script_value:<script_value>] = <script_value>
alias[script_value:<static_value>] = <static_value>
alias[script_value:$define_reference] = $define_reference
alias[script_value:scope[value]] = scope[value]

alias[arithmetic_operation:save_temporary_value_as] = value_set[variable]

single_alias[score_formula] = {
    ## cardinality = 0..inf
    alias_name[score_operation] = alias_match_left[score_operation]
    ## cardinality = 0..inf
    alias_name[arithmetic_operation] = alias_match_left[arithmetic_operation]
    # ## cardinality = 0..inf
    # scope_field = single_alias_right[score_formula]
    ## cardinality = 0..1
    desc = localisation
    ## cardinality = 0..1
    format = localisation
}

single_alias[score_arithmetic] = {
    ## cardinality = 0..inf
    alias_name[arithmetic_operation] = alias_match_left[arithmetic_operation]
    ## cardinality = 0..inf
    alias_name[score_operation] = alias_match_left[score_operation]
    ## cardinality = 0..inf
    scope_field = single_alias_right[score_formula]
    ## cardinality = 0..1
    desc = localisation
    ## cardinality = 0..1
    desc = scalar
    ## cardinality = 0..1
    format = localisation
}
#single_alias[score_arithmetic] = alias_match_left[arithmetic_operation]

alias[score_operation:if] = single_alias_right[score_conditional]
alias[score_operation:else_if] = single_alias_right[score_conditional]
alias[score_operation:else] = single_alias_right[score_formula]
single_alias[score_conditional] = {
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alias_name[arithmetic_operation] = alias_match_left[arithmetic_operation]
    ## cardinality = 0..inf
    alias_name[score_operation] = alias_match_left[score_operation]
    ## cardinality = 0..1
    desc = localisation
    ## cardinality = 0..1
    desc = scalar
    ## cardinality = 0..1
    format = localisation
}

### Switch on a trigger for the evaluation of another trigger with an optional fallback trigger. switch = { 	trigger = simple_assign_trigger 	case_1 = { <effects> } 	case_2 = { <effects> } 	case_n = { <effects> } 	fallback = { <effects> }
alias[score_operation:switch] = {
    trigger = alias_keys_field[trigger]
    trigger = bool

    ## cardinality = 0..inf
    scope_field = {
        ## cardinality = 0..inf
        alias_name[arithmetic_operation] = alias_match_left[arithmetic_operation]
        ## cardinality = 0..inf
        alias_name[score_operation] = alias_match_left[score_operation]
    }
    ## cardinality = 0..inf
    int = {
        ## cardinality = 0..inf
        alias_name[arithmetic_operation] = alias_match_left[arithmetic_operation]
        ## cardinality = 0..inf
        alias_name[score_operation] = alias_match_left[score_operation]
    }
    ## cardinality = 0..inf
    scalar = {
        ## cardinality = 0..inf
        alias_name[arithmetic_operation] = alias_match_left[arithmetic_operation]
        ## cardinality = 0..inf
        alias_name[score_operation] = alias_match_left[score_operation]
    }
    ## cardinality = 0..1
    fallback = {
        ## cardinality = 0..inf
        alias_name[arithmetic_operation] = alias_match_left[arithmetic_operation]
        ## cardinality = 0..inf
        alias_name[score_operation] = alias_match_left[score_operation]
    }
}

alias[score_operation:scope_field] = single_alias_right[score_formula]