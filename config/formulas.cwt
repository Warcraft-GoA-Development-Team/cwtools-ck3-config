# This is a hardcoded reference for value_field
single_alias[range] = {
    ## cardinality = 2..2
    float
}

# This is a hardcoded reference for value_field
single_alias[formula] = {
    ## cardinality = 0..inf
    alias_name[arithmetic_operation] = alias_match_left[arithmetic_operation]
}

alias[arithmetic_operation:add] = alias_keys_field[int_value]
alias[arithmetic_operation:add] = value_field
alias[arithmetic_operation:subtract] = alias_keys_field[int_value]
alias[arithmetic_operation:subtract] = value_field
alias[arithmetic_operation:multiply] = alias_keys_field[int_value]
alias[arithmetic_operation:multiply] = value_field
alias[arithmetic_operation:divide] = alias_keys_field[int_value]
alias[arithmetic_operation:divide] = value_field
alias[arithmetic_operation:value] = alias_keys_field[int_value]
alias[arithmetic_operation:value] = value_field
alias[arithmetic_operation:max] = alias_keys_field[int_value]
alias[arithmetic_operation:max] = value_field
alias[arithmetic_operation:min] = alias_keys_field[int_value]
alias[arithmetic_operation:min] = value_field

alias[arithmetic_operation:round] = yes
alias[arithmetic_operation:ceiling] = yes
alias[arithmetic_operation:floor] = yes

alias[int_value:value_field] = value_field
alias[int_value:value_field] = int_value_field
alias[int_value:<script_value>] = <script_value>
alias[int_value:<static_value>] = <static_value>
alias[int_value:$define_reference] = $define_reference
alias[int_value:scope[value]] = scope[value]

alias[arithmetic_operation:save_temporary_value_as] = value_set[variable]

alias[arithmetic_operation:fixed_range] = {
    min = alias_keys_field[int_value]
    min = value_field
    min = single_alias_right[formula]
    max = alias_keys_field[int_value]
    max = value_field
    max = single_alias_right[formula]
}

alias[arithmetic_operation:integer_range] = {
    min = alias_keys_field[int_value]
    min = value_field
    min = single_alias_right[formula]
    max = alias_keys_field[int_value]
    max = value_field
    max = single_alias_right[formula]
}

### Conditional Variable Addition
single_alias[arithmetic_operation_conditional_add] = {
    ## cardinality = 1..inf
    alias_name[arithmetic_operation] = alias_match_left[arithmetic_operation]
    ## cardinality = 1..inf
    alias_name[effect] = alias_match_left[effect]
    ### Localized description
    ## cardinality = 0..1
    desc = localisation
    ## cardinality = 0..1
    format = localisation
}

single_alias[score_formula] = {
    ## cardinality = 0..inf
    alias_name[score_operation] = alias_match_left[score_operation]
    ## cardinality = 0..inf
    alias_name[arithmetic_operation] = alias_match_left[arithmetic_operation]
    ## cardinality = 0..inf
    scope_field = single_alias_right[score_formula]
}

alias[score_operation:add] = single_alias_right[score_arithmetic]
alias[score_operation:subtract] = single_alias_right[score_arithmetic]
alias[score_operation:multiply] = single_alias_right[score_arithmetic]
alias[score_operation:divide] = single_alias_right[score_arithmetic]
alias[score_operation:value] = single_alias_right[score_arithmetic]
# alias[score_operation:max] = single_alias_right[score_arithmetic]
# alias[score_operation:min] = single_alias_right[score_arithmetic]
single_alias[score_arithmetic] = {
    ## cardinality = 0..inf
    alias_name[arithmetic_operation] = alias_match_left[arithmetic_operation]
    ## cardinality = 0..inf
    alias_name[score_operation] = alias_match_left[score_operation]
    ## cardinality = 0..inf
    scope_field = single_alias_right[score_formula]
    ## cardinality = 0..1
    desc = localisation
    ## cardinality = 0..1
    desc = scalar
    ## cardinality = 0..1
    format = localisation
}
#single_alias[score_arithmetic] = alias_match_left[arithmetic_operation]

alias[score_operation:if] = single_alias_right[score_conditional]
alias[score_operation:else_if] = single_alias_right[score_conditional]
alias[score_operation:else] = single_alias_right[score_arithmetic]
single_alias[score_conditional] = {
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alias_name[arithmetic_operation] = alias_match_left[arithmetic_operation]
    ## cardinality = 0..inf
    alias_name[score_operation] = alias_match_left[score_operation]
    ## cardinality = 0..inf
    scope_field = single_alias_right[score_formula]
    ## cardinality = 0..1
    desc = localisation
    ## cardinality = 0..1
    desc = scalar
    ## cardinality = 0..1
    format = localisation
}

alias[score_operation:scope:employee] = {
    ## cardinality = 1..inf
    alias_name[score_operation] = alias_match_left[score_operation]
}

alias[score_operation:scope:liege] = {
    ## cardinality = 1..inf
    alias_name[score_operation] = alias_match_left[score_operation]
}

###### Triggers for value calculations #######
alias[trigger:scope:highest_available_aptitude.compare_value] = value_field

alias[score_operation:new_scope] = {
    scope_field = single_alias_right[score_operation]
}

alias[score_operation:use_attribute] = {
    alias_name[arithmetic_operation] = enum[attributes]
}

# single_alias[int_conditional_formula] = {
#     ## cardinality = 0..inf
#     alias_name[score_operation] = alias_match_left[score_operation]
#     ## cardinality = 0..inf
#     alias_name[arithmetic_operation] = alias_keys_field[int_value]
#     ## cardinality = 0..inf
#     alias_name[arithmetic_operation] = alias_match_left[score_operation]
# }

single_alias[float_conditional_formula] = {
    value = value_field
    alias_name[score_operation] = alias_match_left[score_operation]


}