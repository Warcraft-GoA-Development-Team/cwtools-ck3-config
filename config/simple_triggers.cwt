# Autogenerated file, do not edit manually
### Can the scoped dynasty unlock a 'relevant' perk? Relevant meaning one that isn't the first in its track unless the dynasty has no partially filled tracks
## scope = dynasty
alias[trigger:dynasty_can_unlock_relevant_perk] = bool

### Check if the current activity is completed or not, this doesn't have much use for content since we delete an activity as soon as we can, but in multiplayer it exists until everyone stops viewing it so we use this to cancel some delayed events
### is_activity_complete = yes/no
## scope = activity
alias[trigger:is_activity_complete] = bool

### Check if the current activity phase is in the active state (else it is in the passive state)
### is_current_phase_active = yes/no
## scope = activity
alias[trigger:is_current_phase_active] = bool

### Check if the scoped activity is an open invite activity
### is_open_invite_activity = yes/no
## scope = activity
alias[trigger:is_open_invite_activity] = bool

### Does the culture have the same ethos as the target?
## scope = culture
alias[trigger:has_same_culture_ethos] = scope[culture]

### Does the culture have the same head determination as the target?
## scope = culture
alias[trigger:has_same_culture_head_determination] = scope[culture]

### Does the culture have the same heritage as the target?
## scope = culture
alias[trigger:has_same_culture_heritage] = scope[culture]

### Does the culture have the same language as the target?
## scope = culture
alias[trigger:has_same_culture_language] = scope[culture]

### Does the culture have the same martial tradition as the target?
## scope = culture
alias[trigger:has_same_culture_martial_tradition] = scope[culture]

### Checks if the scope culture was created by diverging from a single parent culture and returns yes if true or no if false.
### is_divergent_culture = yes
## scope = culture
alias[trigger:is_divergent_culture] = bool

### Checks if the scope culture was created from a hybridization of two cultures and returns yes if true or no if false.
### is_hybrid_culture = yes
## scope = culture
alias[trigger:is_hybrid_culture] = bool

### has_memory_participant = character
### Does the character memory have this target character as a participant?
## scope = character_memory
alias[trigger:has_memory_participant] = scope[character]

### Is the scoped memory a memory of a specific travel plan? is_memory_of_travel = travel_plan
## scope = character_memory
alias[trigger:is_memory_of_travel] = scope[travel_plan]

### Can target MaA regiment be upgraded
## scope = regiment
alias[trigger:can_upgrade_maa] = bool

### Is target MaA regiment part of event troops
## scope = regiment
alias[trigger:is_event_maa_regiment] = bool

### Was target MaA regiment hired from merc or holy order
## scope = regiment
alias[trigger:is_hired_maa_regiment] = bool

### Is target MaA regiment engaged in combat
## scope = regiment
alias[trigger:is_maa_in_combat] = bool

### Is target MaA regiment personal
## scope = regiment
alias[trigger:is_personal_maa_regiment] = bool

### Is target MaA regiment raised
## scope = regiment
alias[trigger:is_raised] = bool

### Is target MaA regiment just a normal one recruited by a ruler
## scope = regiment
alias[trigger:is_regular_maa_regiment] = bool

### Is target MaA regiment belongs to a title
## scope = regiment
alias[trigger:is_title_maa_regiment] = bool

### Does the scoped dynasty house have a personal claim on the target artifact
## scope = dynasty_house
alias[trigger:has_house_artifact_claim] = scope[artifact]

### Is the given dynasty house has house unity
## scope = dynasty_house
alias[trigger:has_house_unity] = bool

### Is the given house considered dominant: scope:house = { is_dominant_family = yes }
## scope = dynasty_house
alias[trigger:is_dominant_family] = bool

### Is the given house considered powerful: scope:house = { is_powerful_family = yes }
## scope = dynasty_house
alias[trigger:is_powerful_family] = bool

### Is the contract type of criminal nature?
## scope = task_contract
alias[trigger:is_criminal] = bool

### Is contract valid to keep?
## scope = task_contract
alias[trigger:is_valid_to_keep] = bool

### Check if the scope task's councillor can be fired. Will check both can_fire and things like it being illegal to reassing the position
### scope:task = { position_can_be_fired = yes }
## scope = council_task
alias[trigger:can_fire_position] = bool

### can the scope secret be exposed by the target character? can_be_exposed_by = target
## scope = secret
alias[trigger:can_be_exposed_by] = scope[character]

### is this secret criminal for the target participant? is_criminal_for = <character>
## scope = secret
alias[trigger:is_criminal_for] = scope[character]

### is the scope secret known by the target character?
## scope = secret
alias[trigger:is_known_by] = scope[character]

### is this secret shunned for the target participant? is_shunned_for = <character>
## scope = secret
alias[trigger:is_shunned_for] = scope[character]

### is this secret shunned or criminal for the target participant? is_shunned_or_illegal_for = <character>
## scope = secret
alias[trigger:is_shunned_or_criminal_for] = scope[character]

### has the scope secret been spent by the target character? is_spent_by = target
## scope = secret
alias[trigger:is_spent_by] = scope[character]

### Does the local player have knowledge about the secret?
### An interface trigger, can only be used in specific places
## scope = secret
alias[trigger:local_player_knows_this_secret] = bool

### Is the scope secret of the same type as the target secret?
### same_secret_type_as = scope:some_secret
## scope = secret
alias[trigger:same_secret_type_as] = scope[secret]

### is this army moving?
## scope = army
alias[trigger:army_is_moving] = bool

### Can we disband this army?
## scope = army
alias[trigger:can_disband_army] = bool

### Is the scoped army in combat?
## scope = army
alias[trigger:is_army_in_combat] = bool

### Is the scoped army in a raid (this includes a raid interrupted by combat)?
## scope = army
alias[trigger:is_army_in_raid] = bool

### Is the scoped army in a siege (this includes a siege interrupted by combat)?
## scope = army
alias[trigger:is_army_in_siege] = bool

### Is the scoped army in a siege that is relevant to the target character?
### is_army_in_siege_relevant_for = scope:character
## scope = army
alias[trigger:is_army_in_siege_relevant_for] = scope[character]

### Is the scoped army a raid army?
## scope = army
alias[trigger:is_raid_army] = bool

### Can this travel plan be cancelled? (associated activity might disallow it)
## scope = travel_plan
alias[trigger:can_cancel] = bool

### Is this travel plan aborted?
## scope = travel_plan
alias[trigger:is_aborted] = bool

### Is this travel plan cancelled? (manually stopped, and rerouted home)
## scope = travel_plan
alias[trigger:is_cancelled] = bool

### Is this travel plan completed? (finished by arrival at final destination)
## scope = travel_plan
alias[trigger:is_completed] = bool

### Is this travel plan paused?
## scope = travel_plan
alias[trigger:is_paused] = bool

### Is character travelling with a domicile?
### <travel_plan> = { is_travel_with_domicile = yes }
## scope = travel_plan
alias[trigger:is_travel_with_domicile] = bool

### If there is/was an activity attached to this travel plan, was it completed?
## scope = travel_plan
alias[trigger:was_activity_completed] = bool

### If there is/was an activity attached to this travel plan, was it invalidated?
## scope = travel_plan
alias[trigger:was_activity_invalidated] = bool

### Is the target character of the allowed gender to be clergy of the faith?
## scope = faith
alias[trigger:has_allowed_gender_for_clergy] = scope[character]

### Is the target character's gender a dominant ruling gender of the faith? Also evaluates to true if there's no dominant ruling gender
## scope = faith
alias[trigger:has_dominant_ruling_gender] = scope[character]

### Is the target character of the preferred gender to be clergy of the faith?
## scope = faith
alias[trigger:has_preferred_gender_for_clergy] = scope[character]

### is the culture involved in struggle?
### 
### is_culture_involved_in_struggle = culture:english
## scope = struggle
alias[trigger:is_culture_involved_in_struggle] = scope[culture]

### is the faith involved in struggle?
### 
### is_faith_involved_in_struggle  = faith:baltic_pagan
## scope = struggle
alias[trigger:is_faith_involved_in_struggle] = scope[faith]

### Checks if scoped sub-region of a situation contains county
### situation_sub_region_has_county = scope:county
## scope = situation_sub_region
alias[trigger:situation_sub_region_has_county] = scope[landed_title]

### Checks if scoped sub-region of a situation contains province
### situation_sub_region_has_province = scope:province
## scope = situation_sub_region
alias[trigger:situation_sub_region_has_province] = scope[province]

### Is this agent slot filled?
## scope = agent_slot
alias[trigger:is_filled] = bool

### Is the target character forced to be a defender in the given Great Holy War?
## scope = ghw
alias[trigger:has_forced_defender] = scope[character]

### Is the target character pledged as an attacker in the given Great Holy War?
## scope = ghw
alias[trigger:has_pledged_attacker] = scope[character]

### Is the target character pledged as a defender in the given Great Holy War?
## scope = ghw
alias[trigger:has_pledged_defender] = scope[character]

### Is the scoped GHW a directed GHW?
## scope = ghw
alias[trigger:is_directed_ghw] = bool

### has_tax_collector = yes
### Does the scoped Tax Slot have any Tax Collector employed?
## scope = tax_slot
alias[trigger:has_tax_collector] = bool

### If region rulers are automatically checked to be valid participants for this group.
### If disabled, only manually added characters could join..
### auto_add_rulers = yes/no
## scope = situation_participant_group
alias[trigger:auto_add_rulers] = bool

### Is this character a participant in this participant group?
### participant_group_has_character = scope:character
## scope = situation_participant_group
alias[trigger:participant_group_has_character] = scope[character]

### Is it required that the capital of participants is in the sub-region?
### require_capital_in_sub_region = yes/no
## scope = situation_participant_group
alias[trigger:require_capital_in_sub_region] = bool

### Is it required that some part of the domain of participants is in the sub-region?
### require_domain_in_sub_region = yes/no
## scope = situation_participant_group
alias[trigger:require_domain_in_sub_region] = bool

### Is it required that some part of the realm of participants is in the sub-region?
### require_realm_in_sub_region = yes/no
## scope = situation_participant_group
alias[trigger:require_realm_in_sub_region] = bool

### Can the scoped artifact be claimed by the given character?
## scope = artifact
alias[trigger:can_be_claimed_by] = scope[character]

### is the scoped artifact currently equipped in its owners inventory?
## scope = artifact
alias[trigger:is_equipped] = bool

### Is the scoped artifact unique
### defined in the scripted template of the artifact
## scope = artifact
alias[trigger:is_unique] = bool

### should the scoped artifact decay with time?
## scope = artifact
alias[trigger:should_decay] = bool

### Checks if given region is adjacent or overlaps with the target region.
### You can use both situation subregions or geographical regions as scopes. Targets a geographical bregion.
### usage:
### scope:situation_subregion/geographical_region:key = {
### 
### region_is_adjacent = scope:geographical_region
### }
## scope = { geographical_region situation_sub_region }
alias[trigger:region_is_adjacent] = scope[geographical_region]

### Checks if given region is adjacent or overlaps with the target region.
### You can use both situation subregions or geographical regions as scopes. Targets a situation subregion.
### usage:
### scope:situation_subregion/geographical_region:key = {
### 
### region_is_adjacent_situation_subregion = scope:situation_subregion
### }
## scope = { geographical_region situation_sub_region }
alias[trigger:region_is_adjacent_situation_subregion] = scope[situation_sub_region]

### checks if the assigned yes/no value is true
### always = yes # always succeeds
### always = no  # always fails
### always = scope:a_boolean_value # evaluated at runtime
alias[trigger:always] = bool

### Checks if the game is in debug mode or not.
alias[trigger:debug_only] = bool

### Has the local player opened a court event in the royal court view?
### An interface trigger, can only be used in specific places
alias[trigger:has_local_player_open_court_event] = bool

### Has the local player seen the unopened court event(s) waiting in the royal court view?
### An interface trigger, can only be used in specific places
alias[trigger:has_local_player_seen_unopened_court_event] = bool

### Has the local player an unopened court event waiting in the royal court view?
### An interface trigger, can only be used in specific places
alias[trigger:has_local_player_unopened_court_event] = bool

### Does the game have at least two players currently connected?
alias[trigger:has_multiple_players] = bool

### Is the gamestate tutorial active? See save_progress_in_gamestate in tutorial_lesson_chains documentation.
### An interface trigger, can only be used in specific places
alias[trigger:is_gamestate_tutorial_active] = bool

### Is the mercenary company within the hiring range of the target character.
### is_mercenary_in_hire_range = scope:character
alias[trigger:is_mercenary_in_hire_range] = scope[character]

### is the player playing a character?
### An interface trigger, can only be used in specific places
alias[trigger:is_player_selected] = bool

### Was the target character the preferred heir of the scoped character
### was_preferred_heir = scope:character
alias[trigger:is_rightful_liege_of] = scope[character]

### Is the tutorial active?
### An interface trigger, can only be used in specific places
alias[trigger:is_tutorial_active] = bool

### Does the scoped character meet the legitimacy expectations of the target AI vassal
### meets_legitimacy_expectation_of = scope:some_vassal
alias[trigger:meets_legitimacy_expectation_of] = scope[character]

### Checks if the game is in release mode or not.
alias[trigger:release_only] = bool

### Checks if the game is currently running scripted tests.
alias[trigger:scripted_tests] = bool

### can disturbing portrait modifiers be shown?
### An interface trigger, can only be used in specific places
alias[trigger:should_show_disturbing_portrait_modifiers] = bool

### can nudity be shown?
### An interface trigger, can only be used in specific places
alias[trigger:should_show_nudity] = bool

### Was the target character the preferred heir of the scoped character
### was_preferred_heir = scope:character
alias[trigger:was_preferred_heir] = scope[character]

### does the scope province have a free building slot? has_free_building_slot = yes
## scope = province
alias[trigger:has_free_building_slot] = bool

### does the scope province have holding?
### 
### has_holding = yes
## scope = province
alias[trigger:has_holding] = bool

### does the scope province have a construction ongoing?
### 
### has_ongoing_construction = yes
## scope = province
alias[trigger:has_ongoing_construction] = bool

### Does the province (holding) have a special building?
## scope = province
alias[trigger:has_special_building] = bool

### Does the province (holding) have a special building slot?
## scope = province
alias[trigger:has_special_building_slot] = bool

### Does this province have stationed regiments?
## scope = province
alias[trigger:has_stationed_regiment] = bool

### Is the province a coastal province (next to sea, not including lakes)?
## scope = province
alias[trigger:is_coastal] = bool

### Is the province the county capital?
## scope = province
alias[trigger:is_county_capital] = bool

### Is this a lake province?
## scope = province
alias[trigger:is_lake_province] = bool

### Is the province next to a lake?
## scope = province
alias[trigger:is_lakeside_province] = bool

### Is this province currently being occupied?
## scope = province
alias[trigger:is_occupied] = bool

### Is this province currently being raided?
## scope = province
alias[trigger:is_raided] = bool

### Is the province a river?
## scope = province
alias[trigger:is_river_province] = bool

### Is the province riverside?
## scope = province
alias[trigger:is_riverside_province] = bool

### Is this a sea province?
## scope = province
alias[trigger:is_sea_province] = bool

### does the war interaction still have a valid casus belli (those should be automatically removed on daily tick, but can exist for a tick)
## scope = war
alias[trigger:has_valid_casus_belli] = bool

### is the target character in the scope war as an attacker?
## scope = war
alias[trigger:is_attacker] = scope[character]

### Check if the scope war is a civil war or not
## scope = war
alias[trigger:is_civil_war] = bool

### is the target character in the scope war as a defender?
## scope = war
alias[trigger:is_defender] = scope[character]

### is the target character participating in the scope war as an attacker or defender?
## scope = war
alias[trigger:is_participant] = scope[character]

### is the target character leading one of the sides in the scope war?
## scope = war
alias[trigger:is_war_leader] = scope[character]

### Check if the scoped war's CB has is_white_peace_possible = yes
## scope = war
alias[trigger:is_white_peace_possible] = bool

### has the target character been called to the scope war already?
## scope = war
alias[trigger:was_called] = scope[character]

### Does the given Accolade's Owner have any character in their court ( including guests ) that could act as Successor of this Accolade if made into a Knight?
## scope = accolade
alias[trigger:has_potential_accolade_successors] = bool

### Is the scoped Accolade active, i.e. assinged by their Liege?
## scope = accolade
alias[trigger:is_accolade_active] = bool

### Does the scoped holding type have required heir government types defined?
### has_required_heir_governments = yes/no
## scope = holding_type
alias[trigger:has_required_heir_governments] = bool

### Is the scoped legend completed?.
### scope:legend = {
### 
### is_legend_completed = yes
### }
## scope = legend
alias[trigger:is_legend_completed] = bool

### Is this character considered a manual participant candidate in this situation?
### is_manual_participant = yes/no
## scope = situation
alias[trigger:is_manual_participant] = scope[character]

### Is the type of scoped situation unique.
### is_situation_unique = yes/no
## scope = situation
alias[trigger:is_situation_unique] = bool

### Checks if top sub-region of situation contains county
### situation_top_has_county = scope:county
## scope = situation
alias[trigger:situation_top_has_county] = scope[province]

### Checks if top sub-region of situation contains province
### situation_top_has_province = scope:province
## scope = situation
alias[trigger:situation_top_has_province] = scope[province]

### Is the scoped scheme a hostile scheme?
### is_hostile = bool
## scope = scheme
alias[trigger:is_hostile] = bool

### Is the target character an exposed agent in the scope scheme?
## scope = scheme
alias[trigger:is_scheme_agent_exposed] = scope[character]

### Is the scheme exposed?
## scope = scheme
alias[trigger:is_scheme_exposed] = bool

### Is the scoped scheme's type a basic type?
### is_type_basic = bool
## scope = scheme
alias[trigger:is_type_basic] = bool

### Is the scoped scheme's type a secret type?
### is_type_secret = bool
## scope = scheme
alias[trigger:is_type_secret] = bool

### Is the target character part of this scheme?
## scope = scheme
alias[trigger:scheme_is_character_agent] = scope[character]

### Can the scope owner have concubines?
## scope = character
alias[trigger:allowed_concubines] = bool

### Can the scope owner have more concubines?
## scope = character
alias[trigger:allowed_more_concubines] = bool

### Can the scope owner have more spouses?
## scope = character
alias[trigger:allowed_more_spouses] = bool

### Check character against task contract requirement triggers?
### scope:actor = { can_accept_task_contract = SCOPE_TASK_CONTRACT }
## scope = character
alias[trigger:can_accept_task_contract] = scope[task_contract]

### Can character be appointed for the target title.
### Appointment is only allowed for duchies and above, and if it's top tier title for the holder
## scope = character
alias[trigger:can_appoint_for_title] = scope[landed_title]

### can_arrive_in_time_to_activity_minimum = target_activity
### Can the scoped character arrive to the target activity in time? (only does rough but performance consideration)
## scope = character
alias[trigger:can_arrive_in_time_to_activity_minimum] = scope[activity]

### Is this scoped character valid to assign to target tax slot
### scope:character = { can_assign_to_tax_slot = scope:tax_slot }
## scope = character
alias[trigger:can_assign_to_tax_slot] = scope[tax_slot]

### can the scope target be attacking the defender based on their liege-vassal relations?
## scope = character
alias[trigger:can_attack_in_hierarchy] = scope[character]

### Can the given character potentially be the Acclaimed Knight of an Accolade?
## scope = character
alias[trigger:can_be_acclaimed] = bool

### Would the target character have been able to have children at the time of the scoped character's birth? Only age is taken into account
## scope = character
alias[trigger:can_be_child_of] = scope[character]

### Would the scoped character have been able to have children at the time of the target character's birth? Only age is taken into account
## scope = character
alias[trigger:can_be_parent_of] = scope[character]

### Can the scoped character be tributary of target character
## scope = character
alias[trigger:can_be_tributary_of] = scope[character]

### Can the scoped character become owner of the provided legend?
### scope:character = {
### 
### can_become_owner_of_legend = <legend>
### }
## scope = character
alias[trigger:can_become_owner_of_legend] = scope[legend]

### Can the scoped character benefit from the main bonuses of this artifact?
## scope = character
alias[trigger:can_benefit_from_artifact] = scope[artifact]

### Can this ruler diverge their culture? Includes checking the cost
## scope = character
alias[trigger:can_diverge] = bool

### Can this ruler diverge their culture? Does not check the cost
## scope = character
alias[trigger:can_diverge_excluding_cost] = bool

### Can the scoped character equip given artifact?
## scope = character
alias[trigger:can_equip_artifact] = scope[artifact]

### can the character have children? Only checks hard blocks from traits, not fertility
### can_have_children = yes/no
## scope = character
alias[trigger:can_have_children] = bool

### Can this ruler hybridize with the target culture? Includes checking the cost
## scope = character
alias[trigger:can_hybridize] = scope[culture]

### Can this ruler hybridize with the target culture? Does not check the cost
## scope = character
alias[trigger:can_hybridize_excluding_cost] = scope[culture]

### can_join_activity = target_activity
### Can the scoped character join the target activity
## scope = character
alias[trigger:can_join_activity] = scope[activity]

### Can the scope character join the faction? can_join_faction = faction
## scope = character
alias[trigger:can_join_faction] = scope[faction]

### Can the scope character create if join a faction against the target?
### can_join_or_create_faction_against = scope:faction_target
### can_join_or_create_faction_against = {
### 
### who = scope:faction_target
### 
### faction = faction_key # optional
### 
### check_in_a_faction = no # default: yes
### }
## scope = character
alias[trigger:can_join_or_create_faction_against] = scope[character]

### Interface trigger for checking if the scoped Nomad can raze the holding of the provided province using the Raze Holding command.
### scope:nomad = { can_nomad_raze_holding = scope:province }
## scope = character
alias[trigger:can_nomad_raze_holding] = scope[province]

### can_sponsor_inspiration = inspiration
### Can the scoped character sponsor the target inspiration
## scope = character
alias[trigger:can_sponsor_inspiration] = scope[inspiration]

### Does the character have a commander trait that the scope does not?
## scope = character
alias[trigger:character_has_commander_trait_scope_does_not] = scope[character]

### Is the scoped character a realm neighbor of the target? Meaning they're independent or has the same liege, and border your realm.
## scope = character
alias[trigger:character_is_land_realm_neighbor] = scope[character]

### Is the scoped character a realm neighbor of the target? Meaning they're independent or has the same liege, and border your realm. Including across two sea zones
## scope = character
alias[trigger:character_is_realm_neighbor] = scope[character]

### does the character controls all counties and baronies inside de jure title (no hostile occupation either)?
## scope = character
alias[trigger:completely_controls] = scope[landed_title]

### Does the AI liege in a vassal contract desire changing an obligation level
## scope = character
alias[trigger:does_ai_liege_in_vassal_contract_desire_obligation_change] = bool

### Does the AI vassal in a vassal contract desire changing an obligation level
## scope = character
alias[trigger:does_ai_vassal_in_vassal_contract_desire_obligation_change] = bool

### employs_tax_collector = yes
### Does the scoped character have any Tax Collectors employed?
## scope = character
alias[trigger:employs_tax_collector] = bool

### Does the scoped character has an active diarchy
## scope = character
alias[trigger:has_active_diarchy] = bool

### does the scoped character have any artifacts?
## scope = character
alias[trigger:has_any_artifact] = bool

### does the scoped character have any artifact claims at all? ( CHEAP )
## scope = character
alias[trigger:has_any_artifact_claim] = bool

### does the scope character have any casus bellis on the taget character?
## scope = character
alias[trigger:has_any_cb_on] = scope[character]

### does the scoped character have any court positions?
## scope = character
alias[trigger:has_any_court_position] = bool

### does the scope character have any casus bellis on the taget character that should be displayed? (Allowed to fail valid_to_start_display_regardless)
## scope = character
alias[trigger:has_any_display_cb_on] = scope[character]

### Does the character have any focus set?
## scope = character
alias[trigger:has_any_focus] = bool

### Has the scope character any nickname?
## scope = character
alias[trigger:has_any_nickname] = bool

### does the scope character have any scripted relation with the taget character?
## scope = character
alias[trigger:has_any_scripted_relation] = scope[character]

### does the scope character have any secret relation with the taget character?
## scope = character
alias[trigger:has_any_secret_relation] = scope[character]

### Does the character have any secrets?
## scope = character
alias[trigger:has_any_secrets] = bool

### does the scoped character have any unequipped artifacts?
## scope = character
alias[trigger:has_any_unequipped_artifact] = bool

### Has scoped investor supported appointment of target character in the same realm.
### Ignores if candidate has a valid reason to be appointed
### scope:investor = {
### 
### has_appointment_investment_in_character = scope:candidate
### }
## scope = character
alias[trigger:has_appointment_invested_character] = scope[character]

### Has scoped investor supported appointment for target title in the same realm.
### Returns true even for dead candidates, for the sake of efficiency.
### scope:investor = {
### 
### has_appointment_investment_in_title = scope:title
### }
## scope = character
alias[trigger:has_appointment_invested_title] = scope[landed_title]

### Does the scoped character have a personal or house claim on the target artifact
## scope = character
alias[trigger:has_artifact_claim] = scope[artifact]

### Does the scoped character have Hostages abroad?
## scope = character
alias[trigger:has_away_hostages] = bool

### Has the scope character a bad nickname?
## scope = character
alias[trigger:has_bad_nickname] = bool

### Does the character have the banish reason towards the target?
## scope = character
alias[trigger:has_banish_reason] = scope[character]

### does the character have an explicit claim on the target title?
## scope = character
alias[trigger:has_claim_on] = scope[landed_title]

### has_completed_inspiration = bool
### Checks if the scoped character has ever completed an inspiration
## scope = character
alias[trigger:has_completed_inspiration] = bool

### Check if laamp has character as employer?
### scope:actor = { has_contact = SCOPE_CHARACTER }
## scope = character
alias[trigger:has_contact] = scope[character]

### Does character have a council?
## scope = character
alias[trigger:has_council] = bool

### Is the character's court language the language of the target culture?
### has_court_language_of_culture = scope:target_culture
## scope = character
alias[trigger:has_court_language_of_culture] = scope[culture]

### Does the character have this culture?
## scope = character
alias[trigger:has_culture] = scope[culture]

### does the scope character have a dejure claim against the target?
## scope = character
alias[trigger:has_de_jure_claim_on] = scope[character]

### Does the character have the divorce reason towards the target?
## scope = character
alias[trigger:has_divorce_reason] = scope[character]

### Does scoped character have a domicile?
### scope:character = { has_domicile = yes }
## scope = character
alias[trigger:has_domicile] = bool

### Does scoped character have domicile temperament high?
### scope:character = { has_temperament_high = yes }
## scope = character
alias[trigger:has_domicile_temperament_high] = bool

### Does scoped character have domicile temperament low?
### scope:character = { has_temperament_low = yes }
## scope = character
alias[trigger:has_domicile_temperament_low] = bool

### Does scoped character have domicile temperament neutral?
### scope:character = { has_temperament_neutral = yes }
## scope = character
alias[trigger:has_domicile_temperament_neutral] = bool

### does the character have a valid dynasty?
## scope = character
alias[trigger:has_dynasty] = bool

### does the scoped character have any employed court positions?
## scope = character
alias[trigger:has_employed_any_court_position] = bool

### Does the character have the execute reason towards the target?
## scope = character
alias[trigger:has_execute_reason] = scope[character]

### Does the character have this faith?
### has_faith = faith:baltic_pagan
## scope = character
alias[trigger:has_faith] = scope[faith]

### does the character have a valid living father?
## scope = character
alias[trigger:has_father] = bool

### Does the scope character have a council position to fill? (ignoring automatically filled positions)
## scope = character
alias[trigger:has_free_council_slot] = bool

### does the character have a hook on the target, has_hook = <character>
## scope = character
alias[trigger:has_hook] = scope[character]

### does the character have a hook based on the target secret? example use: has_hook_from_secret = scope:saved_secret
## scope = character
alias[trigger:has_hook_from_secret] = scope[secret]

### Does the character have the imprisonment reason towards the target?
## scope = character
alias[trigger:has_imprisonment_reason] = scope[character]

### Does the scoped character uses legitimacy
### has_legitimacy = yes
## scope = character
alias[trigger:has_legitimacy] = bool

### does the character have a valid living mother?
## scope = character
alias[trigger:has_mother] = bool

### Does the character have the obedience reason towards the target?
## scope = character
alias[trigger:has_obedience_reason] = scope[character]

### does the scoped character have any artifact claims that can be pressed? ( EXPENSIVE )
## scope = character
alias[trigger:has_outstanding_artifact_claims] = bool

### Does this character own a scheme?
## scope = character
alias[trigger:has_owned_scheme] = bool

### has_pending_court_events = bool
### Does the character have pending court events? Meaning court events that'll spawn when they next open the royal court view.
### Can only be used on player characters with a royal court.
## scope = character
alias[trigger:has_pending_court_events] = bool

### Does the scoped character have a personal claim on the target artifact
## scope = character
alias[trigger:has_personal_artifact_claim] = scope[artifact]

### Does the given character have any potential knights that could be appointed as Acclaimed Knights?
## scope = character
alias[trigger:has_potential_acclaimed_knights] = bool

### does the character has specific title as his primary title
## scope = character
alias[trigger:has_primary_title] = scope[landed_title]

### Does the character have prisoners?
## scope = character
alias[trigger:has_prisoners] = bool

### Is the scoped character's (top-liege) realm immune to raiding by the target due to having defeated their raid army?
### has_raid_immunity_against = scope:character
## scope = character
alias[trigger:has_raid_immunity_against] = scope[character]

### does the character have raised or gathering armies?
## scope = character
alias[trigger:has_raised_armies] = bool

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_activity_recurrer] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_antiquarian] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_best_friend] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_blood_brother] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_bully] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_court_physician] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_crush] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_event_recurrer] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_favorite_child] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_friend] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_grudge] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_guardian] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_intrigue_mentor] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_intrigue_student] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_lover] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_mentor] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_nemesis] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_nursed_child] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_oaf] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_old_flame] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_potential_friend] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_potential_hook] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_potential_lover] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_potential_rival] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_rival] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_soldier_friend] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_soulmate] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_student] = scope[character]

### does the character have a relation to the target? Matches the logic of the data system function HasRelationTo, has_relation_to = <character>
## scope = character
alias[trigger:has_relation_to] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_victim] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_ward] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_wedding_bad_fertility] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_wedding_good_fertility] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_wedding_very_bad_fertility] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_wedding_very_good_fertility] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_wet_nurse] = scope[character]

### Does the character have this religion?
### has_religion = religion:buddhism_religion
## scope = character
alias[trigger:has_religion] = scope[religion]

### Does the character have the revoke title reason towards the target?
## scope = character
alias[trigger:has_revoke_title_reason] = scope[character]

### has_royal_court = bool
### Does the scoped character have a royal court
## scope = character
alias[trigger:has_royal_court] = bool

### Is the character's court language the same language as the target character's?
### has_same_court_language = scope:target_character
## scope = character
alias[trigger:has_same_court_language] = scope[character]

### has_same_court_type_as = character
### Does the character have the same court type as the target?
## scope = character
alias[trigger:has_same_court_type_as] = scope[character]

### Does the character have the same culture as the target?
## scope = character
alias[trigger:has_same_culture_as] = scope[character]

### Does the character have the same focus as the other?
## scope = character
alias[trigger:has_same_focus_as] = scope[character]

### checks if the character has the same government type as another character
## scope = character
alias[trigger:has_same_government] = scope[character]

### do the two characters share a trait that is considered sinful by both of their respective faiths?
### scope:character_1 = { has_same_sinful_trait = scope:character_2 }
## scope = character
alias[trigger:has_same_sinful_trait] = scope[character]

### do the two characters share a trait that is considered virtuous by both of their respective faiths?
### scope:character_1 = { has_same_virtue_trait = scope:character_2 }
## scope = character
alias[trigger:has_same_virtue_trait] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_activity_recurrer] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_antiquarian] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_best_friend] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_blood_brother] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_bully] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_court_physician] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_crush] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_event_recurrer] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_favorite_child] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_friend] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_grudge] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_guardian] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_intrigue_mentor] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_intrigue_student] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_lover] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_mentor] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_nemesis] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_nursed_child] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_oaf] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_old_flame] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_potential_friend] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_potential_hook] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_potential_lover] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_potential_rival] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_rival] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_soldier_friend] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_soulmate] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_student] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_victim] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_ward] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_wedding_bad_fertility] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_wedding_good_fertility] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_wedding_very_bad_fertility] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_wedding_very_good_fertility] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_wet_nurse] = scope[character]

### has_spawned_court_events = bool
### Does the character have spawned court events? Meaning court events are shown (opened or not) in the royal court view.
### Can only be used on player characters with a royal court.
## scope = character
alias[trigger:has_spawned_court_events] = bool

### does the character have an explicit Pressed Claim on the target title?
## scope = character
alias[trigger:has_strong_claim_on] = scope[landed_title]

### does the character have a strong hook on the target, has_strong_hook = <character>
## scope = character
alias[trigger:has_strong_hook] = scope[character]

### does the character have an implicit Pressed Claim on the target title
## scope = character
alias[trigger:has_strong_implicit_claim_on] = scope[landed_title]

### does the character have a strong hook on the target that is not on cooldown, has_strong_usable_hook = <character>
## scope = character
alias[trigger:has_strong_usable_hook] = scope[character]

### Does the scope the scoped character have any investors for their appointment towards the target title?
### scope:character = { has_succession_appointment_investors = scope:title }
## scope = character
alias[trigger:has_succession_appointment_investors] = scope[landed_title]

### Has the scope character a faction targeting him/her?
## scope = character
alias[trigger:has_targeting_faction] = bool

### does the character hold the title?
## scope = character
alias[trigger:has_title] = scope[landed_title]

### Does the scope character have a truce with the target character? Truces are one way, which means we ask if the scope character can't attack the target character
## scope = character
alias[trigger:has_truce] = scope[character]

### does the character have a hook on the target that isn't on cooldown, has_usable_hook = <character>
## scope = character
alias[trigger:has_usable_hook] = scope[character]

### does the character have an explicit Unpressed Claim on the target title?
## scope = character
alias[trigger:has_weak_claim_on] = scope[landed_title]

### does the character have a weak hook on the target. A strong hook will *not* count, has_weak_hook = <character>
## scope = character
alias[trigger:has_weak_hook] = scope[character]

### does the character have an implicit Unpressed Claim on the target title
## scope = character
alias[trigger:has_weak_implicit_claim_on] = scope[landed_title]

### Is the scope character landed (holds a county or barony)?
## scope = character
alias[trigger:holds_landed_title] = bool

### Is the scope character and the target character within each others diplomatic range?
## scope = character
alias[trigger:in_diplomatic_range] = scope[character]

### Is the scope character a leader of a faction?
## scope = character
alias[trigger:is_a_faction_leader] = bool

### Is the scope character a member of a faction?
## scope = character
alias[trigger:is_a_faction_member] = bool

### Is the given character the Acclaimed Knight of an Accolade?
## scope = character
alias[trigger:is_acclaimed] = bool

### Is the given character the Successor of an Accolade?
## scope = character
alias[trigger:is_accolade_successor] = bool

### Is the scope character adult?
## scope = character
alias[trigger:is_adult] = bool

### Is the scope character an exposed agent in the target scheme?
## scope = character
alias[trigger:is_agent_exposed_in_scheme] = scope[scheme]

### is the character played by AI?
## scope = character
alias[trigger:is_ai] = bool

### is the character alive or dead?
## scope = character
alias[trigger:is_alive] = bool

### Is the scope character allied to the target character in a war?
## scope = character
alias[trigger:is_allied_in_war] = scope[character]

### Is the scope character allied to the target character?
## scope = character
alias[trigger:is_allied_to] = scope[character]

### is the character at home?
## scope = character
alias[trigger:is_at_home] = bool

### Is the character currently in the target province?
## scope = character
alias[trigger:is_at_location] = scope[province]

### Is the character currently in the same province as the target character?
## scope = character
alias[trigger:is_at_same_location] = scope[character]

### is the character at war? Does not consider your lieges' wars
## scope = character
alias[trigger:is_at_war] = bool

### is the character at war as an attacker? Does not consider your lieges' wars
## scope = character
alias[trigger:is_at_war_as_attacker] = bool

### is the character at war as a defender? Does not consider your lieges' wars
## scope = character
alias[trigger:is_at_war_as_defender] = bool

### Is the character at war with the target? Does not consider your lieges' wars
## scope = character
alias[trigger:is_at_war_with] = scope[character]

### is the character at war with their liege?
## scope = character
alias[trigger:is_at_war_with_liege] = bool

### is the scope character in the target war as an attacker?
## scope = character
alias[trigger:is_attacker_in_war] = scope[war]

### does the sexuality of the scope character make them attracted to the target character?
## scope = character
alias[trigger:is_attracted_to_gender_of] = scope[character]

### Is the character attracted to men?
## scope = character
alias[trigger:is_attracted_to_men] = bool

### Is the character attracted to women?
## scope = character
alias[trigger:is_attracted_to_women] = bool

### Is the character away from the court?
## scope = character
alias[trigger:is_away_from_court] = bool

### Is the scope character betrothed?
## scope = character
alias[trigger:is_betrothed] = bool

### Is the scoped character making the target hostile due to having raided their (top-liege's) realm?
### is_causing_raid_hostility_towards = scope:character
## scope = character
alias[trigger:is_causing_raid_hostility_towards] = scope[character]

### Is the local player the main character in the character window?
### An interface trigger, can only be used in specific places
## scope = character
alias[trigger:is_character_window_main_character] = bool

### Is the character a child of the target character?
## scope = character
alias[trigger:is_child_of] = scope[character]

### is the character a claimant to any landed titles?
## scope = character
alias[trigger:is_claimant] = bool

### Is the scoped character a clergy?
## scope = character
alias[trigger:is_clergy] = bool

### Is the character a close family [parents, children, siblings, grandparents, grandchildren] of the target character?
## scope = character
alias[trigger:is_close_family_of] = scope[character]

### Is the character a close or extended family [parents, children, siblings, grandparents, grandchildren, cousins, uncles, aunts, nephews, nieces] of the target character?
## scope = character
alias[trigger:is_close_or_extended_family_of] = scope[character]

### is the character a commanding an army?
## scope = character
alias[trigger:is_commanding_army] = bool

### Is the scope character a concubine?
## scope = character
alias[trigger:is_concubine] = bool

### Is the target character a concubine of the scope character?
## scope = character
alias[trigger:is_concubine_of] = scope[character]

### Is the scoped character a member of a confederation?
## scope = character
alias[trigger:is_confederation_member] = bool

### Is the character a spouse or concubine of the target character?
## scope = character
alias[trigger:is_consort_of] = scope[character]

### Check if character is employer of laamp
### scope:actor = { is_contact_of = SCOPE_CHARACTER }
## scope = character
alias[trigger:is_contact_of] = scope[character]

### Is the scoped character a councillor?
## scope = character
alias[trigger:is_councillor] = bool

### Is the scoped character a councillor for the specified character?
## scope = character
alias[trigger:is_councillor_of] = scope[character]

### Is the scope character a courtier?
## scope = character
alias[trigger:is_courtier] = bool

### Is the scope character a courtier of the target character?
## scope = character
alias[trigger:is_courtier_of] = scope[character]

### Is the character a cousin of the target character?
## scope = character
alias[trigger:is_cousin_of] = scope[character]

### is the scope character in the target war as a defender?
## scope = character
alias[trigger:is_defender_in_war] = scope[war]

### Is the scoped character was diesignated as diarch by their liege?
### scope:character = { is_designated_diarch = yes/no }
## scope = character
alias[trigger:is_designated_diarch] = bool

### Is the scoped character currently an active diarch of anyone?
### scope:character = { is_diarch = yes/no }
## scope = character
alias[trigger:is_diarch] = bool

### Is the scoped character currently an active diarch of the target?
### scope:character = { is_diarch_of_target = scope:liege }
## scope = character
alias[trigger:is_diarch_of_target] = scope[character]

### Is the scoped character next in the line of succession for diarchy?
## scope = character
alias[trigger:is_diarchy_successor] = bool

### Is the target character a courtier of the scope character?
## scope = character
alias[trigger:is_employer_of] = scope[character]

### Is the character a extended family [cousins, uncles, aunts, nephews, nieces] of the target character?
## scope = character
alias[trigger:is_extended_family_of] = scope[character]

### is the character their liege's favorite child?
## scope = character
alias[trigger:is_favorite_child] = bool

### Is the scope character female?
## scope = character
alias[trigger:is_female] = bool

### Is the scope character forbidden from the target scheme?
## scope = character
alias[trigger:is_forbidden_from_scheme] = scope[scheme]

### Is the scope character forced to be part of a faction?
## scope = character
alias[trigger:is_forced_into_faction] = bool

### Checks if the scope character is forced into the target scheme
## scope = character
alias[trigger:is_forced_into_scheme] = scope[scheme]

### Is the character a guest from another a court? In contrast to is_pool_guest the character has a liege
## scope = character
alias[trigger:is_foreign_court_guest] = bool

### Is the character a guest from another a court, visiting the target character's court? In contrast to is_pool_guest_of the character has a liege
## scope = character
alias[trigger:is_foreign_court_guest_of] = scope[character]

### Is the character a guest? (is_pool_guest or is_foreign_court_guest)
## scope = character
alias[trigger:is_foreign_court_or_pool_guest] = bool

### Is the character a guest? (is_pool_guest_of or is_foreign_court_guest_of)
## scope = character
alias[trigger:is_foreign_court_or_pool_guest_of] = scope[character]

### Was this character made from the ruler designer
## scope = character
alias[trigger:is_from_ruler_designer] = bool

### Is the character a grandchild of the target character?
## scope = character
alias[trigger:is_grandchild_of] = scope[character]

### Is the character a grandparent of the target character?
## scope = character
alias[trigger:is_grandparent_of] = scope[character]

### Is the character a great grandchild of the target character?
## scope = character
alias[trigger:is_great_grandchild_of] = scope[character]

### Is the character a great grandparent of the target character?
## scope = character
alias[trigger:is_great_grandparent_of] = scope[character]

### Is the character an heir of the target [placeholder]?
## scope = character
alias[trigger:is_heir_of] = scope[character]

### Is the scoped character a Hostage?
## scope = character
alias[trigger:is_hostage] = bool

### Is the scope character a Hostage with target character as their original Liege? is_hostage_from = TARGET
## scope = character
alias[trigger:is_hostage_from] = scope[character]

### Is the scope character a Hostage with target character as their Warden? is_hostage_of = TARGET
## scope = character
alias[trigger:is_hostage_of] = scope[character]

### Is the scoped character a Warden with Hostages?
## scope = character
alias[trigger:is_hostage_warden] = bool

### Is the character immortal?
## scope = character
alias[trigger:is_immortal] = bool

### is the character imprisoned?
## scope = character
alias[trigger:is_imprisoned] = bool

### Is the scope character imprisoned by the target character? is_imprisoned_by = TARGET
## scope = character
alias[trigger:is_imprisoned_by] = scope[character]

### is the character in an army (a commander or a knight)?
## scope = character
alias[trigger:is_in_army] = bool

### is the character at war with their liege, or one or more of their vassals?
## scope = character
alias[trigger:is_in_civil_war] = bool

### is the character in an ongoing (i.e. the war has started) great holy war?
## scope = character
alias[trigger:is_in_ongoing_great_holy_war] = bool

### Is the character in the pool the target province is a part of
## scope = character
alias[trigger:is_in_pool_at] = scope[province]

### Is the character in the same court as the target character (they have the same court owner or one is a courtier of the other)?
## scope = character
alias[trigger:is_in_the_same_court_as] = scope[character]

### Is the character in the same court as the target character (they have the same court owner or one is a courtier of the other)? Includes guests in the court.
## scope = character
alias[trigger:is_in_the_same_court_as_or_guest] = scope[character]

### is the character incapable?
## scope = character
alias[trigger:is_incapable] = bool

### is the character an independent ruler?
## scope = character
alias[trigger:is_independent_ruler] = bool

### Is the scoped character a knight
## scope = character
alias[trigger:is_knight] = bool

### Is the scoped character a knight of the target character
## scope = character
alias[trigger:is_knight_of] = scope[character]

### Is the scope character landed (holds a county or barony)?
## scope = character
alias[trigger:is_landed] = bool

### Is the scope character a landless ruler (holds any title, but no on-map land)?
## scope = character
alias[trigger:is_landless_ruler] = bool

### is the scope character leading one of the sides in the target war?
## scope = character
alias[trigger:is_leader_in_war] = scope[war]

### is the scope character a liege or above of the target character?
## scope = character
alias[trigger:is_liege_or_above_of] = scope[character]

### is the character the local player?
### An interface trigger, can only be used in specific places
## scope = character
alias[trigger:is_local_player] = bool

### Is the character a lowborn?
## scope = character
alias[trigger:is_lowborn] = bool

### Is the scope character male?
## scope = character
alias[trigger:is_male] = bool

### Is the scope character married?
## scope = character
alias[trigger:is_married] = bool

### Is the scoped character a member of the target confederation?
## scope = character
alias[trigger:is_member_of_confederation] = scope[confederation]

### Is the character currently migrating?
## scope = character
alias[trigger:is_migrating] = bool

### Is the character a nibling (niece/nephew) of the target character?
## scope = character
alias[trigger:is_nibling_of] = scope[character]

### Is the scoped character a regular councillor?
## scope = character
alias[trigger:is_normal_councillor] = bool

### Is the scope character obedient?
## scope = character
alias[trigger:is_obedient] = bool

### Is the scope character obedient to the target character?
## scope = character
alias[trigger:is_obedient_to] = scope[character]

### Is the scoped character overriding the winner in the GHW they're pledged to (will put their beneficiary on the throne if they're top participant)?
## scope = character
alias[trigger:is_overriding_designated_winner] = bool

### Is the character a parent of the target character?
## scope = character
alias[trigger:is_parent_of] = scope[character]

### is_participant_in_activity = target_activity
### Is the scoped character a participant in the target activity
## scope = character
alias[trigger:is_participant_in_activity] = scope[activity]

### is the scope character participating in the target war as an attacker or defender?
## scope = character
alias[trigger:is_participant_in_war] = scope[war]

### Is the scope character the player heir of the target character?
## scope = character
alias[trigger:is_player_heir_of] = scope[character]

### Is the scoped character a pledged attacker in the current GHW (it's an error to check this if there's no GHW around)
## scope = character
alias[trigger:is_pledged_ghw_attacker] = bool

### Is the character in the pool? (not a ruler, courtier or guest at any court)
## scope = character
alias[trigger:is_pool_character] = bool

### Is the character a guest from the pool? In contrast to is_foreign_court_guest the character has no liege
## scope = character
alias[trigger:is_pool_guest] = bool

### Is the character a guest from the pool, visiting the target character's court? In contrast to is_foreign_court_guest_of the character has no liege
## scope = character
alias[trigger:is_pool_guest_of] = scope[character]

### Is the scoped character a POTENTIAL knight to their liege?
## scope = character
alias[trigger:is_potential_knight] = bool

### Is the character a powerful vassal?
## scope = character
alias[trigger:is_powerful_vassal] = bool

### Is the character a powerful vassal of the target?
## scope = character
alias[trigger:is_powerful_vassal_of] = scope[character]

### is the character pregnant?
## scope = character
alias[trigger:is_pregnant] = bool

### Is the character the heir of the target's primary title?
## scope = character
alias[trigger:is_primary_heir_of] = scope[character]

### Is the scope character a ruler (holds any title)?
## scope = character
alias[trigger:is_ruler] = bool

### Is the character a sibling of the target character?
## scope = character
alias[trigger:is_sibling_of] = scope[character]

### Is the character a spouse of the target character, and are both alive?
## scope = character
alias[trigger:is_spouse_of] = scope[character]

### Is the character a spouse of the target character, even if one or both are dead?
## scope = character
alias[trigger:is_spouse_of_even_if_dead] = scope[character]

### Is the scoped character the successor of a given Accolade?
### is_successor_of_accolade = accolade
## scope = character
alias[trigger:is_successor_of_accolade] = scope[accolade]

### Is this scope character a tax collector?
### scope:character = { is_tax_collector = yes/no }
## scope = character
alias[trigger:is_tax_collector] = bool

### Is the scoped character a tax collector of the target character
## scope = character
alias[trigger:is_tax_collector_of] = scope[character]

### Is the scope character a theocratic lessee (bishop)?
## scope = character
alias[trigger:is_theocratic_lessee] = bool

### Is the character travelling and part of the entourage? (travel leader is part of the entourage)
## scope = character
alias[trigger:is_travel_entourage_character] = bool

### Is the character travelling and the active travel leader?
## scope = character
alias[trigger:is_travel_leader] = bool

### Is the character currently travelling?
## scope = character
alias[trigger:is_travelling] = bool

### Is the scoped character someone else's tributary?
## scope = character
alias[trigger:is_tributary] = bool

### Is the scoped character a direct tributary of the target character?
## scope = character
alias[trigger:is_tributary_of] = scope[character]

### Is the scoped character a direct or indirect tributary of the target character due to cascading tributaries?
## scope = character
alias[trigger:is_tributary_of_suzerain_or_above] = scope[character]

### Is the character a twin of the target character?
## scope = character
alias[trigger:is_twin_of] = scope[character]

### Is the unborn a child of a concubine?
## scope = character
alias[trigger:is_unborn_child_of_concubine] = bool

### Is the unborn a known bastard?
## scope = character
alias[trigger:is_unborn_known_bastard] = bool

### Is the character an uncle or aunt of the target character?
## scope = character
alias[trigger:is_uncle_or_aunt_of] = scope[character]

### Is the scope character suitable as an agent for any slot in target scheme?
## scope = character
alias[trigger:is_valid_as_agent_in_any_slot] = scope[scheme]

### Is the scope character suitable as an agent for the target agent slot?
## scope = character
alias[trigger:is_valid_as_agent_in_slot] = scope[agent_slot]

### Is the target character a valid potential designated heir of the scoped character?
### (can they inherit one or more of the titles the scoped character holds?)
### is_valid_designated_heir = scope:target_character
## scope = character
alias[trigger:is_valid_designated_heir] = scope[character]

### Is the scoped character a valid candidate to take over as successor of this Accolade?
### is_valid_successor_for_accolade = accolade
## scope = character
alias[trigger:is_valid_successor_for_accolade] = scope[accolade]

### Is the character a direct vassal of the target character?
## scope = character
alias[trigger:is_vassal_of] = scope[character]

### is the scope character a vassal or below of the target character? Non-rulers are not considered vassals
## scope = character
alias[trigger:is_vassal_or_below_of] = scope[character]

### Is the scoped character visibly fertile, that is: not too old if a woman, not too young and has no traits blocking having children
## scope = character
alias[trigger:is_visibly_fertile] = bool

### Does the character know the court language of the target character?
### knows_court_language_of = scope:target_character
## scope = character
alias[trigger:knows_court_language_of] = scope[character]

### Does the character know the language of the target culture?
### knows_language_of_culture = scope:target_culture
## scope = character
alias[trigger:knows_language_of_culture] = scope[culture]

### Is this character's betrothal matrilinear? False if there's no betrothal.
## scope = character
alias[trigger:matrilinear_betrothal] = bool

### Is the marriage with the spouse matrilinear?
## scope = character
alias[trigger:matrilinear_marriage] = bool

### checks whether the scope character is the owner of any currently active story
## scope = character
alias[trigger:owns_a_story] = bool

### Is this character's betrothal patrilinear? False if there's no betrothal.
## scope = character
alias[trigger:patrilinear_betrothal] = bool

### Is the marriage with the spouse patrilinear?
## scope = character
alias[trigger:patrilinear_marriage] = bool

### can the character marry the target character?
## scope = character
alias[trigger:scriptedtests_can_marry_character] = scope[character]

### Are the scope character the target character of the opposite sex?
## scope = character
alias[trigger:sex_opposite_of] = scope[character]

### Are the scope character the target character of the same sex?
## scope = character
alias[trigger:sex_same_as] = scope[character]

### Can the scoped character break the tributary it is currently a subject in?
## scope = character
alias[trigger:subject_can_break_tributary] = bool

### Can the scoped character's subject contract be modified at all, that is: they have one, they use obligation levels, and are count or above
## scope = character
alias[trigger:subject_contract_has_modifiable_obligations] = bool

### Has the scoped character's contract been blocked from modification by script via 'set_subject_contract_modification_blocked'
## scope = character
alias[trigger:subject_contract_is_blocked_from_modification] = bool

### is the target character the liege or above the scope character?
## scope = character
alias[trigger:target_is_liege_or_above] = scope[character]

### is the target character the the same character or above (in the vassal hierarchy) the scope character?
## scope = character
alias[trigger:target_is_same_character_or_above] = scope[character]

### is the target character a vassal or below of the scope character? Non-rulers are not considered vassals
## scope = character
alias[trigger:target_is_vassal_or_below] = scope[character]

### Can the scoped character's vassal contract be modified at all, that is: they have one, they use obligation levels, and are count or above
## scope = character
alias[trigger:vassal_contract_has_modifiable_obligations] = bool

### Was the scoped character a Hostage as a Child?
## scope = character
alias[trigger:was_hostage_child] = bool

### Can the scoped title be leased out?
## scope = landed_title
alias[trigger:can_be_leased_out] = bool

### Can the scope title join the faction? can_title_join_faction = faction
## scope = landed_title
alias[trigger:can_title_join_faction] = scope[faction]

### Is the scoped landed title de jure drifts toward another title?<drifting_title> = { de_jure_drifting_towards = <drift_target_title> }
## scope = landed_title
alias[trigger:de_jure_drifting_towards] = scope[landed_title]

### Has the target character nominated a successor for the scoped elective title
## scope = landed_title
alias[trigger:has_character_nominiated] = scope[character]

### Is the scope landed title connected to a holding that contains at least one disabled building?
## scope = landed_title
alias[trigger:has_disabled_building] = bool

### Is the title under a lease that can be revoked manually?
## scope = landed_title
alias[trigger:has_revokable_lease] = bool

### Has the user set a specific coat of arms for this title?
## scope = landed_title
alias[trigger:has_user_set_coa] = bool

### Is the scope landed title connected to a holding that cannot be governed by the current lessee or holder?
## scope = landed_title
alias[trigger:has_wrong_holding_type] = bool

### Is title in the scope a capital barony?
## scope = landed_title
alias[trigger:is_capital_barony] = bool

### Is the county coastal (next to sea, not including lakes)?
## scope = landed_title
alias[trigger:is_coastal_county] = bool

### Is the scope landed title contested in any war?
## scope = landed_title
alias[trigger:is_contested] = bool

### is the title de facto liege or above the target title?
## scope = landed_title
alias[trigger:is_de_facto_liege_or_above_target] = scope[landed_title]

### is the title de jure liege or above the target title?
## scope = landed_title
alias[trigger:is_de_jure_liege_or_above_target] = scope[landed_title]

### Is this title a head of faith title
## scope = landed_title
alias[trigger:is_head_of_faith] = bool

### Is the scope landed title a holy order?
## scope = landed_title
alias[trigger:is_holy_order] = bool

### Is the barony a holy site of any faith? is_holy_site = yes
## scope = landed_title
alias[trigger:is_holy_site] = bool

### Does the target character control a holy site of the scoped object
### is_holy_site_controlled_by = root
## scope = landed_title
alias[trigger:is_holy_site_controlled_by] = scope[character]

### Is the barony a holy site of the given faith? is_holy_site_of = some faith
## scope = landed_title
alias[trigger:is_holy_site_of] = scope[faith]

### Is the scoped county important for target title?
### scope:county = { is_important_location = scope:title }
## scope = landed_title
alias[trigger:is_important_location] = scope[landed_title]

### Is the county next to a lake?
## scope = landed_title
alias[trigger:is_lakeside_county] = bool

### Is this title considered a landless type title?
## scope = landed_title
alias[trigger:is_landless_type_title] = bool

### Is the scoped title leased out?
## scope = landed_title
alias[trigger:is_leased_out] = bool

### Is the scope landed title a mercenary company?
## scope = landed_title
alias[trigger:is_mercenary_company] = bool

### Is the scoped Landed Title currently target of a migration? Is a nomadic ruler migrating in any county of this Title?
### This trigger will evaluate as true if a Migration exists that either:
### * targets the title in scope
### * targets any of its De Jure Lieges
### * targets one of its De Jure Vassals
### usage:
### <scope:title> = {
### 
### is_migration_target = yes/no
### }
## scope = landed_title
alias[trigger:is_migration_target] = bool

### Is this landed title adjacent to the character's realm
### is_neighbor_to_realm = character
## scope = landed_title
alias[trigger:is_neighbor_to_realm] = scope[character]

### Is this title used by noble family to allow landless playable
## scope = landed_title
alias[trigger:is_noble_family_title] = bool

### Is this title used by a nomad to allow landless playable
## scope = landed_title
alias[trigger:is_nomad_title] = bool

### Is the county riverside?
## scope = landed_title
alias[trigger:is_riverside_county] = bool

### Is title in the scope created?
## scope = landed_title
alias[trigger:is_title_created] = bool

### Is this title titular (has no dejure counties in it, and is not a barony/county)?
## scope = landed_title
alias[trigger:is_titular] = bool

### Is the scoped title leased out to any holy order?
## scope = landed_title
alias[trigger:is_under_holy_order_lease] = bool

### is the target title de facto liege or above?
## scope = landed_title
alias[trigger:target_is_de_facto_liege_or_above] = scope[landed_title]

### is the target title de jure liege or above?
## scope = landed_title
alias[trigger:target_is_de_jure_liege_or_above] = scope[landed_title]

### Is the scope title a member of a faction?
## scope = landed_title
alias[trigger:title_is_a_faction_member] = bool

### Will the title leave the sub-realm of the character on the right-hand-side upon succession? That is, is the first heir in someone outside the sub-realm, and the highest tier title they'll inherit from the person holding the title is not higher than their current tier
## scope = landed_title
alias[trigger:title_will_leave_sub_realm_on_succession] = scope[character]

### Does the scoped county title use County Fertility?
### uses_county_fertility = yes/no
## scope = landed_title
alias[trigger:uses_county_fertility] = bool

### Can the scope faction press demands?
## scope = faction
alias[trigger:faction_can_press_demands] = bool

### Is the scope faction at war?
## scope = faction
alias[trigger:faction_is_at_war] = bool

### Has the faction a special character assigned?
## scope = faction
alias[trigger:has_special_character] = bool

### Has the faction a special title assigned?
## scope = faction
alias[trigger:has_special_title] = bool

### Is this side allowed to retreat early (when losing)? (set via script effect `set_allow_early_retreat = yes`)
### allow_early_retreat = yes
## scope = combat_side
alias[trigger:allow_early_retreat] = bool

### Is this side disallowed from retreating via script? (via effect `set_disallowed_retreat = yes`)
### disallowed_retreat = yes
## scope = combat_side
alias[trigger:disallowed_retreat] = bool

### whether the combat side was the attacker or not
## scope = combat_side
alias[trigger:is_combat_side_attacker] = bool

### is this side the winner of the combat
## scope = combat_side
alias[trigger:is_combat_side_pursuing] = bool

### is this side defeated in the combat
## scope = combat_side
alias[trigger:is_combat_side_retreating] = bool

### is this side the forced winner of the combat? (via `forced_winner = yes`)
### is_forced_winner = yes
## scope = combat_side
alias[trigger:is_forced_winner] = bool

### Is this side skipping the persuit phase (if losing)? (set via script effect `set_skip_pursuit = yes`)
### skip_pursuit = yes
## scope = combat_side
alias[trigger:skip_pursuit] = bool

### Does the scoped domicile use culture and faith?
## scope = domicile
alias[trigger:domicile_uses_culture_and_faith] = bool

### Does the scoped domicile use provisions?
## scope = domicile
alias[trigger:domicile_uses_provisions] = bool

### Does the scoped domicile have an ongoing construction?)
### scope:domicile = {
### 
### has_ongoing_construction = yes/no
### }
## scope = domicile
alias[trigger:has_ongoing_domicile_construction] = bool

### does the dynasty has the required number of unlocked dynasty perks?
## scope = dynasty
alias[trigger:dynasty_num_unlocked_perks] == alias_keys_field[int_value]

### does the dynasty has the required number of unlocked dynasty perks?
## scope = dynasty
alias[trigger:dynasty_num_unlocked_perks] == single_alias_right[score_formula]

### does the dynasty has the required number of unlocked dynasty perks?
## scope = dynasty
alias[trigger:dynasty_num_unlocked_perks] == value_field

### does the dynasty have the required prestige?
## scope = dynasty
alias[trigger:dynasty_prestige] == alias_keys_field[int_value]

### does the dynasty have the required prestige?
## scope = dynasty
alias[trigger:dynasty_prestige] == single_alias_right[score_formula]

### does the dynasty have the required prestige?
## scope = dynasty
alias[trigger:dynasty_prestige] == value_field

### does the dynasty have the required prestige level?
## scope = dynasty
alias[trigger:dynasty_prestige_level] == alias_keys_field[int_value]

### does the dynasty have the required prestige level?
## scope = dynasty
alias[trigger:dynasty_prestige_level] == single_alias_right[score_formula]

### does the dynasty have the required prestige level?
## scope = dynasty
alias[trigger:dynasty_prestige_level] == value_field

### The number of future phases for the scoped activity.
### num_future_phases > 5
## scope = activity
alias[trigger:num_future_phases] == alias_keys_field[int_value]

### The number of future phases for the scoped activity.
### num_future_phases > 5
## scope = activity
alias[trigger:num_future_phases] == single_alias_right[score_formula]

### The number of future phases for the scoped activity.
### num_future_phases > 5
## scope = activity
alias[trigger:num_future_phases] == value_field

### The number of past phases for the scoped activity.
### num_past_phases > 5
## scope = activity
alias[trigger:num_past_phases] == alias_keys_field[int_value]

### The number of past phases for the scoped activity.
### num_past_phases > 5
## scope = activity
alias[trigger:num_past_phases] == single_alias_right[score_formula]

### The number of past phases for the scoped activity.
### num_past_phases > 5
## scope = activity
alias[trigger:num_past_phases] == value_field

### The number total number of planned phases for the scoped activity.
### num_phases > 5
## scope = activity
alias[trigger:num_phases] == alias_keys_field[int_value]

### The number total number of planned phases for the scoped activity.
### num_phases > 5
## scope = activity
alias[trigger:num_phases] == single_alias_right[score_formula]

### The number total number of planned phases for the scoped activity.
### num_phases > 5
## scope = activity
alias[trigger:num_phases] == value_field

### Checks the age of the scope culture in years. If the culture has no creation date set, this will simply return the current year
### culture_age >= 200
## scope = culture
alias[trigger:culture_age] == alias_keys_field[int_value]

### Checks the age of the scope culture in years. If the culture has no creation date set, this will simply return the current year
### culture_age >= 200
## scope = culture
alias[trigger:culture_age] == single_alias_right[score_formula]

### Checks the age of the scope culture in years. If the culture has no creation date set, this will simply return the current year
### culture_age >= 200
## scope = culture
alias[trigger:culture_age] == value_field

### How many counties are there of this culture?
### culture_number_of_counties > 10
## scope = culture
alias[trigger:culture_number_of_counties] == alias_keys_field[int_value]

### How many counties are there of this culture?
### culture_number_of_counties > 10
## scope = culture
alias[trigger:culture_number_of_counties] == single_alias_right[score_formula]

### How many counties are there of this culture?
### culture_number_of_counties > 10
## scope = culture
alias[trigger:culture_number_of_counties] == value_field

### How many free tradition slot are in the scoped culturescope:culture = { free_tradition_slot > 1 }
## scope = culture
alias[trigger:free_tradition_slot] == alias_keys_field[int_value]

### How many free tradition slot are in the scoped culturescope:culture = { free_tradition_slot > 1 }
## scope = culture
alias[trigger:free_tradition_slot] == single_alias_right[score_formula]

### How many free tradition slot are in the scoped culturescope:culture = { free_tradition_slot > 1 }
## scope = culture
alias[trigger:free_tradition_slot] == value_field

### Does the culture have the required number of discovered innovations?
### num_discovered_innovations > 20
## scope = culture
alias[trigger:num_discovered_innovations] == alias_keys_field[int_value]

### Does the culture have the required number of discovered innovations?
### num_discovered_innovations > 20
## scope = culture
alias[trigger:num_discovered_innovations] == single_alias_right[score_formula]

### Does the culture have the required number of discovered innovations?
### num_discovered_innovations > 20
## scope = culture
alias[trigger:num_discovered_innovations] == value_field

### Does the scoped culture have the required number of active discovered innovations in the specified era?
### num_discovered_innovations_in_era = {
### 
### era = culture_era_early_medieval
### 
### value > 5
### }
### num_discovered_innovations_in_era:culture_era_early_medieval > 15
### num_discovered_innovations_in_era:culture_era_early_medieval > scope:target_culture.num_discovered_innovations_in_era:culture_era_early_medieval
## scope = culture
alias[trigger:num_discovered_innovations_in_era] == alias_keys_field[int_value]

### Does the scoped culture have the required number of active discovered innovations in the specified era?
### num_discovered_innovations_in_era = {
### 
### era = culture_era_early_medieval
### 
### value > 5
### }
### num_discovered_innovations_in_era:culture_era_early_medieval > 15
### num_discovered_innovations_in_era:culture_era_early_medieval > scope:target_culture.num_discovered_innovations_in_era:culture_era_early_medieval
## scope = culture
alias[trigger:num_discovered_innovations_in_era] == single_alias_right[score_formula]

### Does the scoped culture have the required number of active discovered innovations in the specified era?
### num_discovered_innovations_in_era = {
### 
### era = culture_era_early_medieval
### 
### value > 5
### }
### num_discovered_innovations_in_era:culture_era_early_medieval > 15
### num_discovered_innovations_in_era:culture_era_early_medieval > scope:target_culture.num_discovered_innovations_in_era:culture_era_early_medieval
## scope = culture
alias[trigger:num_discovered_innovations_in_era] == value_field

### How many years since the memory was created (rounded down).
## scope = character_memory
alias[trigger:memory_age_years] == alias_keys_field[int_value]

### How many years since the memory was created (rounded down).
## scope = character_memory
alias[trigger:memory_age_years] == single_alias_right[score_formula]

### How many years since the memory was created (rounded down).
## scope = character_memory
alias[trigger:memory_age_years] == value_field

### Get current number of soldiers in MaA regiment
## scope = regiment
alias[trigger:maa_current_troops_count] == alias_keys_field[int_value]

### Get current number of soldiers in MaA regiment
## scope = regiment
alias[trigger:maa_current_troops_count] == single_alias_right[score_formula]

### Get current number of soldiers in MaA regiment
## scope = regiment
alias[trigger:maa_current_troops_count] == value_field

### Get max number of soldiers in MaA regiment
## scope = regiment
alias[trigger:maa_max_troops_count] == alias_keys_field[int_value]

### Get max number of soldiers in MaA regiment
## scope = regiment
alias[trigger:maa_max_troops_count] == single_alias_right[score_formula]

### Get max number of soldiers in MaA regiment
## scope = regiment
alias[trigger:maa_max_troops_count] == value_field

### Get regiment size - number of subregiments in it
## scope = regiment
alias[trigger:maa_size] == alias_keys_field[int_value]

### Get regiment size - number of subregiments in it
## scope = regiment
alias[trigger:maa_size] == single_alias_right[score_formula]

### Get regiment size - number of subregiments in it
## scope = regiment
alias[trigger:maa_size] == value_field

### The score in favour of the vassal for the scoped vassal contract obligation level
### obligation_level_score > 2
## scope = vassal_contract_obligation_level
alias[trigger:obligation_level_score] == alias_keys_field[int_value]

### The score in favour of the vassal for the scoped vassal contract obligation level
### obligation_level_score > 2
## scope = vassal_contract_obligation_level
alias[trigger:obligation_level_score] == single_alias_right[score_formula]

### The score in favour of the vassal for the scoped vassal contract obligation level
### obligation_level_score > 2
## scope = vassal_contract_obligation_level
alias[trigger:obligation_level_score] == value_field

### Number of members in the scoped confederation
## scope = confederation
alias[trigger:member_count] == alias_keys_field[int_value]

### Number of members in the scoped confederation
## scope = confederation
alias[trigger:member_count] == single_alias_right[score_formula]

### Number of members in the scoped confederation
## scope = confederation
alias[trigger:member_count] == value_field

### Calculate share of counties held in the target liege's realm by the house.
### Only rulers of liege's government type counts
### scope:house = {
### 
### house_land_share_in_realm = {
### 
### 
### target = scope:liege
### 
### 
### value > 0.5
### 
### }
### }
## scope = dynasty_house
alias[trigger:house_land_share_in_realm] == alias_keys_field[int_value]

### Calculate share of counties held in the target liege's realm by the house.
### Only rulers of liege's government type counts
### scope:house = {
### 
### house_land_share_in_realm = {
### 
### 
### target = scope:liege
### 
### 
### value > 0.5
### 
### }
### }
## scope = dynasty_house
alias[trigger:house_land_share_in_realm] == single_alias_right[score_formula]

### Calculate share of counties held in the target liege's realm by the house.
### Only rulers of liege's government type counts
### scope:house = {
### 
### house_land_share_in_realm = {
### 
### 
### target = scope:liege
### 
### 
### value > 0.5
### 
### }
### }
## scope = dynasty_house
alias[trigger:house_land_share_in_realm] == value_field

### Compare house power: scope:house = { house_power >= value }
## scope = dynasty_house
alias[trigger:house_power] == alias_keys_field[int_value]

### Compare house power: scope:house = { house_power >= value }
## scope = dynasty_house
alias[trigger:house_power] == single_alias_right[score_formula]

### Compare house power: scope:house = { house_power >= value }
## scope = dynasty_house
alias[trigger:house_power] == value_field

### does the dynasty house have the required house unity value?
## scope = dynasty_house
alias[trigger:house_unity_value] == alias_keys_field[int_value]

### does the dynasty house have the required house unity value?
## scope = dynasty_house
alias[trigger:house_unity_value] == single_alias_right[score_formula]

### does the dynasty house have the required house unity value?
## scope = dynasty_house
alias[trigger:house_unity_value] == value_field

### Tier value for task contract
### scope:task_contract = { task_contract_tier = num }
## scope = task_contract
alias[trigger:task_contract_tier] == alias_keys_field[int_value]

### Tier value for task contract
### scope:task_contract = { task_contract_tier = num }
## scope = task_contract
alias[trigger:task_contract_tier] == single_alias_right[score_formula]

### Tier value for task contract
### scope:task_contract = { task_contract_tier = num }
## scope = task_contract
alias[trigger:task_contract_tier] == value_field

### Days since the task contract was accepted.
## scope = task_contract
alias[trigger:time_since_contract_taken] == alias_keys_field[int_value]

### Days since the task contract was accepted.
## scope = task_contract
alias[trigger:time_since_contract_taken] == single_alias_right[score_formula]

### Days since the task contract was accepted.
## scope = task_contract
alias[trigger:time_since_contract_taken] == value_field

### what size is this army's max size?
## scope = army
alias[trigger:army_max_size] == alias_keys_field[int_value]

### what size is this army's max size?
## scope = army
alias[trigger:army_max_size] == single_alias_right[score_formula]

### what size is this army's max size?
## scope = army
alias[trigger:army_max_size] == value_field

### what size is this army?
## scope = army
alias[trigger:army_size] == alias_keys_field[int_value]

### what size is this army?
## scope = army
alias[trigger:army_size] == single_alias_right[score_formula]

### what size is this army?
## scope = army
alias[trigger:army_size] == value_field

### Can we disband this army?
## scope = army
alias[trigger:army_supply] == alias_keys_field[int_value]

### Can we disband this army?
## scope = army
alias[trigger:army_supply] == single_alias_right[score_formula]

### Can we disband this army?
## scope = army
alias[trigger:army_supply] == value_field

### How much raid loot is the army carrying?
## scope = army
alias[trigger:raid_loot] == alias_keys_field[int_value]

### How much raid loot is the army carrying?
## scope = army
alias[trigger:raid_loot] == single_alias_right[score_formula]

### How much raid loot is the army carrying?
## scope = army
alias[trigger:raid_loot] == value_field

### What is the army's total damage stat in its current location?
## scope = army
alias[trigger:total_army_damage] == alias_keys_field[int_value]

### What is the army's total damage stat in its current location?
## scope = army
alias[trigger:total_army_damage] == single_alias_right[score_formula]

### What is the army's total damage stat in its current location?
## scope = army
alias[trigger:total_army_damage] == value_field

### What is the army's total pursuit stat in its current location?
## scope = army
alias[trigger:total_army_pursuit] == alias_keys_field[int_value]

### What is the army's total pursuit stat in its current location?
## scope = army
alias[trigger:total_army_pursuit] == single_alias_right[score_formula]

### What is the army's total pursuit stat in its current location?
## scope = army
alias[trigger:total_army_pursuit] == value_field

### What is the army's total screen stat in its current location?
## scope = army
alias[trigger:total_army_screen] == alias_keys_field[int_value]

### What is the army's total screen stat in its current location?
## scope = army
alias[trigger:total_army_screen] == single_alias_right[score_formula]

### What is the army's total screen stat in its current location?
## scope = army
alias[trigger:total_army_screen] == value_field

### What is the army's total siege value stat in its current location?
## scope = army
alias[trigger:total_army_siege_value] == alias_keys_field[int_value]

### What is the army's total siege value stat in its current location?
## scope = army
alias[trigger:total_army_siege_value] == single_alias_right[score_formula]

### What is the army's total siege value stat in its current location?
## scope = army
alias[trigger:total_army_siege_value] == value_field

### What is the army's total toughness stat in its current location?
## scope = army
alias[trigger:total_army_toughness] == alias_keys_field[int_value]

### What is the army's total toughness stat in its current location?
## scope = army
alias[trigger:total_army_toughness] == single_alias_right[score_formula]

### What is the army's total toughness stat in its current location?
## scope = army
alias[trigger:total_army_toughness] == value_field

### Danger value of the current province the travel plan is in (-100.0 to +100.0).
## scope = travel_plan
alias[trigger:current_danger_value] == alias_keys_field[int_value]

### Danger value of the current province the travel plan is in (-100.0 to +100.0).
## scope = travel_plan
alias[trigger:current_danger_value] == single_alias_right[score_formula]

### Danger value of the current province the travel plan is in (-100.0 to +100.0).
## scope = travel_plan
alias[trigger:current_danger_value] == value_field

### Compare the date the travel plan started.
## scope = travel_plan
alias[trigger:departure_date] == alias_keys_field[int_value]

### Compare the date the travel plan started.
## scope = travel_plan
alias[trigger:departure_date] == single_alias_right[score_formula]

### Compare the date the travel plan started.
## scope = travel_plan
alias[trigger:departure_date] == value_field

### Estimation of days until we arrive at the final destination?
## scope = travel_plan
alias[trigger:final_destination_arrival_days] == alias_keys_field[int_value]

### Estimation of days until we arrive at the final destination?
## scope = travel_plan
alias[trigger:final_destination_arrival_days] == single_alias_right[score_formula]

### Estimation of days until we arrive at the final destination?
## scope = travel_plan
alias[trigger:final_destination_arrival_days] == value_field

### Time progress (0.0 - 1.0) towards the final destination of the travel plan, compared to departure date from the very start of the Travel Plan.
## scope = travel_plan
alias[trigger:final_destination_progress] == float[0.0..1.0]

### Estimation of days until we arrive at the next destination
## scope = travel_plan
alias[trigger:next_destination_arrival_days] == alias_keys_field[int_value]

### Estimation of days until we arrive at the next destination
## scope = travel_plan
alias[trigger:next_destination_arrival_days] == single_alias_right[score_formula]

### Estimation of days until we arrive at the next destination
## scope = travel_plan
alias[trigger:next_destination_arrival_days] == value_field

### Time progress (0.0 - 1.0) towards the next destination of the travel plan, compared to departure date of the previous destination.
## scope = travel_plan
alias[trigger:next_destination_progress] == float[0.0..1.0]

### Size of the travel plan entourage.
## scope = travel_plan
alias[trigger:num_entourage_characters] == alias_keys_field[int_value]

### Size of the travel plan entourage.
## scope = travel_plan
alias[trigger:num_entourage_characters] == single_alias_right[score_formula]

### Size of the travel plan entourage.
## scope = travel_plan
alias[trigger:num_entourage_characters] == value_field

### Number of travel options selected.
## scope = travel_plan
alias[trigger:num_options] == alias_keys_field[int_value]

### Number of travel options selected.
## scope = travel_plan
alias[trigger:num_options] == single_alias_right[score_formula]

### Number of travel options selected.
## scope = travel_plan
alias[trigger:num_options] == value_field

### Gets the current travel safety for travel
## scope = travel_plan
alias[trigger:travel_safety] == alias_keys_field[int_value]

### Gets the current travel safety for travel
## scope = travel_plan
alias[trigger:travel_safety] == single_alias_right[score_formula]

### Gets the current travel safety for travel
## scope = travel_plan
alias[trigger:travel_safety] == value_field

### Gets the current travel speed for travel (percentage points above 100%)
## scope = travel_plan
alias[trigger:travel_speed] == alias_keys_field[int_value]

### Gets the current travel speed for travel (percentage points above 100%)
## scope = travel_plan
alias[trigger:travel_speed] == single_alias_right[score_formula]

### Gets the current travel speed for travel (percentage points above 100%)
## scope = travel_plan
alias[trigger:travel_speed] == value_field

### How strong is the scoped faith? *Expensive*, if you're gonna use the value repeatedly, save it to a scope first! This is scaled by a factor of 1000, so '1' means 1000 men. This is due to the cap of ~2 million, which would be too low in many cases
## scope = faith
alias[trigger:estimated_faith_strength] == alias_keys_field[int_value]

### How strong is the scoped faith? *Expensive*, if you're gonna use the value repeatedly, save it to a scope first! This is scaled by a factor of 1000, so '1' means 1000 men. This is due to the cap of ~2 million, which would be too low in many cases
## scope = faith
alias[trigger:estimated_faith_strength] == single_alias_right[score_formula]

### How strong is the scoped faith? *Expensive*, if you're gonna use the value repeatedly, save it to a scope first! This is scaled by a factor of 1000, so '1' means 1000 men. This is due to the cap of ~2 million, which would be too low in many cases
## scope = faith
alias[trigger:estimated_faith_strength] == value_field

### What is the faith's fervor?
## scope = faith
alias[trigger:fervor] == alias_keys_field[int_value]

### What is the faith's fervor?
## scope = faith
alias[trigger:fervor] == single_alias_right[score_formula]

### What is the faith's fervor?
## scope = faith
alias[trigger:fervor] == value_field

### How many holy sites does the faith control? holy_sites_controlled > 1
## scope = faith
alias[trigger:holy_sites_controlled] == alias_keys_field[int_value]

### How many holy sites does the faith control? holy_sites_controlled > 1
## scope = faith
alias[trigger:holy_sites_controlled] == single_alias_right[score_formula]

### How many holy sites does the faith control? holy_sites_controlled > 1
## scope = faith
alias[trigger:holy_sites_controlled] == value_field

### Returns how many characters follow the given faith
### num_character_followers > 0
## scope = faith
alias[trigger:num_character_followers] == alias_keys_field[int_value]

### Returns how many characters follow the given faith
### num_character_followers > 0
## scope = faith
alias[trigger:num_character_followers] == single_alias_right[score_formula]

### Returns how many characters follow the given faith
### num_character_followers > 0
## scope = faith
alias[trigger:num_character_followers] == value_field

### Returns how many counties follow the given faith
### num_county_followers > 0
## scope = faith
alias[trigger:num_county_followers] == alias_keys_field[int_value]

### Returns how many counties follow the given faith
### num_county_followers > 0
## scope = faith
alias[trigger:num_county_followers] == single_alias_right[score_formula]

### Returns how many counties follow the given faith
### num_county_followers > 0
## scope = faith
alias[trigger:num_county_followers] == value_field

### Checks the takeover days left of a future phase in this sub-region.
### phase_takeover_duration_days:future_phase_key <= scripted_value
## scope = situation_sub_region
alias[trigger:phase_takeover_duration_days] == alias_keys_field[int_value]

### Checks the takeover days left of a future phase in this sub-region.
### phase_takeover_duration_days:future_phase_key <= scripted_value
## scope = situation_sub_region
alias[trigger:phase_takeover_duration_days] == single_alias_right[score_formula]

### Checks the takeover days left of a future phase in this sub-region.
### phase_takeover_duration_days:future_phase_key <= scripted_value
## scope = situation_sub_region
alias[trigger:phase_takeover_duration_days] == value_field

### Checks the takeover points of a future phase in this sub-region.
### phase_takeover_points:future_phase_key <= scripted_value
## scope = situation_sub_region
alias[trigger:phase_takeover_points] == alias_keys_field[int_value]

### Checks the takeover points of a future phase in this sub-region.
### phase_takeover_points:future_phase_key <= scripted_value
## scope = situation_sub_region
alias[trigger:phase_takeover_points] == single_alias_right[score_formula]

### Checks the takeover points of a future phase in this sub-region.
### phase_takeover_points:future_phase_key <= scripted_value
## scope = situation_sub_region
alias[trigger:phase_takeover_points] == value_field

### The contribution value given by the scoped filled agent slot.
## scope = agent_slot
alias[trigger:agent_slot_contribution] == alias_keys_field[int_value]

### The contribution value given by the scoped filled agent slot.
## scope = agent_slot
alias[trigger:agent_slot_contribution] == single_alias_right[score_formula]

### The contribution value given by the scoped filled agent slot.
## scope = agent_slot
alias[trigger:agent_slot_contribution] == value_field

### How many days is it until the given GHW launches its war?
## scope = ghw
alias[trigger:days_until_ghw_launch] == alias_keys_field[int_value]

### How many days is it until the given GHW launches its war?
## scope = ghw
alias[trigger:days_until_ghw_launch] == single_alias_right[score_formula]

### How many days is it until the given GHW launches its war?
## scope = ghw
alias[trigger:days_until_ghw_launch] == value_field

### What is the max (if all levies were fully reinforced) military strength of the pledged attackers in the given Great Holy War?
## scope = ghw
alias[trigger:ghw_attackers_strength] == alias_keys_field[int_value]

### What is the max (if all levies were fully reinforced) military strength of the pledged attackers in the given Great Holy War?
## scope = ghw
alias[trigger:ghw_attackers_strength] == single_alias_right[score_formula]

### What is the max (if all levies were fully reinforced) military strength of the pledged attackers in the given Great Holy War?
## scope = ghw
alias[trigger:ghw_attackers_strength] == value_field

### What is the max (if all levies were fully reinforced) military strength of the pledged defenders in the given Great Holy War?
## scope = ghw
alias[trigger:ghw_defenders_strength] == alias_keys_field[int_value]

### What is the max (if all levies were fully reinforced) military strength of the pledged defenders in the given Great Holy War?
## scope = ghw
alias[trigger:ghw_defenders_strength] == single_alias_right[score_formula]

### What is the max (if all levies were fully reinforced) military strength of the pledged defenders in the given Great Holy War?
## scope = ghw
alias[trigger:ghw_defenders_strength] == value_field

### How much gold is in the great holy war's war chest?
## scope = ghw
alias[trigger:ghw_war_chest_gold] == alias_keys_field[int_value]

### How much gold is in the great holy war's war chest?
## scope = ghw
alias[trigger:ghw_war_chest_gold] == single_alias_right[score_formula]

### How much gold is in the great holy war's war chest?
## scope = ghw
alias[trigger:ghw_war_chest_gold] == value_field

### How much piety is in the great holy war's war chest?
## scope = ghw
alias[trigger:ghw_war_chest_piety] == alias_keys_field[int_value]

### How much piety is in the great holy war's war chest?
## scope = ghw
alias[trigger:ghw_war_chest_piety] == single_alias_right[score_formula]

### How much piety is in the great holy war's war chest?
## scope = ghw
alias[trigger:ghw_war_chest_piety] == value_field

### How much prestige is in the great holy war's war chest?
## scope = ghw
alias[trigger:ghw_war_chest_prestige] == alias_keys_field[int_value]

### How much prestige is in the great holy war's war chest?
## scope = ghw
alias[trigger:ghw_war_chest_prestige] == single_alias_right[score_formula]

### How much prestige is in the great holy war's war chest?
## scope = ghw
alias[trigger:ghw_war_chest_prestige] == value_field

### Number of days since the epidemic outbreak started.
### days_since_outbreak_start >= 20
## scope = epidemic
alias[trigger:days_since_outbreak_start] == alias_keys_field[int_value]

### Number of days since the epidemic outbreak started.
### days_since_outbreak_start >= 20
## scope = epidemic
alias[trigger:days_since_outbreak_start] == single_alias_right[score_formula]

### Number of days since the epidemic outbreak started.
### days_since_outbreak_start >= 20
## scope = epidemic
alias[trigger:days_since_outbreak_start] == value_field

### Get the total number of provinces infected over the lifetime of this epidemic.
### total_infected_provinces >= 20
## scope = epidemic
alias[trigger:total_infected_provinces] == alias_keys_field[int_value]

### Get the total number of provinces infected over the lifetime of this epidemic.
### total_infected_provinces >= 20
## scope = epidemic
alias[trigger:total_infected_provinces] == single_alias_right[score_formula]

### Get the total number of provinces infected over the lifetime of this epidemic.
### total_infected_provinces >= 20
## scope = epidemic
alias[trigger:total_infected_provinces] == value_field

### How many slots for taxpayers are available in scoped tax slot?
### scope:tax_slot = { available_tax_player_slots > 2 }
## scope = tax_slot
alias[trigger:available_taxpayer_slots] == alias_keys_field[int_value]

### How many slots for taxpayers are available in scoped tax slot?
### scope:tax_slot = { available_tax_player_slots > 2 }
## scope = tax_slot
alias[trigger:available_taxpayer_slots] == single_alias_right[score_formula]

### How many slots for taxpayers are available in scoped tax slot?
### scope:tax_slot = { available_tax_player_slots > 2 }
## scope = tax_slot
alias[trigger:available_taxpayer_slots] == value_field

### does this artifact have the required durability?
## scope = artifact
alias[trigger:artifact_durability] == alias_keys_field[int_value]

### does this artifact have the required durability?
## scope = artifact
alias[trigger:artifact_durability] == single_alias_right[score_formula]

### does this artifact have the required durability?
## scope = artifact
alias[trigger:artifact_durability] == value_field

### does this artifact have the required max durability?
## scope = artifact
alias[trigger:artifact_max_durability] == alias_keys_field[int_value]

### does this artifact have the required max durability?
## scope = artifact
alias[trigger:artifact_max_durability] == single_alias_right[score_formula]

### does this artifact have the required max durability?
## scope = artifact
alias[trigger:artifact_max_durability] == value_field

### How many kills has this artifact been used in?
## scope = artifact
alias[trigger:num_artifact_kills] == alias_keys_field[int_value]

### How many kills has this artifact been used in?
## scope = artifact
alias[trigger:num_artifact_kills] == single_alias_right[score_formula]

### How many kills has this artifact been used in?
## scope = artifact
alias[trigger:num_artifact_kills] == value_field

### How many days are left in the mercenary contract. 0 if not hired.
## scope = mercenary_company
alias[trigger:mercenary_company_expiration_days] == alias_keys_field[int_value]

### How many days are left in the mercenary contract. 0 if not hired.
## scope = mercenary_company
alias[trigger:mercenary_company_expiration_days] == single_alias_right[score_formula]

### How many days are left in the mercenary contract. 0 if not hired.
## scope = mercenary_company
alias[trigger:mercenary_company_expiration_days] == value_field

### Compare the current computer day.
### An interface trigger, can only be used in specific places
alias[trigger:current_computer_date_day] == alias_keys_field[int_value]

### Compare the current computer day.
### An interface trigger, can only be used in specific places
alias[trigger:current_computer_date_day] == single_alias_right[score_formula]

### Compare the current computer day.
### An interface trigger, can only be used in specific places
alias[trigger:current_computer_date_day] == value_field

### Compare the current computer month.
### An interface trigger, can only be used in specific places
alias[trigger:current_computer_date_month] == alias_keys_field[int_value]

### Compare the current computer month.
### An interface trigger, can only be used in specific places
alias[trigger:current_computer_date_month] == single_alias_right[score_formula]

### Compare the current computer month.
### An interface trigger, can only be used in specific places
alias[trigger:current_computer_date_month] == value_field

### Compare the current computer year.
### An interface trigger, can only be used in specific places
alias[trigger:current_computer_date_year] == alias_keys_field[int_value]

### Compare the current computer year.
### An interface trigger, can only be used in specific places
alias[trigger:current_computer_date_year] == single_alias_right[score_formula]

### Compare the current computer year.
### An interface trigger, can only be used in specific places
alias[trigger:current_computer_date_year] == value_field

### Compare the current ingame day [1, 31]
alias[trigger:current_day] == alias_keys_field[int_value]

### Compare the current ingame day [1, 31]
alias[trigger:current_day] == single_alias_right[score_formula]

### Compare the current ingame day [1, 31]
alias[trigger:current_day] == value_field

### Compare the current ingame month [1..12]
alias[trigger:current_month] == alias_keys_field[int_value]

### Compare the current ingame month [1..12]
alias[trigger:current_month] == single_alias_right[score_formula]

### Compare the current ingame month [1..12]
alias[trigger:current_month] == value_field

### What is number of tooltips open rigth now?
### An interface trigger, can only be used in specific places
alias[trigger:current_tooltip_depth] == alias_keys_field[int_value]

### What is number of tooltips open rigth now?
### An interface trigger, can only be used in specific places
alias[trigger:current_tooltip_depth] == single_alias_right[score_formula]

### What is number of tooltips open rigth now?
### An interface trigger, can only be used in specific places
alias[trigger:current_tooltip_depth] == value_field

### Compare the current ingame year
alias[trigger:current_year] == alias_keys_field[int_value]

### Compare the current ingame year
alias[trigger:current_year] == single_alias_right[score_formula]

### Compare the current ingame year
alias[trigger:current_year] == value_field

### How many months it has been since the start of the game
### months_from_game_start > 5
alias[trigger:months_from_game_start] == alias_keys_field[int_value]

### How many months it has been since the start of the game
### months_from_game_start > 5
alias[trigger:months_from_game_start] == single_alias_right[score_formula]

### How many months it has been since the start of the game
### months_from_game_start > 5
alias[trigger:months_from_game_start] == value_field

### How many years it has been since the start of the game
### years_from_game_start > 5
alias[trigger:years_from_game_start] == alias_keys_field[int_value]

### How many years it has been since the start of the game
### years_from_game_start > 5
alias[trigger:years_from_game_start] == single_alias_right[score_formula]

### How many years it has been since the start of the game
### years_from_game_start > 5
alias[trigger:years_from_game_start] == value_field

### How much gold is available to loot for raiding armies?
### available_loot >= 7
## scope = province
alias[trigger:available_loot] == alias_keys_field[int_value]

### How much gold is available to loot for raiding armies?
### available_loot >= 7
## scope = province
alias[trigger:available_loot] == single_alias_right[score_formula]

### How much gold is available to loot for raiding armies?
### available_loot >= 7
## scope = province
alias[trigger:available_loot] == value_field

### How many building slots exist (including occupied ones)?
### building_slots > 3
## scope = province
alias[trigger:building_slots] == alias_keys_field[int_value]

### How many building slots exist (including occupied ones)?
### building_slots > 3
## scope = province
alias[trigger:building_slots] == single_alias_right[score_formula]

### How many building slots exist (including occupied ones)?
### building_slots > 3
## scope = province
alias[trigger:building_slots] == value_field

### How many levels of normal buildings are there? Duchy and such buildings do not count. Building under construction does not count. The capital building does count
### combined_building_level > 10
## scope = province
alias[trigger:combined_building_level] == alias_keys_field[int_value]

### How many levels of normal buildings are there? Duchy and such buildings do not count. Building under construction does not count. The capital building does count
### combined_building_level > 10
## scope = province
alias[trigger:combined_building_level] == single_alias_right[score_formula]

### How many levels of normal buildings are there? Duchy and such buildings do not count. Building under construction does not count. The capital building does count
### combined_building_level > 10
## scope = province
alias[trigger:combined_building_level] == value_field

### Number of days since the target epidemic infected the scoped province.
### days_since_province_infection >= 20
## scope = province
alias[trigger:days_since_province_infection] == alias_keys_field[int_value]

### Number of days since the target epidemic infected the scoped province.
### days_since_province_infection >= 20
## scope = province
alias[trigger:days_since_province_infection] == single_alias_right[score_formula]

### Number of days since the target epidemic infected the scoped province.
### days_since_province_infection >= 20
## scope = province
alias[trigger:days_since_province_infection] == value_field

### Get the epidemic resistance of the scoped province.
### epidemic_resistance >= 20
## scope = province
alias[trigger:epidemic_resistance] == alias_keys_field[int_value]

### Get the epidemic resistance of the scoped province.
### epidemic_resistance >= 20
## scope = province
alias[trigger:epidemic_resistance] == single_alias_right[score_formula]

### Get the epidemic resistance of the scoped province.
### epidemic_resistance >= 20
## scope = province
alias[trigger:epidemic_resistance] == value_field

### Compares the fort level of a province
## scope = province
alias[trigger:fort_level] == alias_keys_field[int_value]

### Compares the fort level of a province
## scope = province
alias[trigger:fort_level] == single_alias_right[score_formula]

### Compares the fort level of a province
## scope = province
alias[trigger:fort_level] == value_field

### How many free building slots exist? A building in construction is considered to be taking a slot
### free_building_slots > 3
## scope = province
alias[trigger:free_building_slots] == alias_keys_field[int_value]

### How many free building slots exist? A building in construction is considered to be taking a slot
### free_building_slots > 3
## scope = province
alias[trigger:free_building_slots] == single_alias_right[score_formula]

### How many free building slots exist? A building in construction is considered to be taking a slot
### free_building_slots > 3
## scope = province
alias[trigger:free_building_slots] == value_field

### Check the income of the scoped province
### monthly_income > 10
## scope = province
alias[trigger:monthly_income] == alias_keys_field[int_value]

### Check the income of the scoped province
### monthly_income > 10
## scope = province
alias[trigger:monthly_income] == single_alias_right[score_formula]

### Check the income of the scoped province
### monthly_income > 10
## scope = province
alias[trigger:monthly_income] == value_field

### How many normal buildings are there? Duchy and such buildings do not count. Building under construction does count
### num_buildings > 3
## scope = province
alias[trigger:num_buildings] == alias_keys_field[int_value]

### How many normal buildings are there? Duchy and such buildings do not count. Building under construction does count
### num_buildings > 3
## scope = province
alias[trigger:num_buildings] == single_alias_right[score_formula]

### How many normal buildings are there? Duchy and such buildings do not count. Building under construction does count
### num_buildings > 3
## scope = province
alias[trigger:num_buildings] == value_field

### Check the number of characters in the pool the scoped province is a part of
## scope = province
alias[trigger:number_of_characters_in_pool] == alias_keys_field[int_value]

### Check the number of characters in the pool the scoped province is a part of
## scope = province
alias[trigger:number_of_characters_in_pool] == single_alias_right[score_formula]

### Check the number of characters in the pool the scoped province is a part of
## scope = province
alias[trigger:number_of_characters_in_pool] == value_field

### Infection rate of target epidemic in the scoped province.
### province_infection_rate >= 20
## scope = province
alias[trigger:province_infection_rate] == alias_keys_field[int_value]

### Infection rate of target epidemic in the scoped province.
### province_infection_rate >= 20
## scope = province
alias[trigger:province_infection_rate] == single_alias_right[score_formula]

### Infection rate of target epidemic in the scoped province.
### province_infection_rate >= 20
## scope = province
alias[trigger:province_infection_rate] == value_field

### What is the province's danger value for a specific travel plan? travel_danger_value = { target = scope:some_travel_plan value > 1 }
## scope = province
alias[trigger:travel_danger_value] == alias_keys_field[int_value]

### What is the province's danger value for a specific travel plan? travel_danger_value = { target = scope:some_travel_plan value > 1 }
## scope = province
alias[trigger:travel_danger_value] == single_alias_right[score_formula]

### What is the province's danger value for a specific travel plan? travel_danger_value = { target = scope:some_travel_plan value > 1 }
## scope = province
alias[trigger:travel_danger_value] == value_field

### compares the attacker war score
## scope = war
alias[trigger:attacker_war_score] == alias_keys_field[int_value]

### compares the attacker war score
## scope = war
alias[trigger:attacker_war_score] == single_alias_right[score_formula]

### compares the attacker war score
## scope = war
alias[trigger:attacker_war_score] == value_field

### Number of days since the war score has been at max (+100 or -100). Returns -1 if the war score is not +100 or -100
## scope = war
alias[trigger:days_since_max_war_score] == alias_keys_field[int_value]

### Number of days since the war score has been at max (+100 or -100). Returns -1 if the war score is not +100 or -100
## scope = war
alias[trigger:days_since_max_war_score] == single_alias_right[score_formula]

### Number of days since the war score has been at max (+100 or -100). Returns -1 if the war score is not +100 or -100
## scope = war
alias[trigger:days_since_max_war_score] == value_field

### compares the defender war score
## scope = war
alias[trigger:defender_war_score] == alias_keys_field[int_value]

### compares the defender war score
## scope = war
alias[trigger:defender_war_score] == single_alias_right[score_formula]

### compares the defender war score
## scope = war
alias[trigger:defender_war_score] == value_field

### compares the number of days the war is going on for
## scope = war
alias[trigger:war_days] == alias_keys_field[int_value]

### compares the number of days the war is going on for
## scope = war
alias[trigger:war_days] == single_alias_right[score_formula]

### compares the number of days the war is going on for
## scope = war
alias[trigger:war_days] == value_field

### How many holdings the holy order has under lease
## scope = holy_order
alias[trigger:num_leased_titles] == alias_keys_field[int_value]

### How many holdings the holy order has under lease
## scope = holy_order
alias[trigger:num_leased_titles] == single_alias_right[score_formula]

### How many holdings the holy order has under lease
## scope = holy_order
alias[trigger:num_leased_titles] == value_field

### How many ranks does this Accolade have unlocked?
### accolade_rank > 2
## scope = accolade
alias[trigger:accolade_rank] == alias_keys_field[int_value]

### How many ranks does this Accolade have unlocked?
### accolade_rank > 2
## scope = accolade
alias[trigger:accolade_rank] == single_alias_right[score_formula]

### How many ranks does this Accolade have unlocked?
### accolade_rank > 2
## scope = accolade
alias[trigger:accolade_rank] == value_field

### Days since when the legend was completed.
## scope = legend
alias[trigger:days_since_legend_completion] == alias_keys_field[int_value]

### Days since when the legend was completed.
## scope = legend
alias[trigger:days_since_legend_completion] == single_alias_right[score_formula]

### Days since when the legend was completed.
## scope = legend
alias[trigger:days_since_legend_completion] == value_field

### Days since when the legend was created.
## scope = legend
alias[trigger:days_since_legend_start_date] == alias_keys_field[int_value]

### Days since when the legend was created.
## scope = legend
alias[trigger:days_since_legend_start_date] == single_alias_right[score_formula]

### Days since when the legend was created.
## scope = legend
alias[trigger:days_since_legend_start_date] == value_field

### Days since when the situation was completed.
## scope = situation
alias[trigger:situation_days_since_end_date] == alias_keys_field[int_value]

### Days since when the situation was completed.
## scope = situation
alias[trigger:situation_days_since_end_date] == single_alias_right[score_formula]

### Days since when the situation was completed.
## scope = situation
alias[trigger:situation_days_since_end_date] == value_field

### Days since the situation started.
## scope = situation
alias[trigger:situation_days_since_start_date] == alias_keys_field[int_value]

### Days since the situation started.
## scope = situation
alias[trigger:situation_days_since_start_date] == single_alias_right[score_formula]

### Days since the situation started.
## scope = situation
alias[trigger:situation_days_since_start_date] == value_field

### Max Scheme Success Chance
## scope = scheme
alias[trigger:max_scheme_success_chance] == alias_keys_field[int_value]

### Max Scheme Success Chance
## scope = scheme
alias[trigger:max_scheme_success_chance] == single_alias_right[score_formula]

### Max Scheme Success Chance
## scope = scheme
alias[trigger:max_scheme_success_chance] == value_field

### The maximum number of breaches the scheme can have
## scope = scheme
alias[trigger:maximum_scheme_breaches] == alias_keys_field[int_value]

### The maximum number of breaches the scheme can have
## scope = scheme
alias[trigger:maximum_scheme_breaches] == single_alias_right[score_formula]

### The maximum number of breaches the scheme can have
## scope = scheme
alias[trigger:maximum_scheme_breaches] == value_field

### The number of the scheme's currently available agent charges
## scope = scheme
alias[trigger:scheme_agent_charges] == alias_keys_field[int_value]

### The number of the scheme's currently available agent charges
## scope = scheme
alias[trigger:scheme_agent_charges] == single_alias_right[score_formula]

### The number of the scheme's currently available agent charges
## scope = scheme
alias[trigger:scheme_agent_charges] == value_field

### The number of breaches the scheme currently has
## scope = scheme
alias[trigger:scheme_breaches] == alias_keys_field[int_value]

### The number of breaches the scheme currently has
## scope = scheme
alias[trigger:scheme_breaches] == single_alias_right[score_formula]

### The number of breaches the scheme currently has
## scope = scheme
alias[trigger:scheme_breaches] == value_field

### The number of days since scheme was started
## scope = scheme
alias[trigger:scheme_duration_days] == alias_keys_field[int_value]

### The number of days since scheme was started
## scope = scheme
alias[trigger:scheme_duration_days] == single_alias_right[score_formula]

### The number of days since scheme was started
## scope = scheme
alias[trigger:scheme_duration_days] == value_field

### The number of exposed agents in a scheme
## scope = scheme
alias[trigger:scheme_number_of_exposed_agents] == alias_keys_field[int_value]

### The number of exposed agents in a scheme
## scope = scheme
alias[trigger:scheme_number_of_exposed_agents] == single_alias_right[score_formula]

### The number of exposed agents in a scheme
## scope = scheme
alias[trigger:scheme_number_of_exposed_agents] == value_field

### The number of agents in a scheme
## scope = scheme
alias[trigger:scheme_number_of_filled_agent_slots] == alias_keys_field[int_value]

### The number of agents in a scheme
## scope = scheme
alias[trigger:scheme_number_of_filled_agent_slots] == single_alias_right[score_formula]

### The number of agents in a scheme
## scope = scheme
alias[trigger:scheme_number_of_filled_agent_slots] == value_field

### Scheme phase duration
## scope = scheme
alias[trigger:scheme_phase_duration] == alias_keys_field[int_value]

### Scheme phase duration
## scope = scheme
alias[trigger:scheme_phase_duration] == single_alias_right[score_formula]

### Scheme phase duration
## scope = scheme
alias[trigger:scheme_phase_duration] == value_field

### Scheme progress (0 - 10 (defined))
## scope = scheme
alias[trigger:scheme_progress] == alias_keys_field[int_value]

### Scheme progress (0 - 10 (defined))
## scope = scheme
alias[trigger:scheme_progress] == single_alias_right[score_formula]

### Scheme progress (0 - 10 (defined))
## scope = scheme
alias[trigger:scheme_progress] == value_field

### Scheme secrecy
## scope = scheme
alias[trigger:scheme_secrecy] == alias_keys_field[int_value]

### Scheme secrecy
## scope = scheme
alias[trigger:scheme_secrecy] == single_alias_right[score_formula]

### Scheme secrecy
## scope = scheme
alias[trigger:scheme_secrecy] == value_field

### Scheme success chance
## scope = scheme
alias[trigger:scheme_success_chance] == alias_keys_field[int_value]

### Scheme success chance
## scope = scheme
alias[trigger:scheme_success_chance] == single_alias_right[score_formula]

### Scheme success chance
## scope = scheme
alias[trigger:scheme_success_chance] == value_field

### Get character age: scope:character = { age > 16 }
## scope = character
alias[trigger:age] == alias_keys_field[int_value]

### Get character age: scope:character = { age > 16 }
## scope = character
alias[trigger:age] == single_alias_right[score_formula]

### Get character age: scope:character = { age > 16 }
## scope = character
alias[trigger:age] == value_field

### AI boldness
## scope = character
alias[trigger:ai_boldness] == alias_keys_field[int_value]

### AI boldness
## scope = character
alias[trigger:ai_boldness] == single_alias_right[score_formula]

### AI boldness
## scope = character
alias[trigger:ai_boldness] == value_field

### AI compassion
## scope = character
alias[trigger:ai_compassion] == alias_keys_field[int_value]

### AI compassion
## scope = character
alias[trigger:ai_compassion] == single_alias_right[score_formula]

### AI compassion
## scope = character
alias[trigger:ai_compassion] == value_field

### AI energy
## scope = character
alias[trigger:ai_energy] == alias_keys_field[int_value]

### AI energy
## scope = character
alias[trigger:ai_energy] == single_alias_right[score_formula]

### AI energy
## scope = character
alias[trigger:ai_energy] == value_field

### AI greed
## scope = character
alias[trigger:ai_greed] == alias_keys_field[int_value]

### AI greed
## scope = character
alias[trigger:ai_greed] == single_alias_right[score_formula]

### AI greed
## scope = character
alias[trigger:ai_greed] == value_field

### AI honor
## scope = character
alias[trigger:ai_honor] == alias_keys_field[int_value]

### AI honor
## scope = character
alias[trigger:ai_honor] == single_alias_right[score_formula]

### AI honor
## scope = character
alias[trigger:ai_honor] == value_field

### AI rationality
## scope = character
alias[trigger:ai_rationality] == alias_keys_field[int_value]

### AI rationality
## scope = character
alias[trigger:ai_rationality] == single_alias_right[score_formula]

### AI rationality
## scope = character
alias[trigger:ai_rationality] == value_field

### AI sociability
## scope = character
alias[trigger:ai_sociability] == alias_keys_field[int_value]

### AI sociability
## scope = character
alias[trigger:ai_sociability] == single_alias_right[score_formula]

### AI sociability
## scope = character
alias[trigger:ai_sociability] == value_field

### AI vengefulness
## scope = character
alias[trigger:ai_vengefulness] == alias_keys_field[int_value]

### AI vengefulness
## scope = character
alias[trigger:ai_vengefulness] == single_alias_right[score_formula]

### AI vengefulness
## scope = character
alias[trigger:ai_vengefulness] == value_field

### AI zeal
## scope = character
alias[trigger:ai_zeal] == alias_keys_field[int_value]

### AI zeal
## scope = character
alias[trigger:ai_zeal] == single_alias_right[score_formula]

### AI zeal
## scope = character
alias[trigger:ai_zeal] == value_field

### Attraction value for the scoped character
## scope = character
alias[trigger:attraction] == alias_keys_field[int_value]

### Attraction value for the scoped character
## scope = character
alias[trigger:attraction] == single_alias_right[score_formula]

### Attraction value for the scoped character
## scope = character
alias[trigger:attraction] == value_field

### average_amenity_level >= 3
### Compares the scoped character's average amenity level to the given value, you probably never want to check for direct equality since the average will be some decimal number
## scope = character
alias[trigger:average_amenity_level] == alias_keys_field[int_value]

### average_amenity_level >= 3
### Compares the scoped character's average amenity level to the given value, you probably never want to check for direct equality since the average will be some decimal number
## scope = character
alias[trigger:average_amenity_level] == single_alias_right[score_formula]

### average_amenity_level >= 3
### Compares the scoped character's average amenity level to the given value, you probably never want to check for direct equality since the average will be some decimal number
## scope = character
alias[trigger:average_amenity_level] == value_field

### Base weight of the scoped character
### base_weight > 10
## scope = character
alias[trigger:base_weight] == alias_keys_field[int_value]

### Base weight of the scoped character
### base_weight > 10
## scope = character
alias[trigger:base_weight] == single_alias_right[score_formula]

### Base weight of the scoped character
### base_weight > 10
## scope = character
alias[trigger:base_weight] == value_field

### cease_tribute_payments_ai_chance > 10
### Gets the ai_chance value of the cease_tribute_payments_interaction ai_chance
## scope = character
alias[trigger:cease_tribute_payments_ai_chance] == alias_keys_field[int_value]

### cease_tribute_payments_ai_chance > 10
### Gets the ai_chance value of the cease_tribute_payments_interaction ai_chance
## scope = character
alias[trigger:cease_tribute_payments_ai_chance] == single_alias_right[score_formula]

### cease_tribute_payments_ai_chance > 10
### Gets the ai_chance value of the cease_tribute_payments_interaction ai_chance
## scope = character
alias[trigger:cease_tribute_payments_ai_chance] == value_field

### What is the ratio of the scoped character's men-at-arms gold expenses, relative to their income?
### Similar calc compared to `ai_men_at_arms_expense_gold_min` / `ai_men_at_arms_expense_gold_ideal`.
### (Relative value 0.0 - 1.0 - *, where 1.0 is all income, unraised maa costs)
## scope = character
alias[trigger:character_men_at_arms_expense_gold_relative] == float[0.0..1.0]

### What is the ratio of the scoped character's men-at-arms prestige expenses, relative to their income?
### Similar calc compared to `ai_men_at_arms_expense_prestige_min` / `ai_men_at_arms_expense_prestige_ideal`.
### (Relative value 0.0 - 1.0 - *, where 1.0 is all income, unraised maa costs)
## scope = character
alias[trigger:character_men_at_arms_expense_prestige_relative] == float[0.0..1.0]

### Is the scoped character's monthly progress on their assigned council task this big?
## scope = character
alias[trigger:council_task_monthly_progress] == alias_keys_field[int_value]

### Is the scoped character's monthly progress on their assigned council task this big?
## scope = character
alias[trigger:council_task_monthly_progress] == single_alias_right[score_formula]

### Is the scoped character's monthly progress on their assigned council task this big?
## scope = character
alias[trigger:council_task_monthly_progress] == value_field

### Gets the base court grandeur value for a character, always NRoyalCourt::COURT_GRANDEUR_MIN for those without one
## scope = character
alias[trigger:court_grandeur_base] == alias_keys_field[int_value]

### Gets the base court grandeur value for a character, always NRoyalCourt::COURT_GRANDEUR_MIN for those without one
## scope = character
alias[trigger:court_grandeur_base] == single_alias_right[score_formula]

### Gets the base court grandeur value for a character, always NRoyalCourt::COURT_GRANDEUR_MIN for those without one
## scope = character
alias[trigger:court_grandeur_base] == value_field

### Gets the current court grandeur value for a character, always NRoyalCourt::COURT_GRANDEUR_MIN for those without one
## scope = character
alias[trigger:court_grandeur_current] == alias_keys_field[int_value]

### Gets the current court grandeur value for a character, always NRoyalCourt::COURT_GRANDEUR_MIN for those without one
## scope = character
alias[trigger:court_grandeur_current] == single_alias_right[score_formula]

### Gets the current court grandeur value for a character, always NRoyalCourt::COURT_GRANDEUR_MIN for those without one
## scope = character
alias[trigger:court_grandeur_current] == value_field

### Gets the current court grandeur level for a character, always 0 for those without one
## scope = character
alias[trigger:court_grandeur_current_level] == alias_keys_field[int_value]

### Gets the current court grandeur level for a character, always 0 for those without one
## scope = character
alias[trigger:court_grandeur_current_level] == single_alias_right[score_formula]

### Gets the current court grandeur level for a character, always 0 for those without one
## scope = character
alias[trigger:court_grandeur_current_level] == value_field

### Gets the minimum expected court grandeur value for a character, always NRoyalCourt::COURT_GRANDEUR_MIN for those without one
## scope = character
alias[trigger:court_grandeur_minimum_expected] == alias_keys_field[int_value]

### Gets the minimum expected court grandeur value for a character, always NRoyalCourt::COURT_GRANDEUR_MIN for those without one
## scope = character
alias[trigger:court_grandeur_minimum_expected] == single_alias_right[score_formula]

### Gets the minimum expected court grandeur value for a character, always NRoyalCourt::COURT_GRANDEUR_MIN for those without one
## scope = character
alias[trigger:court_grandeur_minimum_expected] == value_field

### Gets the minimum expected court grandeur level for a character, always 0 for those without one
## scope = character
alias[trigger:court_grandeur_minimum_expected_level] == alias_keys_field[int_value]

### Gets the minimum expected court grandeur level for a character, always 0 for those without one
## scope = character
alias[trigger:court_grandeur_minimum_expected_level] == single_alias_right[score_formula]

### Gets the minimum expected court grandeur level for a character, always 0 for those without one
## scope = character
alias[trigger:court_grandeur_minimum_expected_level] == value_field

### How many court positions the scoped character CAN currently employs
## scope = character
alias[trigger:court_positions_currently_available] == alias_keys_field[int_value]

### How many court positions the scoped character CAN currently employs
## scope = character
alias[trigger:court_positions_currently_available] == single_alias_right[score_formula]

### How many court positions the scoped character CAN currently employs
## scope = character
alias[trigger:court_positions_currently_available] == value_field

### How many court positions the scope character currently employs
## scope = character
alias[trigger:court_positions_currently_filled] == alias_keys_field[int_value]

### How many court positions the scope character currently employs
## scope = character
alias[trigger:court_positions_currently_filled] == single_alias_right[score_formula]

### How many court positions the scope character currently employs
## scope = character
alias[trigger:court_positions_currently_filled] == value_field

### Get the current domain fertility of the scoped character
## scope = character
alias[trigger:current_domain_fertility] == alias_keys_field[int_value]

### Get the current domain fertility of the scoped character
## scope = character
alias[trigger:current_domain_fertility] == single_alias_right[score_formula]

### Get the current domain fertility of the scoped character
## scope = character
alias[trigger:current_domain_fertility] == value_field

### Is the scoped character's current military strength this big?
## scope = character
alias[trigger:current_military_strength] == alias_keys_field[int_value]

### Is the scoped character's current military strength this big?
## scope = character
alias[trigger:current_military_strength] == single_alias_right[score_formula]

### Is the scoped character's current military strength this big?
## scope = character
alias[trigger:current_military_strength] == value_field

### Is the scoped character's current raised military strength this big?
## scope = character
alias[trigger:current_raised_military_strength] == alias_keys_field[int_value]

### Is the scoped character's current raised military strength this big?
## scope = character
alias[trigger:current_raised_military_strength] == single_alias_right[score_formula]

### Is the scoped character's current raised military strength this big?
## scope = character
alias[trigger:current_raised_military_strength] == value_field

### Current weight of the scoped character
### current_weight > 10
## scope = character
alias[trigger:current_weight] == alias_keys_field[int_value]

### Current weight of the scoped character
### current_weight > 10
## scope = character
alias[trigger:current_weight] == single_alias_right[score_formula]

### Current weight of the scoped character
### current_weight > 10
## scope = character
alias[trigger:current_weight] == value_field

### Current weight of the scoped character as a value for portraits scaled between 0.0 and 1.0
### current_weight_for_portrait > 0.1
## scope = character
alias[trigger:current_weight_for_portrait] == float[0.0..1.0]

### Number of days this character has been a ruler, returns -1 if character isn't a ruler
## scope = character
alias[trigger:days_as_ruler] == alias_keys_field[int_value]

### Number of days this character has been a ruler, returns -1 if character isn't a ruler
## scope = character
alias[trigger:days_as_ruler] == single_alias_right[score_formula]

### Number of days this character has been a ruler, returns -1 if character isn't a ruler
## scope = character
alias[trigger:days_as_ruler] == value_field

### number of days the character has been imprisoned for (0 if not imprisoned)
## scope = character
alias[trigger:days_in_prison] == alias_keys_field[int_value]

### number of days the character has been imprisoned for (0 if not imprisoned)
## scope = character
alias[trigger:days_in_prison] == single_alias_right[score_formula]

### number of days the character has been imprisoned for (0 if not imprisoned)
## scope = character
alias[trigger:days_in_prison] == value_field

### Number of days the character has been in peace (0 if in war). Raids count as 'not peace'
## scope = character
alias[trigger:days_of_continuous_peace] == alias_keys_field[int_value]

### Number of days the character has been in peace (0 if in war). Raids count as 'not peace'
## scope = character
alias[trigger:days_of_continuous_peace] == single_alias_right[score_formula]

### Number of days the character has been in peace (0 if in war). Raids count as 'not peace'
## scope = character
alias[trigger:days_of_continuous_peace] == value_field

### Number of days the character has been in peace (0 if in peace)
## scope = character
alias[trigger:days_of_continuous_war] == alias_keys_field[int_value]

### Number of days the character has been in peace (0 if in peace)
## scope = character
alias[trigger:days_of_continuous_war] == single_alias_right[score_formula]

### Number of days the character has been in peace (0 if in peace)
## scope = character
alias[trigger:days_of_continuous_war] == value_field

### number of days since the character has died.
## scope = character
alias[trigger:days_since_death] == alias_keys_field[int_value]

### number of days since the character has died.
## scope = character
alias[trigger:days_since_death] == single_alias_right[score_formula]

### number of days since the character has died.
## scope = character
alias[trigger:days_since_death] == value_field

### days_since_joined_court > 5
### Gets the days since scoped character joined their current court
## scope = character
alias[trigger:days_since_joined_court] == alias_keys_field[int_value]

### days_since_joined_court > 5
### Gets the days since scoped character joined their current court
## scope = character
alias[trigger:days_since_joined_court] == single_alias_right[score_formula]

### days_since_joined_court > 5
### Gets the days since scoped character joined their current court
## scope = character
alias[trigger:days_since_joined_court] == value_field

### Days since this vassal's liege's dynasty started ruling over this vassal
## scope = character
alias[trigger:days_since_vassal_contract_liege_dynasty_reign_start] == alias_keys_field[int_value]

### Days since this vassal's liege's dynasty started ruling over this vassal
## scope = character
alias[trigger:days_since_vassal_contract_liege_dynasty_reign_start] == single_alias_right[score_formula]

### Days since this vassal's liege's dynasty started ruling over this vassal
## scope = character
alias[trigger:days_since_vassal_contract_liege_dynasty_reign_start] == value_field

### Is the scoped character's debt level this value? -1 if not meeting any debt level threshold.
### 0 for the first one, and so on.
### Note that this might not match exactly with the modifier in effect as it calculates what the modifier will be now, and the character's actual modifier can lag behind
## scope = character
alias[trigger:debt_level] == alias_keys_field[int_value]

### Is the scoped character's debt level this value? -1 if not meeting any debt level threshold.
### 0 for the first one, and so on.
### Note that this might not match exactly with the modifier in effect as it calculates what the modifier will be now, and the character's actual modifier can lag behind
## scope = character
alias[trigger:debt_level] == single_alias_right[score_formula]

### Is the scoped character's debt level this value? -1 if not meeting any debt level threshold.
### 0 for the first one, and so on.
### Note that this might not match exactly with the modifier in effect as it calculates what the modifier will be now, and the character's actual modifier can lag behind
## scope = character
alias[trigger:debt_level] == value_field

### Diarch aptitude score for the scoped (potential) diarch
## scope = character
alias[trigger:diarch_aptitude] == alias_keys_field[int_value]

### Diarch aptitude score for the scoped (potential) diarch
## scope = character
alias[trigger:diarch_aptitude] == single_alias_right[score_formula]

### Diarch aptitude score for the scoped (potential) diarch
## scope = character
alias[trigger:diarch_aptitude] == value_field

### Diarch loyalty score for the scoped (potential) diarch
### scope:diarch = { diarch_loyalty >= 50 }
## scope = character
alias[trigger:diarch_loyalty] == alias_keys_field[int_value]

### Diarch loyalty score for the scoped (potential) diarch
### scope:diarch = { diarch_loyalty >= 50 }
## scope = character
alias[trigger:diarch_loyalty] == single_alias_right[score_formula]

### Diarch loyalty score for the scoped (potential) diarch
### scope:diarch = { diarch_loyalty >= 50 }
## scope = character
alias[trigger:diarch_loyalty] == value_field

### Get diarchy scales of power swing
### scope:liege = { diarchy_swing > 50 }
## scope = character
alias[trigger:diarchy_swing] == alias_keys_field[int_value]

### Get diarchy scales of power swing
### scope:liege = { diarchy_swing > 50 }
## scope = character
alias[trigger:diarchy_swing] == single_alias_right[score_formula]

### Get diarchy scales of power swing
### scope:liege = { diarchy_swing > 50 }
## scope = character
alias[trigger:diarchy_swing] == value_field

### does the character have the required diplomacy skill level?
## scope = character
alias[trigger:diplomacy] == alias_keys_field[int_value]

### does the character have the required diplomacy skill level?
## scope = character
alias[trigger:diplomacy] == single_alias_right[score_formula]

### does the character have the required diplomacy skill level?
## scope = character
alias[trigger:diplomacy] == value_field

### Diplomacy skill scaled between 0.0 and 1.0 for portraits
## scope = character
alias[trigger:diplomacy_for_portrait] == float[0.0..1.0]

### Is the scoped character's domain limit this big?
## scope = character
alias[trigger:domain_limit] == alias_keys_field[int_value]

### Is the scoped character's domain limit this big?
## scope = character
alias[trigger:domain_limit] == single_alias_right[score_formula]

### Is the scoped character's domain limit this big?
## scope = character
alias[trigger:domain_limit] == value_field

### Is there this much space left in the character's domain limit? Negative values also work for checking characters that are above their limit
## scope = character
alias[trigger:domain_limit_available] == alias_keys_field[int_value]

### Is there this much space left in the character's domain limit? Negative values also work for checking characters that are above their limit
## scope = character
alias[trigger:domain_limit_available] == single_alias_right[score_formula]

### Is there this much space left in the character's domain limit? Negative values also work for checking characters that are above their limit
## scope = character
alias[trigger:domain_limit_available] == value_field

### Is the scoped character's domain this big?
## scope = character
alias[trigger:domain_size] == alias_keys_field[int_value]

### Is the scoped character's domain this big?
## scope = character
alias[trigger:domain_size] == single_alias_right[score_formula]

### Is the scoped character's domain this big?
## scope = character
alias[trigger:domain_size] == value_field

### Is the scoped character's domain this big? Does not count titles currently in the grace period
## scope = character
alias[trigger:domain_size_excluding_grace_period] == alias_keys_field[int_value]

### Is the scoped character's domain this big? Does not count titles currently in the grace period
## scope = character
alias[trigger:domain_size_excluding_grace_period] == single_alias_right[score_formula]

### Is the scoped character's domain this big? Does not count titles currently in the grace period
## scope = character
alias[trigger:domain_size_excluding_grace_period] == value_field

### does the character have the required dread?
## scope = character
alias[trigger:dread] == alias_keys_field[int_value]

### does the character have the required dread?
## scope = character
alias[trigger:dread] == single_alias_right[score_formula]

### does the character have the required dread?
## scope = character
alias[trigger:dread] == value_field

### is the character old/young enough? If immortal, this uses the age they became immortal at
## scope = character
alias[trigger:effective_age] == alias_keys_field[int_value]

### is the character old/young enough? If immortal, this uses the age they became immortal at
## scope = character
alias[trigger:effective_age] == single_alias_right[score_formula]

### is the character old/young enough? If immortal, this uses the age they became immortal at
## scope = character
alias[trigger:effective_age] == value_field

### does the character have the required fertility?
## scope = character
alias[trigger:fertility] == alias_keys_field[int_value]

### does the character have the required fertility?
## scope = character
alias[trigger:fertility] == single_alias_right[score_formula]

### does the character have the required fertility?
## scope = character
alias[trigger:fertility] == value_field

### Does the character have this much focus progress
## scope = character
alias[trigger:focus_progress] == alias_keys_field[int_value]

### Does the character have this much focus progress
## scope = character
alias[trigger:focus_progress] == single_alias_right[score_formula]

### Does the character have this much focus progress
## scope = character
alias[trigger:focus_progress] == value_field

### does the character have the required gold?
## scope = character
alias[trigger:gold] == alias_keys_field[int_value]

### does the character have the required gold?
## scope = character
alias[trigger:gold] == single_alias_right[score_formula]

### does the character have the required gold?
## scope = character
alias[trigger:gold] == value_field

### Does the character had a focus for that time?
## scope = character
alias[trigger:has_had_focus_for_days] == alias_keys_field[int_value]

### Does the character had a focus for that time?
## scope = character
alias[trigger:has_had_focus_for_days] == single_alias_right[score_formula]

### Does the character had a focus for that time?
## scope = character
alias[trigger:has_had_focus_for_days] == value_field

### does the character have the required health?
## scope = character
alias[trigger:health] == alias_keys_field[int_value]

### does the character have the required health?
## scope = character
alias[trigger:health] == single_alias_right[score_formula]

### does the character have the required health?
## scope = character
alias[trigger:health] == value_field

### what is the highest held landed title tier of the character?
## scope = character
alias[trigger:highest_held_title_tier] == alias_keys_field[int_value]

### what is the highest held landed title tier of the character?
## scope = character
alias[trigger:highest_held_title_tier] == single_alias_right[score_formula]

### what is the highest held landed title tier of the character?
## scope = character
alias[trigger:highest_held_title_tier] == value_field

### does the character have the required influence?
## scope = character
alias[trigger:influence] == alias_keys_field[int_value]

### does the character have the required influence?
## scope = character
alias[trigger:influence] == single_alias_right[score_formula]

### does the character have the required influence?
## scope = character
alias[trigger:influence] == value_field

### does the character have the required influence level?
## scope = character
alias[trigger:influence_level] == alias_keys_field[int_value]

### does the character have the required influence level?
## scope = character
alias[trigger:influence_level] == single_alias_right[score_formula]

### does the character have the required influence level?
## scope = character
alias[trigger:influence_level] == value_field

### does the character have the required intrigue skill level?
## scope = character
alias[trigger:intrigue] == alias_keys_field[int_value]

### does the character have the required intrigue skill level?
## scope = character
alias[trigger:intrigue] == single_alias_right[score_formula]

### does the character have the required intrigue skill level?
## scope = character
alias[trigger:intrigue] == value_field

### Intrigue skill scaled between 0.0 and 1.0 for portraits
## scope = character
alias[trigger:intrigue_for_portrait] == float[0.0..1.0]

### does the character have the required learning skill level?
## scope = character
alias[trigger:learning] == alias_keys_field[int_value]

### does the character have the required learning skill level?
## scope = character
alias[trigger:learning] == single_alias_right[score_formula]

### does the character have the required learning skill level?
## scope = character
alias[trigger:learning] == value_field

### Learning skill scaled between 0.0 and 1.0 for portraits
## scope = character
alias[trigger:learning_for_portrait] == float[0.0..1.0]

### Gets the scoped character's current legitimacy
## scope = character
alias[trigger:legitimacy] == alias_keys_field[int_value]

### Gets the scoped character's current legitimacy
## scope = character
alias[trigger:legitimacy] == single_alias_right[score_formula]

### Gets the scoped character's current legitimacy
## scope = character
alias[trigger:legitimacy] == value_field

### Gets the scoped character's current legitimacy level
## scope = character
alias[trigger:legitimacy_level] == alias_keys_field[int_value]

### Gets the scoped character's current legitimacy level
## scope = character
alias[trigger:legitimacy_level] == single_alias_right[score_formula]

### Gets the scoped character's current legitimacy level
## scope = character
alias[trigger:legitimacy_level] == value_field

### The amount of levies a character sends to their liege
## scope = character
alias[trigger:levies_to_liege] == alias_keys_field[int_value]

### The amount of levies a character sends to their liege
## scope = character
alias[trigger:levies_to_liege] == single_alias_right[score_formula]

### The amount of levies a character sends to their liege
## scope = character
alias[trigger:levies_to_liege] == value_field

### does the character have the required gold? (AI category 'long term')
## scope = character
alias[trigger:long_term_gold] == alias_keys_field[int_value]

### does the character have the required gold? (AI category 'long term')
## scope = character
alias[trigger:long_term_gold] == single_alias_right[score_formula]

### does the character have the required gold? (AI category 'long term')
## scope = character
alias[trigger:long_term_gold] == value_field

### How big is the 'long term' budget is supposed to get?
## scope = character
alias[trigger:long_term_gold_maximum] == alias_keys_field[int_value]

### How big is the 'long term' budget is supposed to get?
## scope = character
alias[trigger:long_term_gold_maximum] == single_alias_right[score_formula]

### How big is the 'long term' budget is supposed to get?
## scope = character
alias[trigger:long_term_gold_maximum] == value_field

### Current number of personal MaA regiments
## scope = character
alias[trigger:maa_regiments_count] == alias_keys_field[int_value]

### Current number of personal MaA regiments
## scope = character
alias[trigger:maa_regiments_count] == single_alias_right[score_formula]

### Current number of personal MaA regiments
## scope = character
alias[trigger:maa_regiments_count] == value_field

### Max number of personal MaA regiment
## scope = character
alias[trigger:maa_regiments_max_count] == alias_keys_field[int_value]

### Max number of personal MaA regiment
## scope = character
alias[trigger:maa_regiments_max_count] == single_alias_right[score_formula]

### Max number of personal MaA regiment
## scope = character
alias[trigger:maa_regiments_max_count] == value_field

### Diarch qualification for spefic mandate type
## scope = character
alias[trigger:mandate_type_qualification] == alias_keys_field[int_value]

### Diarch qualification for spefic mandate type
## scope = character
alias[trigger:mandate_type_qualification] == single_alias_right[score_formula]

### Diarch qualification for spefic mandate type
## scope = character
alias[trigger:mandate_type_qualification] == value_field

### does the character have the required martial skill level?
## scope = character
alias[trigger:martial] == alias_keys_field[int_value]

### does the character have the required martial skill level?
## scope = character
alias[trigger:martial] == single_alias_right[score_formula]

### does the character have the required martial skill level?
## scope = character
alias[trigger:martial] == value_field

### Martial skill scaled between 0.0 and 1.0 for portraits
## scope = character
alias[trigger:martial_for_portrait] == float[0.0..1.0]

### How many active accolades can this character have at most?
### max_active_accolades <= 3
## scope = character
alias[trigger:max_active_accolades] == alias_keys_field[int_value]

### How many active accolades can this character have at most?
### max_active_accolades <= 3
## scope = character
alias[trigger:max_active_accolades] == single_alias_right[score_formula]

### How many active accolades can this character have at most?
### max_active_accolades <= 3
## scope = character
alias[trigger:max_active_accolades] == value_field

### Get the max domain fertility of the scoped character
## scope = character
alias[trigger:max_domain_fertility] == alias_keys_field[int_value]

### Get the max domain fertility of the scoped character
## scope = character
alias[trigger:max_domain_fertility] == single_alias_right[score_formula]

### Get the max domain fertility of the scoped character
## scope = character
alias[trigger:max_domain_fertility] == value_field

### Is the scoped character's max military strength this big?
## scope = character
alias[trigger:max_military_strength] == alias_keys_field[int_value]

### Is the scoped character's max military strength this big?
## scope = character
alias[trigger:max_military_strength] == single_alias_right[score_formula]

### Is the scoped character's max military strength this big?
## scope = character
alias[trigger:max_military_strength] == value_field

### Does the scope character have value amount of max soldiers of MaA of the base type?
## scope = character
alias[trigger:max_number_maa_soldiers_of_base_type] == alias_keys_field[int_value]

### Does the scope character have value amount of max soldiers of MaA of the base type?
## scope = character
alias[trigger:max_number_maa_soldiers_of_base_type] == single_alias_right[score_formula]

### Does the scope character have value amount of max soldiers of MaA of the base type?
## scope = character
alias[trigger:max_number_maa_soldiers_of_base_type] == value_field

### Does the scope character have value amount of max soldiers of MaA of the type?
## scope = character
alias[trigger:max_number_maa_soldiers_of_type] == alias_keys_field[int_value]

### Does the scope character have value amount of max soldiers of MaA of the type?
## scope = character
alias[trigger:max_number_maa_soldiers_of_type] == single_alias_right[score_formula]

### Does the scope character have value amount of max soldiers of MaA of the type?
## scope = character
alias[trigger:max_number_maa_soldiers_of_type] == value_field

### The maximum number of concubines a character can have
### max_number_of_concubines > 2
## scope = character
alias[trigger:max_number_of_concubines] == alias_keys_field[int_value]

### The maximum number of concubines a character can have
### max_number_of_concubines > 2
## scope = character
alias[trigger:max_number_of_concubines] == single_alias_right[score_formula]

### The maximum number of concubines a character can have
### max_number_of_concubines > 2
## scope = character
alias[trigger:max_number_of_concubines] == value_field

### Check how many knights the scoped character can potentially have
## scope = character
alias[trigger:max_number_of_knights] == alias_keys_field[int_value]

### Check how many knights the scoped character can potentially have
## scope = character
alias[trigger:max_number_of_knights] == single_alias_right[score_formula]

### Check how many knights the scoped character can potentially have
## scope = character
alias[trigger:max_number_of_knights] == value_field

### Is the scoped character's military power this big?
## scope = character
alias[trigger:military_power] == alias_keys_field[int_value]

### Is the scoped character's military power this big?
## scope = character
alias[trigger:military_power] == single_alias_right[score_formula]

### Is the scoped character's military power this big?
## scope = character
alias[trigger:military_power] == value_field

### Is the scoped character's monthly balance this big?
## scope = character
alias[trigger:monthly_character_balance] == alias_keys_field[int_value]

### Is the scoped character's monthly balance this big?
## scope = character
alias[trigger:monthly_character_balance] == single_alias_right[score_formula]

### Is the scoped character's monthly balance this big?
## scope = character
alias[trigger:monthly_character_balance] == value_field

### Is the scoped character's monthly expenses this big?
## scope = character
alias[trigger:monthly_character_expenses] == alias_keys_field[int_value]

### Is the scoped character's monthly expenses this big?
## scope = character
alias[trigger:monthly_character_expenses] == single_alias_right[score_formula]

### Is the scoped character's monthly expenses this big?
## scope = character
alias[trigger:monthly_character_expenses] == value_field

### Is the scoped character's monthly income this big?
## scope = character
alias[trigger:monthly_character_income] == alias_keys_field[int_value]

### Is the scoped character's monthly income this big?
## scope = character
alias[trigger:monthly_character_income] == single_alias_right[score_formula]

### Is the scoped character's monthly income this big?
## scope = character
alias[trigger:monthly_character_income] == value_field

### did the character allocate the required gold? (AI category long term)
## scope = character
alias[trigger:monthly_character_income_long_term] == alias_keys_field[int_value]

### did the character allocate the required gold? (AI category long term)
## scope = character
alias[trigger:monthly_character_income_long_term] == single_alias_right[score_formula]

### did the character allocate the required gold? (AI category long term)
## scope = character
alias[trigger:monthly_character_income_long_term] == value_field

### did the character allocate the required gold? (AI category reserved)
## scope = character
alias[trigger:monthly_character_income_reserved] == alias_keys_field[int_value]

### did the character allocate the required gold? (AI category reserved)
## scope = character
alias[trigger:monthly_character_income_reserved] == single_alias_right[score_formula]

### did the character allocate the required gold? (AI category reserved)
## scope = character
alias[trigger:monthly_character_income_reserved] == value_field

### did the character allocate the required gold? (AI category short term)
## scope = character
alias[trigger:monthly_character_income_short_term] == alias_keys_field[int_value]

### did the character allocate the required gold? (AI category short term)
## scope = character
alias[trigger:monthly_character_income_short_term] == single_alias_right[score_formula]

### did the character allocate the required gold? (AI category short term)
## scope = character
alias[trigger:monthly_character_income_short_term] == value_field

### did the character allocate the required gold? (AI category war chest)
## scope = character
alias[trigger:monthly_character_income_war_chest] == alias_keys_field[int_value]

### did the character allocate the required gold? (AI category war chest)
## scope = character
alias[trigger:monthly_character_income_war_chest] == single_alias_right[score_formula]

### did the character allocate the required gold? (AI category war chest)
## scope = character
alias[trigger:monthly_character_income_war_chest] == value_field

### Is the scoped character's monthly military gold expenses this big? (unraised maa costs)
## scope = character
alias[trigger:monthly_character_men_at_arms_expense_gold] == alias_keys_field[int_value]

### Is the scoped character's monthly military gold expenses this big? (unraised maa costs)
## scope = character
alias[trigger:monthly_character_men_at_arms_expense_gold] == single_alias_right[score_formula]

### Is the scoped character's monthly military gold expenses this big? (unraised maa costs)
## scope = character
alias[trigger:monthly_character_men_at_arms_expense_gold] == value_field

### Is the scoped character's monthly military prestige expenses this big? (unraised maa costs)
## scope = character
alias[trigger:monthly_character_men_at_arms_expense_prestige] == alias_keys_field[int_value]

### Is the scoped character's monthly military prestige expenses this big? (unraised maa costs)
## scope = character
alias[trigger:monthly_character_men_at_arms_expense_prestige] == single_alias_right[score_formula]

### Is the scoped character's monthly military prestige expenses this big? (unraised maa costs)
## scope = character
alias[trigger:monthly_character_men_at_arms_expense_prestige] == value_field

### Number of months this character has been a ruler, returns -1 if character isn't a ruler
## scope = character
alias[trigger:months_as_ruler] == alias_keys_field[int_value]

### Number of months this character has been a ruler, returns -1 if character isn't a ruler
## scope = character
alias[trigger:months_as_ruler] == single_alias_right[score_formula]

### Number of months this character has been a ruler, returns -1 if character isn't a ruler
## scope = character
alias[trigger:months_as_ruler] == value_field

### How many active accolades does this character currently have?
### num_active_accolades < 4
## scope = character
alias[trigger:num_active_accolades] == alias_keys_field[int_value]

### How many active accolades does this character currently have?
### num_active_accolades < 4
## scope = character
alias[trigger:num_active_accolades] == single_alias_right[score_formula]

### How many active accolades does this character currently have?
### num_active_accolades < 4
## scope = character
alias[trigger:num_active_accolades] == value_field

### How many inactive accolades does this character currently have?
### num_inactive_accolades > 0
## scope = character
alias[trigger:num_inactive_accolades] == alias_keys_field[int_value]

### How many inactive accolades does this character currently have?
### num_inactive_accolades > 0
## scope = character
alias[trigger:num_inactive_accolades] == single_alias_right[score_formula]

### How many inactive accolades does this character currently have?
### num_inactive_accolades > 0
## scope = character
alias[trigger:num_inactive_accolades] == value_field

### Compare the number of bad genetic traits
### <charater> = { num_of_bad_genetic_traits = 0 }
## scope = character
alias[trigger:num_of_bad_genetic_traits] == alias_keys_field[int_value]

### Compare the number of bad genetic traits
### <charater> = { num_of_bad_genetic_traits = 0 }
## scope = character
alias[trigger:num_of_bad_genetic_traits] == single_alias_right[score_formula]

### Compare the number of bad genetic traits
### <charater> = { num_of_bad_genetic_traits = 0 }
## scope = character
alias[trigger:num_of_bad_genetic_traits] == value_field

### Compare the number of good genetic traits
### <charater> = { num_of_good_genetic_traits >= 2 }
## scope = character
alias[trigger:num_of_good_genetic_traits] == alias_keys_field[int_value]

### Compare the number of good genetic traits
### <charater> = { num_of_good_genetic_traits >= 2 }
## scope = character
alias[trigger:num_of_good_genetic_traits] == single_alias_right[score_formula]

### Compare the number of good genetic traits
### <charater> = { num_of_good_genetic_traits >= 2 }
## scope = character
alias[trigger:num_of_good_genetic_traits] == value_field

### How many languages does the character know?
### num_of_known_languages > 1
## scope = character
alias[trigger:num_of_known_languages] == alias_keys_field[int_value]

### How many languages does the character know?
### num_of_known_languages > 1
## scope = character
alias[trigger:num_of_known_languages] == single_alias_right[score_formula]

### How many languages does the character know?
### num_of_known_languages > 1
## scope = character
alias[trigger:num_of_known_languages] == value_field

### Count of active task contract offered
### scope:actor = { num_offered_task_contracts > 0 }
## scope = character
alias[trigger:num_offered_task_contracts] == alias_keys_field[int_value]

### Count of active task contract offered
### scope:actor = { num_offered_task_contracts > 0 }
## scope = character
alias[trigger:num_offered_task_contracts] == single_alias_right[score_formula]

### Count of active task contract offered
### scope:actor = { num_offered_task_contracts > 0 }
## scope = character
alias[trigger:num_offered_task_contracts] == value_field

### How many personal legend seeds are available to this character?
## scope = character
alias[trigger:num_personal_legend_seeds] == alias_keys_field[int_value]

### How many personal legend seeds are available to this character?
## scope = character
alias[trigger:num_personal_legend_seeds] == single_alias_right[score_formula]

### How many personal legend seeds are available to this character?
## scope = character
alias[trigger:num_personal_legend_seeds] == value_field

### How many scripted legend seeds are available to this character? They do not need to be valid to start
## scope = character
alias[trigger:num_scripted_legend_seeds] == alias_keys_field[int_value]

### How many scripted legend seeds are available to this character? They do not need to be valid to start
## scope = character
alias[trigger:num_scripted_legend_seeds] == single_alias_right[score_formula]

### How many scripted legend seeds are available to this character? They do not need to be valid to start
## scope = character
alias[trigger:num_scripted_legend_seeds] == value_field

### Does the scoped character have this number of virtous traits?
### num_virtous_traits > 5 ORnum_virtous_traits = { value > 5 faith = scope:faith }, to base it on what a specific faith considers virtuous
## scope = character
alias[trigger:num_sinful_traits] == alias_keys_field[int_value]

### Does the scoped character have this number of virtous traits?
### num_virtous_traits > 5 ORnum_virtous_traits = { value > 5 faith = scope:faith }, to base it on what a specific faith considers virtuous
## scope = character
alias[trigger:num_sinful_traits] == single_alias_right[score_formula]

### Does the scoped character have this number of virtous traits?
### num_virtous_traits > 5 ORnum_virtous_traits = { value > 5 faith = scope:faith }, to base it on what a specific faith considers virtuous
## scope = character
alias[trigger:num_sinful_traits] == value_field

### Amount of taken task contracts for character (accepted & not yet completed)
### scope:actor = { num_taken_task_contracts > 0 }
## scope = character
alias[trigger:num_taken_task_contracts] == alias_keys_field[int_value]

### Amount of taken task contracts for character (accepted & not yet completed)
### scope:actor = { num_taken_task_contracts > 0 }
## scope = character
alias[trigger:num_taken_task_contracts] == single_alias_right[score_formula]

### Amount of taken task contracts for character (accepted & not yet completed)
### scope:actor = { num_taken_task_contracts > 0 }
## scope = character
alias[trigger:num_taken_task_contracts] == value_field

### Amount of tas contracts for character
### scope:actor = { num_task_contracts > 0 }
## scope = character
alias[trigger:num_task_contracts] == alias_keys_field[int_value]

### Amount of tas contracts for character
### scope:actor = { num_task_contracts > 0 }
## scope = character
alias[trigger:num_task_contracts] == single_alias_right[score_formula]

### Amount of tas contracts for character
### scope:actor = { num_task_contracts > 0 }
## scope = character
alias[trigger:num_task_contracts] == value_field

### How many scripted legend seeds are available to this character and valid to start?
## scope = character
alias[trigger:num_triggered_legend_seeds] == alias_keys_field[int_value]

### How many scripted legend seeds are available to this character and valid to start?
## scope = character
alias[trigger:num_triggered_legend_seeds] == single_alias_right[score_formula]

### How many scripted legend seeds are available to this character and valid to start?
## scope = character
alias[trigger:num_triggered_legend_seeds] == value_field

### Does the scoped character have this number of virtous traits?
### num_virtous_traits > 5 ORnum_virtous_traits = { value > 5 faith = scope:faith }, to base it on what a specific faith considers virtuous
## scope = character
alias[trigger:num_virtuous_traits] == alias_keys_field[int_value]

### Does the scoped character have this number of virtous traits?
### num_virtous_traits > 5 ORnum_virtous_traits = { value > 5 faith = scope:faith }, to base it on what a specific faith considers virtuous
## scope = character
alias[trigger:num_virtuous_traits] == single_alias_right[score_formula]

### Does the scoped character have this number of virtous traits?
### num_virtous_traits > 5 ORnum_virtous_traits = { value > 5 faith = scope:faith }, to base it on what a specific faith considers virtuous
## scope = character
alias[trigger:num_virtuous_traits] == value_field

### Does the scope character have value amount of MaA of the type?
## scope = character
alias[trigger:number_maa_regiments_of_type] == alias_keys_field[int_value]

### Does the scope character have value amount of MaA of the type?
## scope = character
alias[trigger:number_maa_regiments_of_type] == single_alias_right[score_formula]

### Does the scope character have value amount of MaA of the type?
## scope = character
alias[trigger:number_maa_regiments_of_type] == value_field

### Does the scope character have value amount of soldiers of MaA of the base type?
## scope = character
alias[trigger:number_maa_soldiers_of_base_type] == alias_keys_field[int_value]

### Does the scope character have value amount of soldiers of MaA of the base type?
## scope = character
alias[trigger:number_maa_soldiers_of_base_type] == single_alias_right[score_formula]

### Does the scope character have value amount of soldiers of MaA of the base type?
## scope = character
alias[trigger:number_maa_soldiers_of_base_type] == value_field

### Does the scope character have value amount of soldiers of MaA of the type?
## scope = character
alias[trigger:number_maa_soldiers_of_type] == alias_keys_field[int_value]

### Does the scope character have value amount of soldiers of MaA of the type?
## scope = character
alias[trigger:number_maa_soldiers_of_type] == single_alias_right[score_formula]

### Does the scope character have value amount of soldiers of MaA of the type?
## scope = character
alias[trigger:number_maa_soldiers_of_type] == value_field

### does the character have this many commander traits?
## scope = character
alias[trigger:number_of_commander_traits] == alias_keys_field[int_value]

### does the character have this many commander traits?
## scope = character
alias[trigger:number_of_commander_traits] == single_alias_right[score_formula]

### does the character have this many commander traits?
## scope = character
alias[trigger:number_of_commander_traits] == value_field

### The number of concubines the scoped character has
### number_of_concubines > 2
## scope = character
alias[trigger:number_of_concubines] == alias_keys_field[int_value]

### The number of concubines the scoped character has
### number_of_concubines > 2
## scope = character
alias[trigger:number_of_concubines] == single_alias_right[score_formula]

### The number of concubines the scoped character has
### number_of_concubines > 2
## scope = character
alias[trigger:number_of_concubines] == value_field

### The number of fertile concubines the scoped character should have to not get penalties
### number_of_desired_concubines > 2
## scope = character
alias[trigger:number_of_desired_concubines] == alias_keys_field[int_value]

### The number of fertile concubines the scoped character should have to not get penalties
### number_of_desired_concubines > 2
## scope = character
alias[trigger:number_of_desired_concubines] == single_alias_right[score_formula]

### The number of fertile concubines the scoped character should have to not get penalties
### number_of_desired_concubines > 2
## scope = character
alias[trigger:number_of_desired_concubines] == value_field

### The number of visibly fertile concubines the scoped character has
### number_of_fertile_concubines > 2
## scope = character
alias[trigger:number_of_fertile_concubines] == alias_keys_field[int_value]

### The number of visibly fertile concubines the scoped character has
### number_of_fertile_concubines > 2
## scope = character
alias[trigger:number_of_fertile_concubines] == single_alias_right[score_formula]

### The number of visibly fertile concubines the scoped character has
### number_of_fertile_concubines > 2
## scope = character
alias[trigger:number_of_fertile_concubines] == value_field

### Check how many knights the scoped character has at the moment
## scope = character
alias[trigger:number_of_knights] == alias_keys_field[int_value]

### Check how many knights the scoped character has at the moment
## scope = character
alias[trigger:number_of_knights] == single_alias_right[score_formula]

### Check how many knights the scoped character has at the moment
## scope = character
alias[trigger:number_of_knights] == value_field

### does the character have this many lifestyle traits?
## scope = character
alias[trigger:number_of_lifestyle_traits] == alias_keys_field[int_value]

### does the character have this many lifestyle traits?
## scope = character
alias[trigger:number_of_lifestyle_traits] == single_alias_right[score_formula]

### does the character have this many lifestyle traits?
## scope = character
alias[trigger:number_of_lifestyle_traits] == value_field

### The number of men at arms the scoped character has
## scope = character
alias[trigger:number_of_maa_regiments] == alias_keys_field[int_value]

### The number of men at arms the scoped character has
## scope = character
alias[trigger:number_of_maa_regiments] == single_alias_right[score_formula]

### The number of men at arms the scoped character has
## scope = character
alias[trigger:number_of_maa_regiments] == value_field

### does the character have this many personality traits?
## scope = character
alias[trigger:number_of_personality_traits] == alias_keys_field[int_value]

### does the character have this many personality traits?
## scope = character
alias[trigger:number_of_personality_traits] == single_alias_right[score_formula]

### does the character have this many personality traits?
## scope = character
alias[trigger:number_of_personality_traits] == value_field

### Does the character have a specified number of powerful vassals?
## scope = character
alias[trigger:number_of_powerful_vassals] == alias_keys_field[int_value]

### Does the character have a specified number of powerful vassals?
## scope = character
alias[trigger:number_of_powerful_vassals] == single_alias_right[score_formula]

### Does the character have a specified number of powerful vassals?
## scope = character
alias[trigger:number_of_powerful_vassals] == value_field

### The number of stationed men at arms the scoped character has
## scope = character
alias[trigger:number_of_stationed_maa_regiments] == alias_keys_field[int_value]

### The number of stationed men at arms the scoped character has
## scope = character
alias[trigger:number_of_stationed_maa_regiments] == single_alias_right[score_formula]

### The number of stationed men at arms the scoped character has
## scope = character
alias[trigger:number_of_stationed_maa_regiments] == value_field

### does the character have this many traits?
## scope = character
alias[trigger:number_of_traits] == alias_keys_field[int_value]

### does the character have this many traits?
## scope = character
alias[trigger:number_of_traits] == single_alias_right[score_formula]

### does the character have this many traits?
## scope = character
alias[trigger:number_of_traits] == value_field

### The number of tributaries the scoped character has
### number_of_tributaries > 2
## scope = character
alias[trigger:number_of_tributaries] == alias_keys_field[int_value]

### The number of tributaries the scoped character has
### number_of_tributaries > 2
## scope = character
alias[trigger:number_of_tributaries] == single_alias_right[score_formula]

### The number of tributaries the scoped character has
### number_of_tributaries > 2
## scope = character
alias[trigger:number_of_tributaries] == value_field

### The percentage of shared DNA between the character's parents.
### Traverses the family tree for NDefines::NChildbirth::INBREEDING_ANCESTOR_GENERATIONS amount of generations to find common ancestors. By default this means that we're traversing 4 generations (62 ancestors) and report the relatedness between the two parents. (See https://relatednesscalculator.nolanlawson.com/ for some examples).
### `relatedness > 0.25` where 0.0 means not related at all and 1.0 means identical twins
## scope = character
alias[trigger:parent_relatedness] == float[0.0..1.0]

### Checks how many wars the character has been in during their lifetime. (Only for alive characters): scope:character = { participated_wars > 3 }
## scope = character
alias[trigger:participated_wars] == alias_keys_field[int_value]

### Checks how many wars the character has been in during their lifetime. (Only for alive characters): scope:character = { participated_wars > 3 }
## scope = character
alias[trigger:participated_wars] == single_alias_right[score_formula]

### Checks how many wars the character has been in during their lifetime. (Only for alive characters): scope:character = { participated_wars > 3 }
## scope = character
alias[trigger:participated_wars] == value_field

### Does the character have this many perk points across all lifestyles combined?
## scope = character
alias[trigger:perk_points] == alias_keys_field[int_value]

### Does the character have this many perk points across all lifestyles combined?
## scope = character
alias[trigger:perk_points] == single_alias_right[score_formula]

### Does the character have this many perk points across all lifestyles combined?
## scope = character
alias[trigger:perk_points] == value_field

### Does the character have this many perk points assigned across all lifestyles combined?
## scope = character
alias[trigger:perk_points_assigned] == alias_keys_field[int_value]

### Does the character have this many perk points assigned across all lifestyles combined?
## scope = character
alias[trigger:perk_points_assigned] == single_alias_right[score_formula]

### Does the character have this many perk points assigned across all lifestyles combined?
## scope = character
alias[trigger:perk_points_assigned] == value_field

### does the character have the required piety?
## scope = character
alias[trigger:piety] == alias_keys_field[int_value]

### does the character have the required piety?
## scope = character
alias[trigger:piety] == single_alias_right[score_formula]

### does the character have the required piety?
## scope = character
alias[trigger:piety] == value_field

### does the character have the required piety level?
## scope = character
alias[trigger:piety_level] == alias_keys_field[int_value]

### does the character have the required piety level?
## scope = character
alias[trigger:piety_level] == single_alias_right[score_formula]

### does the character have the required piety level?
## scope = character
alias[trigger:piety_level] == value_field

### Check where the target character is in the scoped character's player heir list.
### player_heir_position = { target = scope:actor position = 0 }
## scope = character
alias[trigger:player_heir_position] == alias_keys_field[int_value]

### Check where the target character is in the scoped character's player heir list.
### player_heir_position = { target = scope:actor position = 0 }
## scope = character
alias[trigger:player_heir_position] == single_alias_right[score_formula]

### Check where the target character is in the scoped character's player heir list.
### player_heir_position = { target = scope:actor position = 0 }
## scope = character
alias[trigger:player_heir_position] == value_field

### How long has the character been pregnant? Counts from impregnation, not reveal
## scope = character
alias[trigger:pregnancy_days] == alias_keys_field[int_value]

### How long has the character been pregnant? Counts from impregnation, not reveal
## scope = character
alias[trigger:pregnancy_days] == single_alias_right[score_formula]

### How long has the character been pregnant? Counts from impregnation, not reveal
## scope = character
alias[trigger:pregnancy_days] == value_field

### does the character have the required prestige?
## scope = character
alias[trigger:prestige] == alias_keys_field[int_value]

### does the character have the required prestige?
## scope = character
alias[trigger:prestige] == single_alias_right[score_formula]

### does the character have the required prestige?
## scope = character
alias[trigger:prestige] == value_field

### does the character have the required prestige level?
## scope = character
alias[trigger:prestige_level] == alias_keys_field[int_value]

### does the character have the required prestige level?
## scope = character
alias[trigger:prestige_level] == single_alias_right[score_formula]

### does the character have the required prestige level?
## scope = character
alias[trigger:prestige_level] == value_field

### What is the provision cost between the domicile owner and the domicile's current location."
### In order to calculate the cost we will operate in three stages: 
### 1. Check if the from and to provinces are direct neighbours. 
### 2. Check any travel plan the domicile owner might have and see if the from and 
###    to are part of the travel plan. This will require domicile's location to be 
###    the first entry in the travel plan. 
### 3. Do a pathfind between the domicile and domicile owner's current location, 
###    using that path for the cost.
### scope:character = {
### 
### provision_cost_to_domicile > 100
### }
## scope = character
alias[trigger:provision_cost_to_domicile] == alias_keys_field[int_value]

### What is the provision cost between the domicile owner and the domicile's current location."
### In order to calculate the cost we will operate in three stages: 
### 1. Check if the from and to provinces are direct neighbours. 
### 2. Check any travel plan the domicile owner might have and see if the from and 
###    to are part of the travel plan. This will require domicile's location to be 
###    the first entry in the travel plan. 
### 3. Do a pathfind between the domicile and domicile owner's current location, 
###    using that path for the cost.
### scope:character = {
### 
### provision_cost_to_domicile > 100
### }
## scope = character
alias[trigger:provision_cost_to_domicile] == single_alias_right[score_formula]

### What is the provision cost between the domicile owner and the domicile's current location."
### In order to calculate the cost we will operate in three stages: 
### 1. Check if the from and to provinces are direct neighbours. 
### 2. Check any travel plan the domicile owner might have and see if the from and 
###    to are part of the travel plan. This will require domicile's location to be 
###    the first entry in the travel plan. 
### 3. Do a pathfind between the domicile and domicile owner's current location, 
###    using that path for the cost.
### scope:character = {
### 
### provision_cost_to_domicile > 100
### }
## scope = character
alias[trigger:provision_cost_to_domicile] == value_field

### does the character have the required prowess skill level?
## scope = character
alias[trigger:prowess] == alias_keys_field[int_value]

### does the character have the required prowess skill level?
## scope = character
alias[trigger:prowess] == single_alias_right[score_formula]

### does the character have the required prowess skill level?
## scope = character
alias[trigger:prowess] == value_field

### Prowess skill scaled between 0.0 and 1.0 for portraits
## scope = character
alias[trigger:prowess_for_portrait] == float[0.0..1.0]

### does the character have the required prowess skill level (ignores the prowess_no_portrait modifier)?
## scope = character
alias[trigger:prowess_no_portrait] == alias_keys_field[int_value]

### does the character have the required prowess skill level (ignores the prowess_no_portrait modifier)?
## scope = character
alias[trigger:prowess_no_portrait] == single_alias_right[score_formula]

### does the character have the required prowess skill level (ignores the prowess_no_portrait modifier)?
## scope = character
alias[trigger:prowess_no_portrait] == value_field

### what is the ransom cost of the character?
## scope = character
alias[trigger:ransom_cost] == alias_keys_field[int_value]

### what is the ransom cost of the character?
## scope = character
alias[trigger:ransom_cost] == single_alias_right[score_formula]

### what is the ransom cost of the character?
## scope = character
alias[trigger:ransom_cost] == value_field

### Is the scoped character's top liege's realm this big (# of counties)?
## scope = character
alias[trigger:realm_size] == alias_keys_field[int_value]

### Is the scoped character's top liege's realm this big (# of counties)?
## scope = character
alias[trigger:realm_size] == single_alias_right[score_formula]

### Is the scoped character's top liege's realm this big (# of counties)?
## scope = character
alias[trigger:realm_size] == value_field

### does the character have the required gold? (AI category 'reserved')
## scope = character
alias[trigger:reserved_gold] == alias_keys_field[int_value]

### does the character have the required gold? (AI category 'reserved')
## scope = character
alias[trigger:reserved_gold] == single_alias_right[score_formula]

### does the character have the required gold? (AI category 'reserved')
## scope = character
alias[trigger:reserved_gold] == value_field

### How big is the 'reserved' budget is supposed to get?
## scope = character
alias[trigger:reserved_gold_maximum] == alias_keys_field[int_value]

### How big is the 'reserved' budget is supposed to get?
## scope = character
alias[trigger:reserved_gold_maximum] == single_alias_right[score_formula]

### How big is the 'reserved' budget is supposed to get?
## scope = character
alias[trigger:reserved_gold_maximum] == value_field

### does the character have the specified dread baseline value?
## scope = character
alias[trigger:scriptedtests_dread_base] == alias_keys_field[int_value]

### does the character have the specified dread baseline value?
## scope = character
alias[trigger:scriptedtests_dread_base] == single_alias_right[score_formula]

### does the character have the specified dread baseline value?
## scope = character
alias[trigger:scriptedtests_dread_base] == value_field

### does the character have the specified tax income, excluding income from the theocratic lessee?
## scope = character
alias[trigger:scriptedtests_gold_income_no_theocracy] == alias_keys_field[int_value]

### does the character have the specified tax income, excluding income from the theocratic lessee?
## scope = character
alias[trigger:scriptedtests_gold_income_no_theocracy] == single_alias_right[score_formula]

### does the character have the specified tax income, excluding income from the theocratic lessee?
## scope = character
alias[trigger:scriptedtests_gold_income_no_theocracy] == value_field

### does the character have the specified piety income?
## scope = character
alias[trigger:scriptedtests_piety_income] == alias_keys_field[int_value]

### does the character have the specified piety income?
## scope = character
alias[trigger:scriptedtests_piety_income] == single_alias_right[score_formula]

### does the character have the specified piety income?
## scope = character
alias[trigger:scriptedtests_piety_income] == value_field

### does the character have the required gold? (AI category 'short term')
## scope = character
alias[trigger:short_term_gold] == alias_keys_field[int_value]

### does the character have the required gold? (AI category 'short term')
## scope = character
alias[trigger:short_term_gold] == single_alias_right[score_formula]

### does the character have the required gold? (AI category 'short term')
## scope = character
alias[trigger:short_term_gold] == value_field

### How big is the 'short term' budget is supposed to get?(It may exceed this if all other budgets are full)
## scope = character
alias[trigger:short_term_gold_maximum] == alias_keys_field[int_value]

### How big is the 'short term' budget is supposed to get?(It may exceed this if all other budgets are full)
## scope = character
alias[trigger:short_term_gold_maximum] == single_alias_right[score_formula]

### How big is the 'short term' budget is supposed to get?(It may exceed this if all other budgets are full)
## scope = character
alias[trigger:short_term_gold_maximum] == value_field

### does the character have the required stewardship skill level?
## scope = character
alias[trigger:stewardship] == alias_keys_field[int_value]

### does the character have the required stewardship skill level?
## scope = character
alias[trigger:stewardship] == single_alias_right[score_formula]

### does the character have the required stewardship skill level?
## scope = character
alias[trigger:stewardship] == value_field

### Stewardship skill scaled between 0.0 and 1.0 for portraits
## scope = character
alias[trigger:stewardship_for_portrait] == float[0.0..1.0]

### does the character have the required stress?
## scope = character
alias[trigger:stress] == alias_keys_field[int_value]

### does the character have the required stress?
## scope = character
alias[trigger:stress] == single_alias_right[score_formula]

### does the character have the required stress?
## scope = character
alias[trigger:stress] == value_field

### does the character have the required stress level?
## scope = character
alias[trigger:stress_level] == alias_keys_field[int_value]

### does the character have the required stress level?
## scope = character
alias[trigger:stress_level] == single_alias_right[score_formula]

### does the character have the required stress level?
## scope = character
alias[trigger:stress_level] == value_field

### Strife opinion value accumulated by the character
## scope = character
alias[trigger:strife_opinion] == alias_keys_field[int_value]

### Strife opinion value accumulated by the character
## scope = character
alias[trigger:strife_opinion] == single_alias_right[score_formula]

### Strife opinion value accumulated by the character
## scope = character
alias[trigger:strife_opinion] == value_field

### Is the scoped character's sub-realm this big (# of counties)?
## scope = character
alias[trigger:sub_realm_size] == alias_keys_field[int_value]

### Is the scoped character's sub-realm this big (# of counties)?
## scope = character
alias[trigger:sub_realm_size] == single_alias_right[score_formula]

### Is the scoped character's sub-realm this big (# of counties)?
## scope = character
alias[trigger:sub_realm_size] == value_field

### How much has the scoped character invested in the target title towards the target candidate?
### scope:character = {
### 
### succession_appointment_score_invested = {
### 
### 
### title = scope:title
### 
### 
### candidate = scope:character
### 
### 
### value < 0
### 
### }
### }
## scope = character
alias[trigger:succession_appointment_score_invested] == alias_keys_field[int_value]

### How much has the scoped character invested in the target title towards the target candidate?
### scope:character = {
### 
### succession_appointment_score_invested = {
### 
### 
### title = scope:title
### 
### 
### candidate = scope:character
### 
### 
### value < 0
### 
### }
### }
## scope = character
alias[trigger:succession_appointment_score_invested] == single_alias_right[score_formula]

### How much has the scoped character invested in the target title towards the target candidate?
### scope:character = {
### 
### succession_appointment_score_invested = {
### 
### 
### title = scope:title
### 
### 
### candidate = scope:character
### 
### 
### value < 0
### 
### }
### }
## scope = character
alias[trigger:succession_appointment_score_invested] == value_field

### Target weight of the scoped character
### target_weight > 10
## scope = character
alias[trigger:target_weight] == alias_keys_field[int_value]

### Target weight of the scoped character
### target_weight > 10
## scope = character
alias[trigger:target_weight] == single_alias_right[score_formula]

### Target weight of the scoped character
### target_weight > 10
## scope = character
alias[trigger:target_weight] == value_field

### The amount of tax a character sends to their liege
## scope = character
alias[trigger:tax_to_liege] == alias_keys_field[int_value]

### The amount of tax a character sends to their liege
## scope = character
alias[trigger:tax_to_liege] == single_alias_right[score_formula]

### The amount of tax a character sends to their liege
## scope = character
alias[trigger:tax_to_liege] == value_field

### What is the difference in highest_held_title_tier between the scoped character and the target character (-5 to 5)
### For example, this is true:
### scope:a_baron = {
###     tier_difference = {
###         target = scope:a_king
###         value = -3
###     }
### }
## scope = character
alias[trigger:tier_difference] == alias_keys_field[int_value]

### What is the difference in highest_held_title_tier between the scoped character and the target character (-5 to 5)
### For example, this is true:
### scope:a_baron = {
###     tier_difference = {
###         target = scope:a_king
###         value = -3
###     }
### }
## scope = character
alias[trigger:tier_difference] == single_alias_right[score_formula]

### What is the difference in highest_held_title_tier between the scoped character and the target character (-5 to 5)
### For example, this is true:
### scope:a_baron = {
###     tier_difference = {
###         target = scope:a_king
###         value = -3
###     }
### }
## scope = character
alias[trigger:tier_difference] == value_field

### The # of days until the scoped character's hook on the target expires
### time_to_hook_expiry = { target = someone value > 50 }
## scope = character
alias[trigger:time_to_hook_expiry] == alias_keys_field[int_value]

### The # of days until the scoped character's hook on the target expires
### time_to_hook_expiry = { target = someone value > 50 }
## scope = character
alias[trigger:time_to_hook_expiry] == single_alias_right[score_formula]

### The # of days until the scoped character's hook on the target expires
### time_to_hook_expiry = { target = someone value > 50 }
## scope = character
alias[trigger:time_to_hook_expiry] == value_field

### What this character would cost as a travel leader
## scope = character
alias[trigger:travel_leader_cost] == alias_keys_field[int_value]

### What this character would cost as a travel leader
## scope = character
alias[trigger:travel_leader_cost] == single_alias_right[score_formula]

### What this character would cost as a travel leader
## scope = character
alias[trigger:travel_leader_cost] == value_field

### The safety-aptitude of the current travel leader
## scope = character
alias[trigger:travel_leader_safety] == alias_keys_field[int_value]

### The safety-aptitude of the current travel leader
## scope = character
alias[trigger:travel_leader_safety] == single_alias_right[score_formula]

### The safety-aptitude of the current travel leader
## scope = character
alias[trigger:travel_leader_safety] == value_field

### The speed-aptitude of the current travel leader
## scope = character
alias[trigger:travel_leader_speed] == alias_keys_field[int_value]

### The speed-aptitude of the current travel leader
## scope = character
alias[trigger:travel_leader_speed] == single_alias_right[score_formula]

### The speed-aptitude of the current travel leader
## scope = character
alias[trigger:travel_leader_speed] == value_field

### does the character have the required tyranny?
## scope = character
alias[trigger:tyranny] == alias_keys_field[int_value]

### does the character have the required tyranny?
## scope = character
alias[trigger:tyranny] == single_alias_right[score_formula]

### does the character have the required tyranny?
## scope = character
alias[trigger:tyranny] == value_field

### The level of the provided contract type in the scoped character's current vassal contract
## scope = character
alias[trigger:vassal_contract_obligation_level] == alias_keys_field[int_value]

### The level of the provided contract type in the scoped character's current vassal contract
## scope = character
alias[trigger:vassal_contract_obligation_level] == single_alias_right[score_formula]

### The level of the provided contract type in the scoped character's current vassal contract
## scope = character
alias[trigger:vassal_contract_obligation_level] == value_field

### The score in favour of the vassal for the provided contract type in the scoped character's current vassal contract
## scope = character
alias[trigger:vassal_contract_obligation_level_score] == alias_keys_field[int_value]

### The score in favour of the vassal for the provided contract type in the scoped character's current vassal contract
## scope = character
alias[trigger:vassal_contract_obligation_level_score] == single_alias_right[score_formula]

### The score in favour of the vassal for the provided contract type in the scoped character's current vassal contract
## scope = character
alias[trigger:vassal_contract_obligation_level_score] == value_field

### Is the scoped character's number of vassals (excluding barons) this high?
## scope = character
alias[trigger:vassal_count] == alias_keys_field[int_value]

### Is the scoped character's number of vassals (excluding barons) this high?
## scope = character
alias[trigger:vassal_count] == single_alias_right[score_formula]

### Is the scoped character's number of vassals (excluding barons) this high?
## scope = character
alias[trigger:vassal_count] == value_field

### Is the scoped character's vassal limit this big?
## scope = character
alias[trigger:vassal_limit] == alias_keys_field[int_value]

### Is the scoped character's vassal limit this big?
## scope = character
alias[trigger:vassal_limit] == single_alias_right[score_formula]

### Is the scoped character's vassal limit this big?
## scope = character
alias[trigger:vassal_limit] == value_field

### Is there this much space left in the character's vassal limit? Negative values also work for checking characters that are above their limit
## scope = character
alias[trigger:vassal_limit_available] == alias_keys_field[int_value]

### Is there this much space left in the character's vassal limit? Negative values also work for checking characters that are above their limit
## scope = character
alias[trigger:vassal_limit_available] == single_alias_right[score_formula]

### Is there this much space left in the character's vassal limit? Negative values also work for checking characters that are above their limit
## scope = character
alias[trigger:vassal_limit_available] == value_field

### Is the scoped character's vassal count this big in comparison to their limit?
## scope = character
alias[trigger:vassal_limit_percentage] == alias_keys_field[int_value]

### Is the scoped character's vassal count this big in comparison to their limit?
## scope = character
alias[trigger:vassal_limit_percentage] == single_alias_right[score_formula]

### Is the scoped character's vassal count this big in comparison to their limit?
## scope = character
alias[trigger:vassal_limit_percentage] == value_field

### does the character have the required gold? (AI category 'war chest')
## scope = character
alias[trigger:war_chest_gold] == alias_keys_field[int_value]

### does the character have the required gold? (AI category 'war chest')
## scope = character
alias[trigger:war_chest_gold] == single_alias_right[score_formula]

### does the character have the required gold? (AI category 'war chest')
## scope = character
alias[trigger:war_chest_gold] == value_field

### How big is the 'war chest' budget is supposed to get?
## scope = character
alias[trigger:war_chest_gold_maximum] == alias_keys_field[int_value]

### How big is the 'war chest' budget is supposed to get?
## scope = character
alias[trigger:war_chest_gold_maximum] == single_alias_right[score_formula]

### How big is the 'war chest' budget is supposed to get?
## scope = character
alias[trigger:war_chest_gold_maximum] == value_field

### Get character year_of_birth: scope:character = { year_of_birth > 1096 }
## scope = character
alias[trigger:year_of_birth] == alias_keys_field[int_value]

### Get character year_of_birth: scope:character = { year_of_birth > 1096 }
## scope = character
alias[trigger:year_of_birth] == single_alias_right[score_formula]

### Get character year_of_birth: scope:character = { year_of_birth > 1096 }
## scope = character
alias[trigger:year_of_birth] == value_field

### Is the scoped character's yearly balance this big?
## scope = character
alias[trigger:yearly_character_balance] == alias_keys_field[int_value]

### Is the scoped character's yearly balance this big?
## scope = character
alias[trigger:yearly_character_balance] == single_alias_right[score_formula]

### Is the scoped character's yearly balance this big?
## scope = character
alias[trigger:yearly_character_balance] == value_field

### Is the scoped character's yearly expenses this big?
## scope = character
alias[trigger:yearly_character_expenses] == alias_keys_field[int_value]

### Is the scoped character's yearly expenses this big?
## scope = character
alias[trigger:yearly_character_expenses] == single_alias_right[score_formula]

### Is the scoped character's yearly expenses this big?
## scope = character
alias[trigger:yearly_character_expenses] == value_field

### Is the scoped character's yearly income this big?
## scope = character
alias[trigger:yearly_character_income] == alias_keys_field[int_value]

### Is the scoped character's yearly income this big?
## scope = character
alias[trigger:yearly_character_income] == single_alias_right[score_formula]

### Is the scoped character's yearly income this big?
## scope = character
alias[trigger:yearly_character_income] == value_field

### Is the scoped character's yearly military gold expenses this big? (unraised maa costs)
## scope = character
alias[trigger:yearly_character_men_at_arms_expense_gold] == alias_keys_field[int_value]

### Is the scoped character's yearly military gold expenses this big? (unraised maa costs)
## scope = character
alias[trigger:yearly_character_men_at_arms_expense_gold] == single_alias_right[score_formula]

### Is the scoped character's yearly military gold expenses this big? (unraised maa costs)
## scope = character
alias[trigger:yearly_character_men_at_arms_expense_gold] == value_field

### Is the scoped character's yearly military prestige expenses this big? (unraised maa costs)
## scope = character
alias[trigger:yearly_character_men_at_arms_expense_prestige] == alias_keys_field[int_value]

### Is the scoped character's yearly military prestige expenses this big? (unraised maa costs)
## scope = character
alias[trigger:yearly_character_men_at_arms_expense_prestige] == single_alias_right[score_formula]

### Is the scoped character's yearly military prestige expenses this big? (unraised maa costs)
## scope = character
alias[trigger:yearly_character_men_at_arms_expense_prestige] == value_field

### How many whole years has the character been an active diarch?
## scope = character
alias[trigger:years_as_diarch] == alias_keys_field[int_value]

### How many whole years has the character been an active diarch?
## scope = character
alias[trigger:years_as_diarch] == single_alias_right[score_formula]

### How many whole years has the character been an active diarch?
## scope = character
alias[trigger:years_as_diarch] == value_field

### Number of years this character has been a ruler, returns -1 if character isn't a ruler
## scope = character
alias[trigger:years_as_ruler] == alias_keys_field[int_value]

### Number of years this character has been a ruler, returns -1 if character isn't a ruler
## scope = character
alias[trigger:years_as_ruler] == single_alias_right[score_formula]

### Number of years this character has been a ruler, returns -1 if character isn't a ruler
## scope = character
alias[trigger:years_as_ruler] == value_field

### How many whole years has liege spent in a diarchy?
## scope = character
alias[trigger:years_in_diarchy] == alias_keys_field[int_value]

### How many whole years has liege spent in a diarchy?
## scope = character
alias[trigger:years_in_diarchy] == single_alias_right[score_formula]

### How many whole years has liege spent in a diarchy?
## scope = character
alias[trigger:years_in_diarchy] == value_field

### Number of total troops on boths sides.
### num_total_troops >= 2000
## scope = combat
alias[trigger:num_total_troops] == alias_keys_field[int_value]

### Number of total troops on boths sides.
### num_total_troops >= 2000
## scope = combat
alias[trigger:num_total_troops] == single_alias_right[score_formula]

### Number of total troops on boths sides.
### num_total_troops >= 2000
## scope = combat
alias[trigger:num_total_troops] == value_field

### Warscore value.
### warscore_value >= 25
## scope = combat
alias[trigger:warscore_value] == alias_keys_field[int_value]

### Warscore value.
### warscore_value >= 25
## scope = combat
alias[trigger:warscore_value] == single_alias_right[score_formula]

### Warscore value.
### warscore_value >= 25
## scope = combat
alias[trigger:warscore_value] == value_field

### task_current_value = scope:county.active_de_jure_drift_progress
## scope = landed_title
alias[trigger:active_de_jure_drift_progress] == alias_keys_field[int_value]

### task_current_value = scope:county.active_de_jure_drift_progress
## scope = landed_title
alias[trigger:active_de_jure_drift_progress] == single_alias_right[score_formula]

### task_current_value = scope:county.active_de_jure_drift_progress
## scope = landed_title
alias[trigger:active_de_jure_drift_progress] == value_field

### does the county title have the required county countrol?
## scope = landed_title
alias[trigger:county_control] == alias_keys_field[int_value]

### does the county title have the required county countrol?
## scope = landed_title
alias[trigger:county_control] == single_alias_right[score_formula]

### does the county title have the required county countrol?
## scope = landed_title
alias[trigger:county_control] == value_field

### Does the county title have the required County Fertility value?
### scope:county.county_fertility >= <value>
## scope = landed_title
alias[trigger:county_fertility] == alias_keys_field[int_value]

### Does the county title have the required County Fertility value?
### scope:county.county_fertility >= <value>
## scope = landed_title
alias[trigger:county_fertility] == single_alias_right[score_formula]

### Does the county title have the required County Fertility value?
### scope:county.county_fertility >= <value>
## scope = landed_title
alias[trigger:county_fertility] == value_field

### Compares the county's opinion of its holder
## scope = landed_title
alias[trigger:county_holder_opinion] == alias_keys_field[int_value]

### Compares the county's opinion of its holder
## scope = landed_title
alias[trigger:county_holder_opinion] == single_alias_right[score_formula]

### Compares the county's opinion of its holder
## scope = landed_title
alias[trigger:county_holder_opinion] == value_field

### compares the county's opinion of the current count
## scope = landed_title
alias[trigger:county_opinion] == alias_keys_field[int_value]

### compares the county's opinion of the current count
## scope = landed_title
alias[trigger:county_opinion] == single_alias_right[score_formula]

### compares the county's opinion of the current count
## scope = landed_title
alias[trigger:county_opinion] == value_field

### does the county title have the required county development level?
## scope = landed_title
alias[trigger:development_level] == alias_keys_field[int_value]

### does the county title have the required county development level?
## scope = landed_title
alias[trigger:development_level] == single_alias_right[score_formula]

### does the county title have the required county development level?
## scope = landed_title
alias[trigger:development_level] == value_field

### how much development progress is the county gaining each month?
## scope = landed_title
alias[trigger:development_rate] == alias_keys_field[int_value]

### how much development progress is the county gaining each month?
## scope = landed_title
alias[trigger:development_rate] == single_alias_right[score_formula]

### how much development progress is the county gaining each month?
## scope = landed_title
alias[trigger:development_rate] == value_field

### What's the multiplier to the development progress?
## scope = landed_title
alias[trigger:development_rate_modifier] == alias_keys_field[int_value]

### What's the multiplier to the development progress?
## scope = landed_title
alias[trigger:development_rate_modifier] == single_alias_right[score_formula]

### What's the multiplier to the development progress?
## scope = landed_title
alias[trigger:development_rate_modifier] == value_field

### does the county title have the required progress towards the next level of development? E.G., if level 1 is 100, level 2 is 300 (these are set in defines), and current total is 150, this would return 50
## scope = landed_title
alias[trigger:development_towards_level_increase] == alias_keys_field[int_value]

### does the county title have the required progress towards the next level of development? E.G., if level 1 is 100, level 2 is 300 (these are set in defines), and current total is 150, this would return 50
## scope = landed_title
alias[trigger:development_towards_level_increase] == single_alias_right[score_formula]

### does the county title have the required progress towards the next level of development? E.G., if level 1 is 100, level 2 is 300 (these are set in defines), and current total is 150, this would return 50
## scope = landed_title
alias[trigger:development_towards_level_increase] == value_field

### Check the projected fertility equilibrium of a scoped county
### This script is very heavy - and should only be used in script at your own risk, modders.
## scope = landed_title
alias[trigger:fertility_equilibrium] == alias_keys_field[int_value]

### Check the projected fertility equilibrium of a scoped county
### This script is very heavy - and should only be used in script at your own risk, modders.
## scope = landed_title
alias[trigger:fertility_equilibrium] == single_alias_right[score_formula]

### Check the projected fertility equilibrium of a scoped county
### This script is very heavy - and should only be used in script at your own risk, modders.
## scope = landed_title
alias[trigger:fertility_equilibrium] == value_field

### How much county control is the county gaining/losing each month in total?
## scope = landed_title
alias[trigger:monthly_county_control_change] == alias_keys_field[int_value]

### How much county control is the county gaining/losing each month in total?
## scope = landed_title
alias[trigger:monthly_county_control_change] == single_alias_right[score_formula]

### How much county control is the county gaining/losing each month in total?
## scope = landed_title
alias[trigger:monthly_county_control_change] == value_field

### How much county control is the county declining each month? (ignoring any growth)
## scope = landed_title
alias[trigger:monthly_county_control_decline] == alias_keys_field[int_value]

### How much county control is the county declining each month? (ignoring any growth)
## scope = landed_title
alias[trigger:monthly_county_control_decline] == single_alias_right[score_formula]

### How much county control is the county declining each month? (ignoring any growth)
## scope = landed_title
alias[trigger:monthly_county_control_decline] == value_field

### What's the multiplier to the control decline rate? E.G., if there's just a +20% modifier, this would return 1.2
## scope = landed_title
alias[trigger:monthly_county_control_decline_factor] == alias_keys_field[int_value]

### What's the multiplier to the control decline rate? E.G., if there's just a +20% modifier, this would return 1.2
## scope = landed_title
alias[trigger:monthly_county_control_decline_factor] == single_alias_right[score_formula]

### What's the multiplier to the control decline rate? E.G., if there's just a +20% modifier, this would return 1.2
## scope = landed_title
alias[trigger:monthly_county_control_decline_factor] == value_field

### How much county control is the county gaining each month? (ignoring any decline)
## scope = landed_title
alias[trigger:monthly_county_control_growth] == alias_keys_field[int_value]

### How much county control is the county gaining each month? (ignoring any decline)
## scope = landed_title
alias[trigger:monthly_county_control_growth] == single_alias_right[score_formula]

### How much county control is the county gaining each month? (ignoring any decline)
## scope = landed_title
alias[trigger:monthly_county_control_growth] == value_field

### What's the multiplier to the control growth rate? E.G., if there's just a +20% modifier, this would return 1.2
## scope = landed_title
alias[trigger:monthly_county_control_growth_factor] == alias_keys_field[int_value]

### What's the multiplier to the control growth rate? E.G., if there's just a +20% modifier, this would return 1.2
## scope = landed_title
alias[trigger:monthly_county_control_growth_factor] == single_alias_right[score_formula]

### What's the multiplier to the control growth rate? E.G., if there's just a +20% modifier, this would return 1.2
## scope = landed_title
alias[trigger:monthly_county_control_growth_factor] == value_field

### How many provinces in this county have holdings
## scope = landed_title
alias[trigger:num_county_holdings] == alias_keys_field[int_value]

### How many provinces in this county have holdings
## scope = landed_title
alias[trigger:num_county_holdings] == single_alias_right[score_formula]

### How many provinces in this county have holdings
## scope = landed_title
alias[trigger:num_county_holdings] == value_field

### What tier is the scoped title? barony = 1, empire = 5. Use the script values please, not raw numbers
## scope = landed_title
alias[trigger:tier] == alias_keys_field[int_value]

### What tier is the scoped title? barony = 1, empire = 5. Use the script values please, not raw numbers
## scope = landed_title
alias[trigger:tier] == single_alias_right[score_formula]

### What tier is the scoped title? barony = 1, empire = 5. Use the script values please, not raw numbers
## scope = landed_title
alias[trigger:tier] == value_field

### Returns the number of years a title is held if valid (otherwise returns 0)
## scope = landed_title
alias[trigger:title_held_years] == alias_keys_field[int_value]

### Returns the number of years a title is held if valid (otherwise returns 0)
## scope = landed_title
alias[trigger:title_held_years] == single_alias_right[score_formula]

### Returns the number of years a title is held if valid (otherwise returns 0)
## scope = landed_title
alias[trigger:title_held_years] == value_field

### Average opinion of all the characters of the faction scope target
## scope = faction
alias[trigger:average_faction_opinion] == alias_keys_field[int_value]

### Average opinion of all the characters of the faction scope target
## scope = faction
alias[trigger:average_faction_opinion] == single_alias_right[score_formula]

### Average opinion of all the characters of the faction scope target
## scope = faction
alias[trigger:average_faction_opinion] == value_field

### Average opinion of the character that are NOT powerful vassals of the faction scope target
## scope = faction
alias[trigger:average_faction_opinion_not_powerful_vassal] == alias_keys_field[int_value]

### Average opinion of the character that are NOT powerful vassals of the faction scope target
## scope = faction
alias[trigger:average_faction_opinion_not_powerful_vassal] == single_alias_right[score_formula]

### Average opinion of the character that are NOT powerful vassals of the faction scope target
## scope = faction
alias[trigger:average_faction_opinion_not_powerful_vassal] == value_field

### Average opinion of the character that are powerful vassals of the faction scope target
## scope = faction
alias[trigger:average_faction_opinion_powerful_vassal] == alias_keys_field[int_value]

### Average opinion of the character that are powerful vassals of the faction scope target
## scope = faction
alias[trigger:average_faction_opinion_powerful_vassal] == single_alias_right[score_formula]

### Average opinion of the character that are powerful vassals of the faction scope target
## scope = faction
alias[trigger:average_faction_opinion_powerful_vassal] == value_field

### How much is the Faction's Discontent increasing each month?
## scope = faction
alias[trigger:discontent_per_month] == alias_keys_field[int_value]

### How much is the Faction's Discontent increasing each month?
## scope = faction
alias[trigger:discontent_per_month] == single_alias_right[score_formula]

### How much is the Faction's Discontent increasing each month?
## scope = faction
alias[trigger:discontent_per_month] == value_field

### Current discontent of the faction
## scope = faction
alias[trigger:faction_discontent] == alias_keys_field[int_value]

### Current discontent of the faction
## scope = faction
alias[trigger:faction_discontent] == single_alias_right[score_formula]

### Current discontent of the faction
## scope = faction
alias[trigger:faction_discontent] == value_field

### Current power of the faction
## scope = faction
alias[trigger:faction_power] == alias_keys_field[int_value]

### Current power of the faction
## scope = faction
alias[trigger:faction_power] == single_alias_right[score_formula]

### Current power of the faction
## scope = faction
alias[trigger:faction_power] == value_field

### Current power threshold of the faction
## scope = faction
alias[trigger:faction_power_threshold] == alias_keys_field[int_value]

### Current power threshold of the faction
## scope = faction
alias[trigger:faction_power_threshold] == single_alias_right[score_formula]

### Current power threshold of the faction
## scope = faction
alias[trigger:faction_power_threshold] == value_field

### How many months until Discontent is max (100)?
## scope = faction
alias[trigger:months_until_max_discontent] == alias_keys_field[int_value]

### How many months until Discontent is max (100)?
## scope = faction
alias[trigger:months_until_max_discontent] == single_alias_right[score_formula]

### How many months until Discontent is max (100)?
## scope = faction
alias[trigger:months_until_max_discontent] == value_field

### Current number of faction members in faction
## scope = faction
alias[trigger:number_of_faction_members_in_council] == alias_keys_field[int_value]

### Current number of faction members in faction
## scope = faction
alias[trigger:number_of_faction_members_in_council] == single_alias_right[score_formula]

### Current number of faction members in faction
## scope = faction
alias[trigger:number_of_faction_members_in_council] == value_field

### The amount of levies in a county or province from buildings
### levies > 100
## scope = { landed_title province }
alias[trigger:building_levies] == alias_keys_field[int_value]

### The amount of levies in a county or province from buildings
### levies > 100
## scope = { landed_title province }
alias[trigger:building_levies] == single_alias_right[score_formula]

### The amount of levies in a county or province from buildings
### levies > 100
## scope = { landed_title province }
alias[trigger:building_levies] == value_field

### The max amount of garrison in a county or province from buildings
### levies > 100
## scope = { landed_title province }
alias[trigger:building_max_garrison] == alias_keys_field[int_value]

### The max amount of garrison in a county or province from buildings
### levies > 100
## scope = { landed_title province }
alias[trigger:building_max_garrison] == single_alias_right[score_formula]

### The max amount of garrison in a county or province from buildings
### levies > 100
## scope = { landed_title province }
alias[trigger:building_max_garrison] == value_field

### Number of troops killed on the opposite side.
### num_enemies_killed >= 500
## scope = combat_side
alias[trigger:num_enemies_killed] == alias_keys_field[int_value]

### Number of troops killed on the opposite side.
### num_enemies_killed >= 500
## scope = combat_side
alias[trigger:num_enemies_killed] == single_alias_right[score_formula]

### Number of troops killed on the opposite side.
### num_enemies_killed >= 500
## scope = combat_side
alias[trigger:num_enemies_killed] == value_field

### Percantage of enemies killed out of total number of enemy soldiers.
### percent_enemies_killed >= 80
## scope = combat_side
alias[trigger:percent_enemies_killed] == alias_keys_field[int_value]

### Percantage of enemies killed out of total number of enemy soldiers.
### percent_enemies_killed >= 80
## scope = combat_side
alias[trigger:percent_enemies_killed] == single_alias_right[score_formula]

### Percantage of enemies killed out of total number of enemy soldiers.
### percent_enemies_killed >= 80
## scope = combat_side
alias[trigger:percent_enemies_killed] == value_field

### what is the current size of all armies combined on this combat side?
## scope = combat_side
alias[trigger:side_army_size] == alias_keys_field[int_value]

### what is the current size of all armies combined on this combat side?
## scope = combat_side
alias[trigger:side_army_size] == single_alias_right[score_formula]

### what is the current size of all armies combined on this combat side?
## scope = combat_side
alias[trigger:side_army_size] == value_field

### what is the max possible size of all armies combined on this combat side?
## scope = combat_side
alias[trigger:side_max_army_size] == alias_keys_field[int_value]

### what is the max possible size of all armies combined on this combat side?
## scope = combat_side
alias[trigger:side_max_army_size] == single_alias_right[score_formula]

### what is the max possible size of all armies combined on this combat side?
## scope = combat_side
alias[trigger:side_max_army_size] == value_field

### How many soldiers does this side have still fighting?
## scope = combat_side
alias[trigger:side_soldiers] == alias_keys_field[int_value]

### How many soldiers does this side have still fighting?
## scope = combat_side
alias[trigger:side_soldiers] == single_alias_right[score_formula]

### How many soldiers does this side have still fighting?
## scope = combat_side
alias[trigger:side_soldiers] == value_field

### How strong is this side (based on soldiers still fighting)? Scaled down by a factor of 1000 so it doesn't get too large to do math on
## scope = combat_side
alias[trigger:side_strength] == alias_keys_field[int_value]

### How strong is this side (based on soldiers still fighting)? Scaled down by a factor of 1000 so it doesn't get too large to do math on
## scope = combat_side
alias[trigger:side_strength] == single_alias_right[score_formula]

### How strong is this side (based on soldiers still fighting)? Scaled down by a factor of 1000 so it doesn't get too large to do math on
## scope = combat_side
alias[trigger:side_strength] == value_field

### Side's troops/opposide side's troops.ntroops_ratio < 0.5
## scope = combat_side
alias[trigger:troops_ratio] == alias_keys_field[int_value]

### Side's troops/opposide side's troops.ntroops_ratio < 0.5
## scope = combat_side
alias[trigger:troops_ratio] == single_alias_right[score_formula]

### Side's troops/opposide side's troops.ntroops_ratio < 0.5
## scope = combat_side
alias[trigger:troops_ratio] == value_field

### Total amount of external building slots for scoped domicile
### scope:domicile = { external_domicile_building_slots == 5 }
## scope = domicile
alias[trigger:external_domicile_building_slots] == alias_keys_field[int_value]

### Total amount of external building slots for scoped domicile
### scope:domicile = { external_domicile_building_slots == 5 }
## scope = domicile
alias[trigger:external_domicile_building_slots] == single_alias_right[score_formula]

### Total amount of external building slots for scoped domicile
### scope:domicile = { external_domicile_building_slots == 5 }
## scope = domicile
alias[trigger:external_domicile_building_slots] == value_field

### Amount of free external building slots for scoped domicile
### scope:domicile = { free_external_domicile_building_slots < 1 }
## scope = domicile
alias[trigger:free_external_domicile_building_slots] == alias_keys_field[int_value]

### Amount of free external building slots for scoped domicile
### scope:domicile = { free_external_domicile_building_slots < 1 }
## scope = domicile
alias[trigger:free_external_domicile_building_slots] == single_alias_right[score_formula]

### Amount of free external building slots for scoped domicile
### scope:domicile = { free_external_domicile_building_slots < 1 }
## scope = domicile
alias[trigger:free_external_domicile_building_slots] == value_field

### does the scoped domicile have the required herd?
## scope = domicile
alias[trigger:herd] == alias_keys_field[int_value]

### does the scoped domicile have the required herd?
## scope = domicile
alias[trigger:herd] == single_alias_right[score_formula]

### does the scoped domicile have the required herd?
## scope = domicile
alias[trigger:herd] == value_field

### what is the amount of currently raised horde (or potential horde if none are raised) of the scoped domicile?
## scope = domicile
alias[trigger:horde] == alias_keys_field[int_value]

### what is the amount of currently raised horde (or potential horde if none are raised) of the scoped domicile?
## scope = domicile
alias[trigger:horde] == single_alias_right[score_formula]

### what is the amount of currently raised horde (or potential horde if none are raised) of the scoped domicile?
## scope = domicile
alias[trigger:horde] == value_field

### what is the herd limit of the scoped domicile?
## scope = domicile
alias[trigger:max_herd] == alias_keys_field[int_value]

### what is the herd limit of the scoped domicile?
## scope = domicile
alias[trigger:max_herd] == single_alias_right[score_formula]

### what is the herd limit of the scoped domicile?
## scope = domicile
alias[trigger:max_herd] == value_field

### does the scoped domicile have the required max provisions?
## scope = domicile
alias[trigger:max_provisions] == alias_keys_field[int_value]

### does the scoped domicile have the required max provisions?
## scope = domicile
alias[trigger:max_provisions] == single_alias_right[score_formula]

### does the scoped domicile have the required max provisions?
## scope = domicile
alias[trigger:max_provisions] == value_field

### Amount of buildings constructed for scoped domicile
### scope:domicile = { num_domicile_buildings > 0 }
## scope = domicile
alias[trigger:num_domicile_buildings] == alias_keys_field[int_value]

### Amount of buildings constructed for scoped domicile
### scope:domicile = { num_domicile_buildings > 0 }
## scope = domicile
alias[trigger:num_domicile_buildings] == single_alias_right[score_formula]

### Amount of buildings constructed for scoped domicile
### scope:domicile = { num_domicile_buildings > 0 }
## scope = domicile
alias[trigger:num_domicile_buildings] == value_field

### Is the provision cost from the domicile's current location to it's owner.
### In order to calculate the cost we will operate in three stages: 
### 1. Check if the from and to provinces are direct neighbours. 
### 2. Check any travel plan the domicile owner might have and see if the from and 
###    to are part of the travel plan. This will require domicile's location to be 
###    the first entry in the travel plan. 
### 3. Do a pathfind between the domicile and domicile owner's current location, 
###    using that path for the cost.
### scope:domicile = {
### 
### provision_cost_to_owner < 100
### }
## scope = domicile
alias[trigger:provision_cost_to_owner] == alias_keys_field[int_value]

### Is the provision cost from the domicile's current location to it's owner.
### In order to calculate the cost we will operate in three stages: 
### 1. Check if the from and to provinces are direct neighbours. 
### 2. Check any travel plan the domicile owner might have and see if the from and 
###    to are part of the travel plan. This will require domicile's location to be 
###    the first entry in the travel plan. 
### 3. Do a pathfind between the domicile and domicile owner's current location, 
###    using that path for the cost.
### scope:domicile = {
### 
### provision_cost_to_owner < 100
### }
## scope = domicile
alias[trigger:provision_cost_to_owner] == single_alias_right[score_formula]

### Is the provision cost from the domicile's current location to it's owner.
### In order to calculate the cost we will operate in three stages: 
### 1. Check if the from and to provinces are direct neighbours. 
### 2. Check any travel plan the domicile owner might have and see if the from and 
###    to are part of the travel plan. This will require domicile's location to be 
###    the first entry in the travel plan. 
### 3. Do a pathfind between the domicile and domicile owner's current location, 
###    using that path for the cost.
### scope:domicile = {
### 
### provision_cost_to_owner < 100
### }
## scope = domicile
alias[trigger:provision_cost_to_owner] == value_field

### does the scoped domicile have the required provisions?
## scope = domicile
alias[trigger:provisions] == alias_keys_field[int_value]

### does the scoped domicile have the required provisions?
## scope = domicile
alias[trigger:provisions] == single_alias_right[score_formula]

### does the scoped domicile have the required provisions?
## scope = domicile
alias[trigger:provisions] == value_field

### base_inspiration_gold_cost > 5
### Gets the base gold cost of the scoped inspiration
## scope = inspiration
alias[trigger:base_inspiration_gold_cost] == alias_keys_field[int_value]

### base_inspiration_gold_cost > 5
### Gets the base gold cost of the scoped inspiration
## scope = inspiration
alias[trigger:base_inspiration_gold_cost] == single_alias_right[score_formula]

### base_inspiration_gold_cost > 5
### Gets the base gold cost of the scoped inspiration
## scope = inspiration
alias[trigger:base_inspiration_gold_cost] == value_field

### days_since_creation > 5
### Gets the days since creation of the scoped inspiration
## scope = inspiration
alias[trigger:days_since_creation] == alias_keys_field[int_value]

### days_since_creation > 5
### Gets the days since creation of the scoped inspiration
## scope = inspiration
alias[trigger:days_since_creation] == single_alias_right[score_formula]

### days_since_creation > 5
### Gets the days since creation of the scoped inspiration
## scope = inspiration
alias[trigger:days_since_creation] == value_field

### days_since_sponsorship > 5
### Gets the days since sponsorship started of the scoped inspiration
## scope = inspiration
alias[trigger:days_since_sponsorship] == alias_keys_field[int_value]

### days_since_sponsorship > 5
### Gets the days since sponsorship started of the scoped inspiration
## scope = inspiration
alias[trigger:days_since_sponsorship] == single_alias_right[score_formula]

### days_since_sponsorship > 5
### Gets the days since sponsorship started of the scoped inspiration
## scope = inspiration
alias[trigger:days_since_sponsorship] == value_field

### inspiration_gold_invested > 5
### Gets the amount of gold invested in the scoped inspiration
## scope = inspiration
alias[trigger:inspiration_gold_invested] == alias_keys_field[int_value]

### inspiration_gold_invested > 5
### Gets the amount of gold invested in the scoped inspiration
## scope = inspiration
alias[trigger:inspiration_gold_invested] == single_alias_right[score_formula]

### inspiration_gold_invested > 5
### Gets the amount of gold invested in the scoped inspiration
## scope = inspiration
alias[trigger:inspiration_gold_invested] == value_field

### inspiration_progress > 5
### Gets the progress of the scoped inspiration
## scope = inspiration
alias[trigger:inspiration_progress] == alias_keys_field[int_value]

### inspiration_progress > 5
### Gets the progress of the scoped inspiration
## scope = inspiration
alias[trigger:inspiration_progress] == single_alias_right[score_formula]

### inspiration_progress > 5
### Gets the progress of the scoped inspiration
## scope = inspiration
alias[trigger:inspiration_progress] == value_field

