# Autogenerated file, do not edit manually
### Can the scoped dynasty unlock a 'relevant' perk? Relevant meaning one that isn't the first in its track unless the dynasty has no partially filled tracks
## scope = dynasty
alias[trigger:dynasty_can_unlock_relevant_perk] = bool

### Check if the current activity is completed or not, this doesn't have much use for content since we delete an activity as soon as we can, but in multiplayer it exists until everyone stops viewing it so we use this to cancel some delayed events
### is_activity_complete = yes/no
## scope = activity
alias[trigger:is_activity_complete] = bool

### Check if the current activity phase is in the active state (else it is in the passive state)
### is_current_phase_active = yes/no
## scope = activity
alias[trigger:is_current_phase_active] = bool

### Check if the scoped activity is an open invite activity
### is_open_invite_activity = yes/no
## scope = activity
alias[trigger:is_open_invite_activity] = bool

### Does the culture have the same ethos as the target?
## scope = culture
alias[trigger:has_same_culture_ethos] = scope[culture]

### Does the culture have the same head determination as the target?
## scope = culture
alias[trigger:has_same_culture_head_determination] = scope[culture]

### Does the culture have the same heritage as the target?
## scope = culture
alias[trigger:has_same_culture_heritage] = scope[culture]

### Does the culture have the same language as the target?
## scope = culture
alias[trigger:has_same_culture_language] = scope[culture]

### Does the culture have the same martial tradition as the target?
## scope = culture
alias[trigger:has_same_culture_martial_tradition] = scope[culture]

### Checks if the scope culture was created by diverging from a single parent culture and returns yes if true or no if false.
### is_divergent_culture = yes
## scope = culture
alias[trigger:is_divergent_culture] = bool

### Checks if the scope culture was created from a hybridization of two cultures and returns yes if true or no if false.
### is_hybrid_culture = yes
## scope = culture
alias[trigger:is_hybrid_culture] = bool

### has_memory_participant = character
### Does the character memory have this target character as a participant?
## scope = character_memory
alias[trigger:has_memory_participant] = scope[character]

### Is the scoped memory a memory of a specific travel plan? is_memory_of_travel = travel_plan
## scope = character_memory
alias[trigger:is_memory_of_travel] = scope[travel_plan]

### Can target MaA regiment be upgraded
## scope = regiment
alias[trigger:can_upgrade_maa] = bool

### Is target MaA regiment part of event troops
## scope = regiment
alias[trigger:is_event_maa_regiment] = bool

### Was target MaA regiment hired from merc or holy order
## scope = regiment
alias[trigger:is_hired_maa_regiment] = bool

### Is target MaA regiment engaged in combat
## scope = regiment
alias[trigger:is_maa_in_combat] = bool

### Is target MaA regiment personal
## scope = regiment
alias[trigger:is_personal_maa_regiment] = bool

### Is target MaA regiment raised
## scope = regiment
alias[trigger:is_raised] = bool

### Is target MaA regiment just a normal one recruited by a ruler
## scope = regiment
alias[trigger:is_regular_maa_regiment] = bool

### Is target MaA regiment belongs to a title
## scope = regiment
alias[trigger:is_title_maa_regiment] = bool

### Does the scoped dynasty house have a personal claim on the target artifact
## scope = dynasty_house
alias[trigger:has_house_artifact_claim] = scope[artifact]

### Is the given dynasty house has house unity
## scope = dynasty_house
alias[trigger:has_house_unity] = bool

### Is the given house considered dominant: scope:house = { is_dominant_family = yes }
## scope = dynasty_house
alias[trigger:is_dominant_family] = bool

### Is the given house considered powerful: scope:house = { is_powerful_family = yes }
## scope = dynasty_house
alias[trigger:is_powerful_family] = bool

### Is the contract type of criminal nature?
## scope = task_contract
alias[trigger:is_criminal] = bool

### Is contract valid to keep?
## scope = task_contract
alias[trigger:is_valid_to_keep] = bool

### Check if the scope task's councillor can be fired. Will check both can_fire and things like it being illegal to reassing the position
### scope:task = { position_can_be_fired = yes }
## scope = council_task
alias[trigger:can_fire_position] = bool

### can the scope secret be exposed by the target character? can_be_exposed_by = target
## scope = secret
alias[trigger:can_be_exposed_by] = scope[character]

### is this secret criminal for the target participant? is_criminal_for = <character>
## scope = secret
alias[trigger:is_criminal_for] = scope[character]

### is the scope secret known by the target character?
## scope = secret
alias[trigger:is_known_by] = scope[character]

### is this secret shunned for the target participant? is_shunned_for = <character>
## scope = secret
alias[trigger:is_shunned_for] = scope[character]

### is this secret shunned or criminal for the target participant? is_shunned_or_illegal_for = <character>
## scope = secret
alias[trigger:is_shunned_or_criminal_for] = scope[character]

### has the scope secret been spent by the target character? is_spent_by = target
## scope = secret
alias[trigger:is_spent_by] = scope[character]

### Does the local player have knowledge about the secret?
### An interface trigger, can only be used in specific places
## scope = secret
alias[trigger:local_player_knows_this_secret] = bool

### Is the scope secret of the same type as the target secret?
### same_secret_type_as = scope:some_secret
## scope = secret
alias[trigger:same_secret_type_as] = scope[secret]

### is this army moving?
## scope = army
alias[trigger:army_is_moving] = bool

### Can we disband this army?
## scope = army
alias[trigger:can_disband_army] = bool

### Is the scoped army in combat?
## scope = army
alias[trigger:is_army_in_combat] = bool

### Is the scoped army in a raid (this includes a raid interrupted by combat)?
## scope = army
alias[trigger:is_army_in_raid] = bool

### Is the scoped army in a siege (this includes a siege interrupted by combat)?
## scope = army
alias[trigger:is_army_in_siege] = bool

### Is the scoped army in a siege that is relevant to the target character?
### is_army_in_siege_relevant_for = scope:character
## scope = army
alias[trigger:is_army_in_siege_relevant_for] = scope[character]

### Is the scoped army a raid army?
## scope = army
alias[trigger:is_raid_army] = bool

### Can this travel plan be cancelled? (associated activity might disallow it)
## scope = travel_plan
alias[trigger:can_cancel] = bool

### Is this travel plan aborted?
## scope = travel_plan
alias[trigger:is_aborted] = bool

### Is this travel plan cancelled? (manually stopped, and rerouted home)
## scope = travel_plan
alias[trigger:is_cancelled] = bool

### Is this travel plan completed? (finished by arrival at final destination)
## scope = travel_plan
alias[trigger:is_completed] = bool

### Is this travel plan paused?
## scope = travel_plan
alias[trigger:is_paused] = bool

### Is character travelling with a domicile?
### <travel_plan> = { is_travel_with_domicile = yes }
## scope = travel_plan
alias[trigger:is_travel_with_domicile] = bool

### If there is/was an activity attached to this travel plan, was it completed?
## scope = travel_plan
alias[trigger:was_activity_completed] = bool

### If there is/was an activity attached to this travel plan, was it invalidated?
## scope = travel_plan
alias[trigger:was_activity_invalidated] = bool

### Is the target character of the allowed gender to be clergy of the faith?
## scope = faith
alias[trigger:has_allowed_gender_for_clergy] = scope[character]

### Is the target character's gender a dominant ruling gender of the faith? Also evaluates to true if there's no dominant ruling gender
## scope = faith
alias[trigger:has_dominant_ruling_gender] = scope[character]

### Is the target character of the preferred gender to be clergy of the faith?
## scope = faith
alias[trigger:has_preferred_gender_for_clergy] = scope[character]

### is the culture involved in struggle?
### 
### is_culture_involved_in_struggle = culture:english
## scope = struggle
alias[trigger:is_culture_involved_in_struggle] = scope[culture]

### is the faith involved in struggle?
### 
### is_faith_involved_in_struggle  = faith:baltic_pagan
## scope = struggle
alias[trigger:is_faith_involved_in_struggle] = scope[faith]

### Checks if scoped sub-region of a situation contains county
### situation_sub_region_has_county = scope:county
## scope = situation_sub_region
alias[trigger:situation_sub_region_has_county] = scope[landed_title]

### Checks if scoped sub-region of a situation contains province
### situation_sub_region_has_province = scope:province
## scope = situation_sub_region
alias[trigger:situation_sub_region_has_province] = scope[province]

### Is this agent slot filled?
## scope = agent_slot
alias[trigger:is_filled] = bool

### Is the target character forced to be a defender in the given Great Holy War?
## scope = ghw
alias[trigger:has_forced_defender] = scope[character]

### Is the target character pledged as an attacker in the given Great Holy War?
## scope = ghw
alias[trigger:has_pledged_attacker] = scope[character]

### Is the target character pledged as a defender in the given Great Holy War?
## scope = ghw
alias[trigger:has_pledged_defender] = scope[character]

### Is the scoped GHW a directed GHW?
## scope = ghw
alias[trigger:is_directed_ghw] = bool

### has_tax_collector = yes
### Does the scoped Tax Slot have any Tax Collector employed?
## scope = tax_slot
alias[trigger:has_tax_collector] = bool

### If region rulers are automatically checked to be valid participants for this group.
### If disabled, only manually added characters could join..
### auto_add_rulers = yes/no
## scope = situation_participant_group
alias[trigger:auto_add_rulers] = bool

### Is this character a participant in this participant group?
### participant_group_has_character = scope:character
## scope = situation_participant_group
alias[trigger:participant_group_has_character] = scope[character]

### Is it required that the capital of participants is in the sub-region?
### require_capital_in_sub_region = yes/no
## scope = situation_participant_group
alias[trigger:require_capital_in_sub_region] = bool

### Is it required that some part of the domain of participants is in the sub-region?
### require_domain_in_sub_region = yes/no
## scope = situation_participant_group
alias[trigger:require_domain_in_sub_region] = bool

### Is it required that some part of the realm of participants is in the sub-region?
### require_realm_in_sub_region = yes/no
## scope = situation_participant_group
alias[trigger:require_realm_in_sub_region] = bool

### Can the scoped artifact be claimed by the given character?
## scope = artifact
alias[trigger:can_be_claimed_by] = scope[character]

### is the scoped artifact currently equipped in its owners inventory?
## scope = artifact
alias[trigger:is_equipped] = bool

### Is the scoped artifact unique
### defined in the scripted template of the artifact
## scope = artifact
alias[trigger:is_unique] = bool

### should the scoped artifact decay with time?
## scope = artifact
alias[trigger:should_decay] = bool

### Checks if given region is adjacent or overlaps with the target region.
### You can use both situation subregions or geographical regions as scopes. Targets a geographical bregion.
### usage:
### scope:situation_subregion/geographical_region:key = {
### 
### region_is_adjacent = scope:geographical_region
### }
## scope = { geographical_region situation_sub_region }
alias[trigger:region_is_adjacent] = scope[geographical_region]

### Checks if given region is adjacent or overlaps with the target region.
### You can use both situation subregions or geographical regions as scopes. Targets a situation subregion.
### usage:
### scope:situation_subregion/geographical_region:key = {
### 
### region_is_adjacent_situation_subregion = scope:situation_subregion
### }
## scope = { geographical_region situation_sub_region }
alias[trigger:region_is_adjacent_situation_subregion] = scope[situation_sub_region]

### checks if the assigned yes/no value is true
### always = yes # always succeeds
### always = no  # always fails
### always = scope:a_boolean_value # evaluated at runtime
alias[trigger:always] = bool

### Checks if the game is in debug mode or not.
alias[trigger:debug_only] = bool

### Has the local player opened a court event in the royal court view?
### An interface trigger, can only be used in specific places
alias[trigger:has_local_player_open_court_event] = bool

### Has the local player seen the unopened court event(s) waiting in the royal court view?
### An interface trigger, can only be used in specific places
alias[trigger:has_local_player_seen_unopened_court_event] = bool

### Has the local player an unopened court event waiting in the royal court view?
### An interface trigger, can only be used in specific places
alias[trigger:has_local_player_unopened_court_event] = bool

### Does the game have at least two players currently connected?
alias[trigger:has_multiple_players] = bool

### Is the gamestate tutorial active? See save_progress_in_gamestate in tutorial_lesson_chains documentation.
### An interface trigger, can only be used in specific places
alias[trigger:is_gamestate_tutorial_active] = bool

### Is the mercenary company within the hiring range of the target character.
### is_mercenary_in_hire_range = scope:character
alias[trigger:is_mercenary_in_hire_range] = scope[character]

### is the player playing a character?
### An interface trigger, can only be used in specific places
alias[trigger:is_player_selected] = bool

### Was the target character the preferred heir of the scoped character
### was_preferred_heir = scope:character
alias[trigger:is_rightful_liege_of] = scope[character]

### Is the tutorial active?
### An interface trigger, can only be used in specific places
alias[trigger:is_tutorial_active] = bool

### Does the scoped character meet the legitimacy expectations of the target AI vassal
### meets_legitimacy_expectation_of = scope:some_vassal
alias[trigger:meets_legitimacy_expectation_of] = scope[character]

### Checks if the game is in release mode or not.
alias[trigger:release_only] = bool

### Checks if the game is currently running scripted tests.
alias[trigger:scripted_tests] = bool

### can disturbing portrait modifiers be shown?
### An interface trigger, can only be used in specific places
alias[trigger:should_show_disturbing_portrait_modifiers] = bool

### can nudity be shown?
### An interface trigger, can only be used in specific places
alias[trigger:should_show_nudity] = bool

### Was the target character the preferred heir of the scoped character
### was_preferred_heir = scope:character
alias[trigger:was_preferred_heir] = scope[character]

### does the scope province have a free building slot? has_free_building_slot = yes
## scope = province
alias[trigger:has_free_building_slot] = bool

### does the scope province have holding?
### 
### has_holding = yes
## scope = province
alias[trigger:has_holding] = bool

### does the scope province have a construction ongoing?
### 
### has_ongoing_construction = yes
## scope = province
alias[trigger:has_ongoing_construction] = bool

### Does the province (holding) have a special building?
## scope = province
alias[trigger:has_special_building] = bool

### Does the province (holding) have a special building slot?
## scope = province
alias[trigger:has_special_building_slot] = bool

### Does this province have stationed regiments?
## scope = province
alias[trigger:has_stationed_regiment] = bool

### Is the province a coastal province (next to sea, not including lakes)?
## scope = province
alias[trigger:is_coastal] = bool

### Is the province the county capital?
## scope = province
alias[trigger:is_county_capital] = bool

### Is this a lake province?
## scope = province
alias[trigger:is_lake_province] = bool

### Is the province next to a lake?
## scope = province
alias[trigger:is_lakeside_province] = bool

### Is this province currently being occupied?
## scope = province
alias[trigger:is_occupied] = bool

### Is this province currently being raided?
## scope = province
alias[trigger:is_raided] = bool

### Is the province a river?
## scope = province
alias[trigger:is_river_province] = bool

### Is the province riverside?
## scope = province
alias[trigger:is_riverside_province] = bool

### Is this a sea province?
## scope = province
alias[trigger:is_sea_province] = bool

### does the war interaction still have a valid casus belli (those should be automatically removed on daily tick, but can exist for a tick)
## scope = war
alias[trigger:has_valid_casus_belli] = bool

### is the target character in the scope war as an attacker?
## scope = war
alias[trigger:is_attacker] = scope[character]

### Check if the scope war is a civil war or not
## scope = war
alias[trigger:is_civil_war] = bool

### is the target character in the scope war as a defender?
## scope = war
alias[trigger:is_defender] = scope[character]

### is the target character participating in the scope war as an attacker or defender?
## scope = war
alias[trigger:is_participant] = scope[character]

### is the target character leading one of the sides in the scope war?
## scope = war
alias[trigger:is_war_leader] = scope[character]

### Check if the scoped war's CB has is_white_peace_possible = yes
## scope = war
alias[trigger:is_white_peace_possible] = bool

### has the target character been called to the scope war already?
## scope = war
alias[trigger:was_called] = scope[character]

### Does the given Accolade's Owner have any character in their court ( including guests ) that could act as Successor of this Accolade if made into a Knight?
## scope = accolade
alias[trigger:has_potential_accolade_successors] = bool

### Is the scoped Accolade active, i.e. assinged by their Liege?
## scope = accolade
alias[trigger:is_accolade_active] = bool

### Does the scoped holding type have required heir government types defined?
### has_required_heir_governments = yes/no
## scope = holding_type
alias[trigger:has_required_heir_governments] = bool

### Is the scoped legend completed?.
### scope:legend = {
### 
### is_legend_completed = yes
### }
## scope = legend
alias[trigger:is_legend_completed] = bool

### Is this character considered a manual participant candidate in this situation?
### is_manual_participant = yes/no
## scope = situation
alias[trigger:is_manual_participant] = scope[character]

### Is the type of scoped situation unique.
### is_situation_unique = yes/no
## scope = situation
alias[trigger:is_situation_unique] = bool

### Checks if top sub-region of situation contains county
### situation_top_has_county = scope:county
## scope = situation
alias[trigger:situation_top_has_county] = scope[province]

### Checks if top sub-region of situation contains province
### situation_top_has_province = scope:province
## scope = situation
alias[trigger:situation_top_has_province] = scope[province]

### Is the scoped scheme a hostile scheme?
### is_hostile = bool
## scope = scheme
alias[trigger:is_hostile] = bool

### Is the target character an exposed agent in the scope scheme?
## scope = scheme
alias[trigger:is_scheme_agent_exposed] = scope[character]

### Is the scheme exposed?
## scope = scheme
alias[trigger:is_scheme_exposed] = bool

### Is the scoped scheme's type a basic type?
### is_type_basic = bool
## scope = scheme
alias[trigger:is_type_basic] = bool

### Is the scoped scheme's type a secret type?
### is_type_secret = bool
## scope = scheme
alias[trigger:is_type_secret] = bool

### Is the target character part of this scheme?
## scope = scheme
alias[trigger:scheme_is_character_agent] = scope[character]

### Can the scope owner have concubines?
## scope = character
alias[trigger:allowed_concubines] = bool

### Can the scope owner have more concubines?
## scope = character
alias[trigger:allowed_more_concubines] = bool

### Can the scope owner have more spouses?
## scope = character
alias[trigger:allowed_more_spouses] = bool

### Check character against task contract requirement triggers?
### scope:actor = { can_accept_task_contract = SCOPE_TASK_CONTRACT }
## scope = character
alias[trigger:can_accept_task_contract] = scope[task_contract]

### Can character be appointed for the target title.
### Appointment is only allowed for duchies and above, and if it's top tier title for the holder
## scope = character
alias[trigger:can_appoint_for_title] = scope[landed_title]

### can_arrive_in_time_to_activity_minimum = target_activity
### Can the scoped character arrive to the target activity in time? (only does rough but performance consideration)
## scope = character
alias[trigger:can_arrive_in_time_to_activity_minimum] = scope[activity]

### Is this scoped character valid to assign to target tax slot
### scope:character = { can_assign_to_tax_slot = scope:tax_slot }
## scope = character
alias[trigger:can_assign_to_tax_slot] = scope[tax_slot]

### can the scope target be attacking the defender based on their liege-vassal relations?
## scope = character
alias[trigger:can_attack_in_hierarchy] = scope[character]

### Can the given character potentially be the Acclaimed Knight of an Accolade?
## scope = character
alias[trigger:can_be_acclaimed] = bool

### Would the target character have been able to have children at the time of the scoped character's birth? Only age is taken into account
## scope = character
alias[trigger:can_be_child_of] = scope[character]

### Would the scoped character have been able to have children at the time of the target character's birth? Only age is taken into account
## scope = character
alias[trigger:can_be_parent_of] = scope[character]

### Can the scoped character be tributary of target character
## scope = character
alias[trigger:can_be_tributary_of] = scope[character]

### Can the scoped character become owner of the provided legend?
### scope:character = {
### 
### can_become_owner_of_legend = <legend>
### }
## scope = character
alias[trigger:can_become_owner_of_legend] = scope[legend]

### Can the scoped character benefit from the main bonuses of this artifact?
## scope = character
alias[trigger:can_benefit_from_artifact] = scope[artifact]

### Can this ruler diverge their culture? Includes checking the cost
## scope = character
alias[trigger:can_diverge] = bool

### Can this ruler diverge their culture? Does not check the cost
## scope = character
alias[trigger:can_diverge_excluding_cost] = bool

### Can the scoped character equip given artifact?
## scope = character
alias[trigger:can_equip_artifact] = scope[artifact]

### can the character have children? Only checks hard blocks from traits, not fertility
### can_have_children = yes/no
## scope = character
alias[trigger:can_have_children] = bool

### Can this ruler hybridize with the target culture? Includes checking the cost
## scope = character
alias[trigger:can_hybridize] = scope[culture]

### Can this ruler hybridize with the target culture? Does not check the cost
## scope = character
alias[trigger:can_hybridize_excluding_cost] = scope[culture]

### can_join_activity = target_activity
### Can the scoped character join the target activity
## scope = character
alias[trigger:can_join_activity] = scope[activity]

### Can the scope character join the faction? can_join_faction = faction
## scope = character
alias[trigger:can_join_faction] = scope[faction]

### Can the scope character create if join a faction against the target?
### can_join_or_create_faction_against = scope:faction_target
### can_join_or_create_faction_against = {
### 
### who = scope:faction_target
### 
### faction = faction_key # optional
### 
### check_in_a_faction = no # default: yes
### }
## scope = character
alias[trigger:can_join_or_create_faction_against] = scope[character]

### Interface trigger for checking if the scoped Nomad can raze the holding of the provided province using the Raze Holding command.
### scope:nomad = { can_nomad_raze_holding = scope:province }
## scope = character
alias[trigger:can_nomad_raze_holding] = scope[province]

### can_sponsor_inspiration = inspiration
### Can the scoped character sponsor the target inspiration
## scope = character
alias[trigger:can_sponsor_inspiration] = scope[inspiration]

### Does the character have a commander trait that the scope does not?
## scope = character
alias[trigger:character_has_commander_trait_scope_does_not] = scope[character]

### Is the scoped character a realm neighbor of the target? Meaning they're independent or has the same liege, and border your realm.
## scope = character
alias[trigger:character_is_land_realm_neighbor] = scope[character]

### Is the scoped character a realm neighbor of the target? Meaning they're independent or has the same liege, and border your realm. Including across two sea zones
## scope = character
alias[trigger:character_is_realm_neighbor] = scope[character]

### does the character controls all counties and baronies inside de jure title (no hostile occupation either)?
## scope = character
alias[trigger:completely_controls] = scope[landed_title]

### Does the AI liege in a vassal contract desire changing an obligation level
## scope = character
alias[trigger:does_ai_liege_in_vassal_contract_desire_obligation_change] = bool

### Does the AI vassal in a vassal contract desire changing an obligation level
## scope = character
alias[trigger:does_ai_vassal_in_vassal_contract_desire_obligation_change] = bool

### employs_tax_collector = yes
### Does the scoped character have any Tax Collectors employed?
## scope = character
alias[trigger:employs_tax_collector] = bool

### Does the scoped character has an active diarchy
## scope = character
alias[trigger:has_active_diarchy] = bool

### does the scoped character have any artifacts?
## scope = character
alias[trigger:has_any_artifact] = bool

### does the scoped character have any artifact claims at all? ( CHEAP )
## scope = character
alias[trigger:has_any_artifact_claim] = bool

### does the scope character have any casus bellis on the taget character?
## scope = character
alias[trigger:has_any_cb_on] = scope[character]

### does the scoped character have any court positions?
## scope = character
alias[trigger:has_any_court_position] = bool

### does the scope character have any casus bellis on the taget character that should be displayed? (Allowed to fail valid_to_start_display_regardless)
## scope = character
alias[trigger:has_any_display_cb_on] = scope[character]

### Does the character have any focus set?
## scope = character
alias[trigger:has_any_focus] = bool

### Has the scope character any nickname?
## scope = character
alias[trigger:has_any_nickname] = bool

### does the scope character have any scripted relation with the taget character?
## scope = character
alias[trigger:has_any_scripted_relation] = scope[character]

### does the scope character have any secret relation with the taget character?
## scope = character
alias[trigger:has_any_secret_relation] = scope[character]

### Does the character have any secrets?
## scope = character
alias[trigger:has_any_secrets] = bool

### does the scoped character have any unequipped artifacts?
## scope = character
alias[trigger:has_any_unequipped_artifact] = bool

### Has scoped investor supported appointment of target character in the same realm.
### Ignores if candidate has a valid reason to be appointed
### scope:investor = {
### 
### has_appointment_investment_in_character = scope:candidate
### }
## scope = character
alias[trigger:has_appointment_invested_character] = scope[character]

### Has scoped investor supported appointment for target title in the same realm.
### Returns true even for dead candidates, for the sake of efficiency.
### scope:investor = {
### 
### has_appointment_investment_in_title = scope:title
### }
## scope = character
alias[trigger:has_appointment_invested_title] = scope[landed_title]

### Does the scoped character have a personal or house claim on the target artifact
## scope = character
alias[trigger:has_artifact_claim] = scope[artifact]

### Does the scoped character have Hostages abroad?
## scope = character
alias[trigger:has_away_hostages] = bool

### Has the scope character a bad nickname?
## scope = character
alias[trigger:has_bad_nickname] = bool

### Does the character have the banish reason towards the target?
## scope = character
alias[trigger:has_banish_reason] = scope[character]

### does the character have an explicit claim on the target title?
## scope = character
alias[trigger:has_claim_on] = scope[landed_title]

### has_completed_inspiration = bool
### Checks if the scoped character has ever completed an inspiration
## scope = character
alias[trigger:has_completed_inspiration] = bool

### Check if laamp has character as employer?
### scope:actor = { has_contact = SCOPE_CHARACTER }
## scope = character
alias[trigger:has_contact] = scope[character]

### Does character have a council?
## scope = character
alias[trigger:has_council] = bool

### Is the character's court language the language of the target culture?
### has_court_language_of_culture = scope:target_culture
## scope = character
alias[trigger:has_court_language_of_culture] = scope[culture]

### Does the character have this culture?
## scope = character
alias[trigger:has_culture] = scope[culture]

### does the scope character have a dejure claim against the target?
## scope = character
alias[trigger:has_de_jure_claim_on] = scope[character]

### Does the character have the divorce reason towards the target?
## scope = character
alias[trigger:has_divorce_reason] = scope[character]

### Does scoped character have a domicile?
### scope:character = { has_domicile = yes }
## scope = character
alias[trigger:has_domicile] = bool

### Does scoped character have domicile temperament high?
### scope:character = { has_temperament_high = yes }
## scope = character
alias[trigger:has_domicile_temperament_high] = bool

### Does scoped character have domicile temperament low?
### scope:character = { has_temperament_low = yes }
## scope = character
alias[trigger:has_domicile_temperament_low] = bool

### Does scoped character have domicile temperament neutral?
### scope:character = { has_temperament_neutral = yes }
## scope = character
alias[trigger:has_domicile_temperament_neutral] = bool

### does the character have a valid dynasty?
## scope = character
alias[trigger:has_dynasty] = bool

### does the scoped character have any employed court positions?
## scope = character
alias[trigger:has_employed_any_court_position] = bool

### Does the character have the execute reason towards the target?
## scope = character
alias[trigger:has_execute_reason] = scope[character]

### Does the character have this faith?
### has_faith = faith:baltic_pagan
## scope = character
alias[trigger:has_faith] = scope[faith]

### does the character have a valid living father?
## scope = character
alias[trigger:has_father] = bool

### Does the scope character have a council position to fill? (ignoring automatically filled positions)
## scope = character
alias[trigger:has_free_council_slot] = bool

### does the character have a hook on the target, has_hook = <character>
## scope = character
alias[trigger:has_hook] = scope[character]

### does the character have a hook based on the target secret? example use: has_hook_from_secret = scope:saved_secret
## scope = character
alias[trigger:has_hook_from_secret] = scope[secret]

### Does the character have the imprisonment reason towards the target?
## scope = character
alias[trigger:has_imprisonment_reason] = scope[character]

### Does the scoped character uses legitimacy
### has_legitimacy = yes
## scope = character
alias[trigger:has_legitimacy] = bool

### does the character have a valid living mother?
## scope = character
alias[trigger:has_mother] = bool

### Does the character have the obedience reason towards the target?
## scope = character
alias[trigger:has_obedience_reason] = scope[character]

### does the scoped character have any artifact claims that can be pressed? ( EXPENSIVE )
## scope = character
alias[trigger:has_outstanding_artifact_claims] = bool

### Does this character own a scheme?
## scope = character
alias[trigger:has_owned_scheme] = bool

### has_pending_court_events = bool
### Does the character have pending court events? Meaning court events that'll spawn when they next open the royal court view.
### Can only be used on player characters with a royal court.
## scope = character
alias[trigger:has_pending_court_events] = bool

### Does the scoped character have a personal claim on the target artifact
## scope = character
alias[trigger:has_personal_artifact_claim] = scope[artifact]

### Does the given character have any potential knights that could be appointed as Acclaimed Knights?
## scope = character
alias[trigger:has_potential_acclaimed_knights] = bool

### does the character has specific title as his primary title
## scope = character
alias[trigger:has_primary_title] = scope[landed_title]

### Does the character have prisoners?
## scope = character
alias[trigger:has_prisoners] = bool

### Is the scoped character's (top-liege) realm immune to raiding by the target due to having defeated their raid army?
### has_raid_immunity_against = scope:character
## scope = character
alias[trigger:has_raid_immunity_against] = scope[character]

### does the character have raised or gathering armies?
## scope = character
alias[trigger:has_raised_armies] = bool

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_activity_recurrer] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_antiquarian] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_best_friend] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_blood_brother] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_bully] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_court_physician] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_crush] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_event_recurrer] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_favorite_child] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_friend] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_grudge] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_guardian] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_intrigue_mentor] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_intrigue_student] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_lover] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_mentor] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_nemesis] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_nursed_child] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_oaf] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_old_flame] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_potential_friend] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_potential_hook] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_potential_lover] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_potential_rival] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_rival] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_soldier_friend] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_soulmate] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_student] = scope[character]

### does the character have a relation to the target? Matches the logic of the data system function HasRelationTo, has_relation_to = <character>
## scope = character
alias[trigger:has_relation_to] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_victim] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_ward] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_wedding_bad_fertility] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_wedding_good_fertility] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_wedding_very_bad_fertility] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_wedding_very_good_fertility] = scope[character]

### Checks for a scripted relationship with a target character
## scope = character
alias[trigger:has_relation_wet_nurse] = scope[character]

### Does the character have this religion?
### has_religion = religion:buddhism_religion
## scope = character
alias[trigger:has_religion] = scope[religion]

### Does the character have the revoke title reason towards the target?
## scope = character
alias[trigger:has_revoke_title_reason] = scope[character]

### has_royal_court = bool
### Does the scoped character have a royal court
## scope = character
alias[trigger:has_royal_court] = bool

### Is the character's court language the same language as the target character's?
### has_same_court_language = scope:target_character
## scope = character
alias[trigger:has_same_court_language] = scope[character]

### has_same_court_type_as = character
### Does the character have the same court type as the target?
## scope = character
alias[trigger:has_same_court_type_as] = scope[character]

### Does the character have the same culture as the target?
## scope = character
alias[trigger:has_same_culture_as] = scope[character]

### Does the character have the same focus as the other?
## scope = character
alias[trigger:has_same_focus_as] = scope[character]

### checks if the character has the same government type as another character
## scope = character
alias[trigger:has_same_government] = scope[character]

### do the two characters share a trait that is considered sinful by both of their respective faiths?
### scope:character_1 = { has_same_sinful_trait = scope:character_2 }
## scope = character
alias[trigger:has_same_sinful_trait] = scope[character]

### do the two characters share a trait that is considered virtuous by both of their respective faiths?
### scope:character_1 = { has_same_virtue_trait = scope:character_2 }
## scope = character
alias[trigger:has_same_virtue_trait] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_activity_recurrer] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_antiquarian] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_best_friend] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_blood_brother] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_bully] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_court_physician] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_crush] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_event_recurrer] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_favorite_child] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_friend] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_grudge] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_guardian] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_intrigue_mentor] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_intrigue_student] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_lover] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_mentor] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_nemesis] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_nursed_child] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_oaf] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_old_flame] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_potential_friend] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_potential_hook] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_potential_lover] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_potential_rival] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_rival] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_soldier_friend] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_soulmate] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_student] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_victim] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_ward] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_wedding_bad_fertility] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_wedding_good_fertility] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_wedding_very_bad_fertility] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_wedding_very_good_fertility] = scope[character]

### Checks for a secret scripted relationship with a target character
## scope = character
alias[trigger:has_secret_relation_wet_nurse] = scope[character]

### has_spawned_court_events = bool
### Does the character have spawned court events? Meaning court events are shown (opened or not) in the royal court view.
### Can only be used on player characters with a royal court.
## scope = character
alias[trigger:has_spawned_court_events] = bool

### does the character have an explicit Pressed Claim on the target title?
## scope = character
alias[trigger:has_strong_claim_on] = scope[landed_title]

### does the character have a strong hook on the target, has_strong_hook = <character>
## scope = character
alias[trigger:has_strong_hook] = scope[character]

### does the character have an implicit Pressed Claim on the target title
## scope = character
alias[trigger:has_strong_implicit_claim_on] = scope[landed_title]

### does the character have a strong hook on the target that is not on cooldown, has_strong_usable_hook = <character>
## scope = character
alias[trigger:has_strong_usable_hook] = scope[character]

### Does the scope the scoped character have any investors for their appointment towards the target title?
### scope:character = { has_succession_appointment_investors = scope:title }
## scope = character
alias[trigger:has_succession_appointment_investors] = scope[landed_title]

### Has the scope character a faction targeting him/her?
## scope = character
alias[trigger:has_targeting_faction] = bool

### does the character hold the title?
## scope = character
alias[trigger:has_title] = scope[landed_title]

### Does the scope character have a truce with the target character? Truces are one way, which means we ask if the scope character can't attack the target character
## scope = character
alias[trigger:has_truce] = scope[character]

### does the character have a hook on the target that isn't on cooldown, has_usable_hook = <character>
## scope = character
alias[trigger:has_usable_hook] = scope[character]

### does the character have an explicit Unpressed Claim on the target title?
## scope = character
alias[trigger:has_weak_claim_on] = scope[landed_title]

### does the character have a weak hook on the target. A strong hook will *not* count, has_weak_hook = <character>
## scope = character
alias[trigger:has_weak_hook] = scope[character]

### does the character have an implicit Unpressed Claim on the target title
## scope = character
alias[trigger:has_weak_implicit_claim_on] = scope[landed_title]

### Is the scope character landed (holds a county or barony)?
## scope = character
alias[trigger:holds_landed_title] = bool

### Is the scope character and the target character within each others diplomatic range?
## scope = character
alias[trigger:in_diplomatic_range] = scope[character]

### Is the scope character a leader of a faction?
## scope = character
alias[trigger:is_a_faction_leader] = bool

### Is the scope character a member of a faction?
## scope = character
alias[trigger:is_a_faction_member] = bool

### Is the given character the Acclaimed Knight of an Accolade?
## scope = character
alias[trigger:is_acclaimed] = bool

### Is the given character the Successor of an Accolade?
## scope = character
alias[trigger:is_accolade_successor] = bool

### Is the scope character adult?
## scope = character
alias[trigger:is_adult] = bool

### Is the scope character an exposed agent in the target scheme?
## scope = character
alias[trigger:is_agent_exposed_in_scheme] = scope[scheme]

### is the character played by AI?
## scope = character
alias[trigger:is_ai] = bool

### is the character alive or dead?
## scope = character
alias[trigger:is_alive] = bool

### Is the scope character allied to the target character in a war?
## scope = character
alias[trigger:is_allied_in_war] = scope[character]

### Is the scope character allied to the target character?
## scope = character
alias[trigger:is_allied_to] = scope[character]

### is the character at home?
## scope = character
alias[trigger:is_at_home] = bool

### Is the character currently in the target province?
## scope = character
alias[trigger:is_at_location] = scope[province]

### Is the character currently in the same province as the target character?
## scope = character
alias[trigger:is_at_same_location] = scope[character]

### is the character at war? Does not consider your lieges' wars
## scope = character
alias[trigger:is_at_war] = bool

### is the character at war as an attacker? Does not consider your lieges' wars
## scope = character
alias[trigger:is_at_war_as_attacker] = bool

### is the character at war as a defender? Does not consider your lieges' wars
## scope = character
alias[trigger:is_at_war_as_defender] = bool

### Is the character at war with the target? Does not consider your lieges' wars
## scope = character
alias[trigger:is_at_war_with] = scope[character]

### is the character at war with their liege?
## scope = character
alias[trigger:is_at_war_with_liege] = bool

### is the scope character in the target war as an attacker?
## scope = character
alias[trigger:is_attacker_in_war] = scope[war]

### does the sexuality of the scope character make them attracted to the target character?
## scope = character
alias[trigger:is_attracted_to_gender_of] = scope[character]

### Is the character attracted to men?
## scope = character
alias[trigger:is_attracted_to_men] = bool

### Is the character attracted to women?
## scope = character
alias[trigger:is_attracted_to_women] = bool

### Is the character away from the court?
## scope = character
alias[trigger:is_away_from_court] = bool

### Is the scope character betrothed?
## scope = character
alias[trigger:is_betrothed] = bool

### Is the scoped character making the target hostile due to having raided their (top-liege's) realm?
### is_causing_raid_hostility_towards = scope:character
## scope = character
alias[trigger:is_causing_raid_hostility_towards] = scope[character]

### Is the local player the main character in the character window?
### An interface trigger, can only be used in specific places
## scope = character
alias[trigger:is_character_window_main_character] = bool

### Is the character a child of the target character?
## scope = character
alias[trigger:is_child_of] = scope[character]

### is the character a claimant to any landed titles?
## scope = character
alias[trigger:is_claimant] = bool

### Is the scoped character a clergy?
## scope = character
alias[trigger:is_clergy] = bool

### Is the character a close family [parents, children, siblings, grandparents, grandchildren] of the target character?
## scope = character
alias[trigger:is_close_family_of] = scope[character]

### Is the character a close or extended family [parents, children, siblings, grandparents, grandchildren, cousins, uncles, aunts, nephews, nieces] of the target character?
## scope = character
alias[trigger:is_close_or_extended_family_of] = scope[character]

### is the character a commanding an army?
## scope = character
alias[trigger:is_commanding_army] = bool

### Is the scope character a concubine?
## scope = character
alias[trigger:is_concubine] = bool

### Is the target character a concubine of the scope character?
## scope = character
alias[trigger:is_concubine_of] = scope[character]

### Is the scoped character a member of a confederation?
## scope = character
alias[trigger:is_confederation_member] = bool

### Is the character a spouse or concubine of the target character?
## scope = character
alias[trigger:is_consort_of] = scope[character]

### Check if character is employer of laamp
### scope:actor = { is_contact_of = SCOPE_CHARACTER }
## scope = character
alias[trigger:is_contact_of] = scope[character]

### Is the scoped character a councillor?
## scope = character
alias[trigger:is_councillor] = bool

### Is the scoped character a councillor for the specified character?
## scope = character
alias[trigger:is_councillor_of] = scope[character]

### Is the scope character a courtier?
## scope = character
alias[trigger:is_courtier] = bool

### Is the scope character a courtier of the target character?
## scope = character
alias[trigger:is_courtier_of] = scope[character]

### Is the character a cousin of the target character?
## scope = character
alias[trigger:is_cousin_of] = scope[character]

### is the scope character in the target war as a defender?
## scope = character
alias[trigger:is_defender_in_war] = scope[war]

### Is the scoped character was diesignated as diarch by their liege?
### scope:character = { is_designated_diarch = yes/no }
## scope = character
alias[trigger:is_designated_diarch] = bool

### Is the scoped character currently an active diarch of anyone?
### scope:character = { is_diarch = yes/no }
## scope = character
alias[trigger:is_diarch] = bool

### Is the scoped character currently an active diarch of the target?
### scope:character = { is_diarch_of_target = scope:liege }
## scope = character
alias[trigger:is_diarch_of_target] = scope[character]

### Is the scoped character next in the line of succession for diarchy?
## scope = character
alias[trigger:is_diarchy_successor] = bool

### Is the target character a courtier of the scope character?
## scope = character
alias[trigger:is_employer_of] = scope[character]

### Is the character a extended family [cousins, uncles, aunts, nephews, nieces] of the target character?
## scope = character
alias[trigger:is_extended_family_of] = scope[character]

### is the character their liege's favorite child?
## scope = character
alias[trigger:is_favorite_child] = bool

### Is the scope character female?
## scope = character
alias[trigger:is_female] = bool

### Is the scope character forbidden from the target scheme?
## scope = character
alias[trigger:is_forbidden_from_scheme] = scope[scheme]

### Is the scope character forced to be part of a faction?
## scope = character
alias[trigger:is_forced_into_faction] = bool

### Checks if the scope character is forced into the target scheme
## scope = character
alias[trigger:is_forced_into_scheme] = scope[scheme]

### Is the character a guest from another a court? In contrast to is_pool_guest the character has a liege
## scope = character
alias[trigger:is_foreign_court_guest] = bool

### Is the character a guest from another a court, visiting the target character's court? In contrast to is_pool_guest_of the character has a liege
## scope = character
alias[trigger:is_foreign_court_guest_of] = scope[character]

### Is the character a guest? (is_pool_guest or is_foreign_court_guest)
## scope = character
alias[trigger:is_foreign_court_or_pool_guest] = bool

### Is the character a guest? (is_pool_guest_of or is_foreign_court_guest_of)
## scope = character
alias[trigger:is_foreign_court_or_pool_guest_of] = scope[character]

### Was this character made from the ruler designer
## scope = character
alias[trigger:is_from_ruler_designer] = bool

### Is the character a grandchild of the target character?
## scope = character
alias[trigger:is_grandchild_of] = scope[character]

### Is the character a grandparent of the target character?
## scope = character
alias[trigger:is_grandparent_of] = scope[character]

### Is the character a great grandchild of the target character?
## scope = character
alias[trigger:is_great_grandchild_of] = scope[character]

### Is the character a great grandparent of the target character?
## scope = character
alias[trigger:is_great_grandparent_of] = scope[character]

### Is the character an heir of the target [placeholder]?
## scope = character
alias[trigger:is_heir_of] = scope[character]

### Is the scoped character a Hostage?
## scope = character
alias[trigger:is_hostage] = bool

### Is the scope character a Hostage with target character as their original Liege? is_hostage_from = TARGET
## scope = character
alias[trigger:is_hostage_from] = scope[character]

### Is the scope character a Hostage with target character as their Warden? is_hostage_of = TARGET
## scope = character
alias[trigger:is_hostage_of] = scope[character]

### Is the scoped character a Warden with Hostages?
## scope = character
alias[trigger:is_hostage_warden] = bool

### Is the character immortal?
## scope = character
alias[trigger:is_immortal] = bool

### is the character imprisoned?
## scope = character
alias[trigger:is_imprisoned] = bool

### Is the scope character imprisoned by the target character? is_imprisoned_by = TARGET
## scope = character
alias[trigger:is_imprisoned_by] = scope[character]

### is the character in an army (a commander or a knight)?
## scope = character
alias[trigger:is_in_army] = bool

### is the character at war with their liege, or one or more of their vassals?
## scope = character
alias[trigger:is_in_civil_war] = bool

### is the character in an ongoing (i.e. the war has started) great holy war?
## scope = character
alias[trigger:is_in_ongoing_great_holy_war] = bool

### Is the character in the pool the target province is a part of
## scope = character
alias[trigger:is_in_pool_at] = scope[province]

### Is the character in the same court as the target character (they have the same court owner or one is a courtier of the other)?
## scope = character
alias[trigger:is_in_the_same_court_as] = scope[character]

### Is the character in the same court as the target character (they have the same court owner or one is a courtier of the other)? Includes guests in the court.
## scope = character
alias[trigger:is_in_the_same_court_as_or_guest] = scope[character]

### is the character incapable?
## scope = character
alias[trigger:is_incapable] = bool

### is the character an independent ruler?
## scope = character
alias[trigger:is_independent_ruler] = bool

### Is the scoped character a knight
## scope = character
alias[trigger:is_knight] = bool

### Is the scoped character a knight of the target character
## scope = character
alias[trigger:is_knight_of] = scope[character]

### Is the scope character landed (holds a county or barony)?
## scope = character
alias[trigger:is_landed] = bool

### Is the scope character a landless ruler (holds any title, but no on-map land)?
## scope = character
alias[trigger:is_landless_ruler] = bool

### is the scope character leading one of the sides in the target war?
## scope = character
alias[trigger:is_leader_in_war] = scope[war]

### is the scope character a liege or above of the target character?
## scope = character
alias[trigger:is_liege_or_above_of] = scope[character]

### is the character the local player?
### An interface trigger, can only be used in specific places
## scope = character
alias[trigger:is_local_player] = bool

### Is the character a lowborn?
## scope = character
alias[trigger:is_lowborn] = bool

### Is the scope character male?
## scope = character
alias[trigger:is_male] = bool

### Is the scope character married?
## scope = character
alias[trigger:is_married] = bool

### Is the scoped character a member of the target confederation?
## scope = character
alias[trigger:is_member_of_confederation] = scope[confederation]

### Is the character currently migrating?
## scope = character
alias[trigger:is_migrating] = bool

### Is the character a nibling (niece/nephew) of the target character?
## scope = character
alias[trigger:is_nibling_of] = scope[character]

### Is the scoped character a regular councillor?
## scope = character
alias[trigger:is_normal_councillor] = bool

### Is the scope character obedient?
## scope = character
alias[trigger:is_obedient] = bool

### Is the scope character obedient to the target character?
## scope = character
alias[trigger:is_obedient_to] = scope[character]

### Is the scoped character overriding the winner in the GHW they're pledged to (will put their beneficiary on the throne if they're top participant)?
## scope = character
alias[trigger:is_overriding_designated_winner] = bool

### Is the character a parent of the target character?
## scope = character
alias[trigger:is_parent_of] = scope[character]

### is_participant_in_activity = target_activity
### Is the scoped character a participant in the target activity
## scope = character
alias[trigger:is_participant_in_activity] = scope[activity]

### is the scope character participating in the target war as an attacker or defender?
## scope = character
alias[trigger:is_participant_in_war] = scope[war]

### Is the scope character the player heir of the target character?
## scope = character
alias[trigger:is_player_heir_of] = scope[character]

### Is the scoped character a pledged attacker in the current GHW (it's an error to check this if there's no GHW around)
## scope = character
alias[trigger:is_pledged_ghw_attacker] = bool

### Is the character in the pool? (not a ruler, courtier or guest at any court)
## scope = character
alias[trigger:is_pool_character] = bool

### Is the character a guest from the pool? In contrast to is_foreign_court_guest the character has no liege
## scope = character
alias[trigger:is_pool_guest] = bool

### Is the character a guest from the pool, visiting the target character's court? In contrast to is_foreign_court_guest_of the character has no liege
## scope = character
alias[trigger:is_pool_guest_of] = scope[character]

### Is the scoped character a POTENTIAL knight to their liege?
## scope = character
alias[trigger:is_potential_knight] = bool

### Is the character a powerful vassal?
## scope = character
alias[trigger:is_powerful_vassal] = bool

### Is the character a powerful vassal of the target?
## scope = character
alias[trigger:is_powerful_vassal_of] = scope[character]

### is the character pregnant?
## scope = character
alias[trigger:is_pregnant] = bool

### Is the character the heir of the target's primary title?
## scope = character
alias[trigger:is_primary_heir_of] = scope[character]

### Is the scope character a ruler (holds any title)?
## scope = character
alias[trigger:is_ruler] = bool

### Is the character a sibling of the target character?
## scope = character
alias[trigger:is_sibling_of] = scope[character]

### Is the character a spouse of the target character, and are both alive?
## scope = character
alias[trigger:is_spouse_of] = scope[character]

### Is the character a spouse of the target character, even if one or both are dead?
## scope = character
alias[trigger:is_spouse_of_even_if_dead] = scope[character]

### Is the scoped character the successor of a given Accolade?
### is_successor_of_accolade = accolade
## scope = character
alias[trigger:is_successor_of_accolade] = scope[accolade]

### Is this scope character a tax collector?
### scope:character = { is_tax_collector = yes/no }
## scope = character
alias[trigger:is_tax_collector] = bool

### Is the scoped character a tax collector of the target character
## scope = character
alias[trigger:is_tax_collector_of] = scope[character]

### Is the scope character a theocratic lessee (bishop)?
## scope = character
alias[trigger:is_theocratic_lessee] = bool

### Is the character travelling and part of the entourage? (travel leader is part of the entourage)
## scope = character
alias[trigger:is_travel_entourage_character] = bool

### Is the character travelling and the active travel leader?
## scope = character
alias[trigger:is_travel_leader] = bool

### Is the character currently travelling?
## scope = character
alias[trigger:is_travelling] = bool

### Is the scoped character someone else's tributary?
## scope = character
alias[trigger:is_tributary] = bool

### Is the scoped character a direct tributary of the target character?
## scope = character
alias[trigger:is_tributary_of] = scope[character]

### Is the scoped character a direct or indirect tributary of the target character due to cascading tributaries?
## scope = character
alias[trigger:is_tributary_of_suzerain_or_above] = scope[character]

### Is the character a twin of the target character?
## scope = character
alias[trigger:is_twin_of] = scope[character]

### Is the unborn a child of a concubine?
## scope = character
alias[trigger:is_unborn_child_of_concubine] = bool

### Is the unborn a known bastard?
## scope = character
alias[trigger:is_unborn_known_bastard] = bool

### Is the character an uncle or aunt of the target character?
## scope = character
alias[trigger:is_uncle_or_aunt_of] = scope[character]

### Is the scope character suitable as an agent for any slot in target scheme?
## scope = character
alias[trigger:is_valid_as_agent_in_any_slot] = scope[scheme]

### Is the scope character suitable as an agent for the target agent slot?
## scope = character
alias[trigger:is_valid_as_agent_in_slot] = scope[agent_slot]

### Is the target character a valid potential designated heir of the scoped character?
### (can they inherit one or more of the titles the scoped character holds?)
### is_valid_designated_heir = scope:target_character
## scope = character
alias[trigger:is_valid_designated_heir] = scope[character]

### Is the scoped character a valid candidate to take over as successor of this Accolade?
### is_valid_successor_for_accolade = accolade
## scope = character
alias[trigger:is_valid_successor_for_accolade] = scope[accolade]

### Is the character a direct vassal of the target character?
## scope = character
alias[trigger:is_vassal_of] = scope[character]

### is the scope character a vassal or below of the target character? Non-rulers are not considered vassals
## scope = character
alias[trigger:is_vassal_or_below_of] = scope[character]

### Is the scoped character visibly fertile, that is: not too old if a woman, not too young and has no traits blocking having children
## scope = character
alias[trigger:is_visibly_fertile] = bool

### Does the character know the court language of the target character?
### knows_court_language_of = scope:target_character
## scope = character
alias[trigger:knows_court_language_of] = scope[character]

### Does the character know the language of the target culture?
### knows_language_of_culture = scope:target_culture
## scope = character
alias[trigger:knows_language_of_culture] = scope[culture]

### Is this character's betrothal matrilinear? False if there's no betrothal.
## scope = character
alias[trigger:matrilinear_betrothal] = bool

### Is the marriage with the spouse matrilinear?
## scope = character
alias[trigger:matrilinear_marriage] = bool

### checks whether the scope character is the owner of any currently active story
## scope = character
alias[trigger:owns_a_story] = bool

### Is this character's betrothal patrilinear? False if there's no betrothal.
## scope = character
alias[trigger:patrilinear_betrothal] = bool

### Is the marriage with the spouse patrilinear?
## scope = character
alias[trigger:patrilinear_marriage] = bool

### can the character marry the target character?
## scope = character
alias[trigger:scriptedtests_can_marry_character] = scope[character]

### Are the scope character the target character of the opposite sex?
## scope = character
alias[trigger:sex_opposite_of] = scope[character]

### Are the scope character the target character of the same sex?
## scope = character
alias[trigger:sex_same_as] = scope[character]

### Can the scoped character break the tributary it is currently a subject in?
## scope = character
alias[trigger:subject_can_break_tributary] = bool

### Can the scoped character's subject contract be modified at all, that is: they have one, they use obligation levels, and are count or above
## scope = character
alias[trigger:subject_contract_has_modifiable_obligations] = bool

### Has the scoped character's contract been blocked from modification by script via 'set_subject_contract_modification_blocked'
## scope = character
alias[trigger:subject_contract_is_blocked_from_modification] = bool

### is the target character the liege or above the scope character?
## scope = character
alias[trigger:target_is_liege_or_above] = scope[character]

### is the target character the the same character or above (in the vassal hierarchy) the scope character?
## scope = character
alias[trigger:target_is_same_character_or_above] = scope[character]

### is the target character a vassal or below of the scope character? Non-rulers are not considered vassals
## scope = character
alias[trigger:target_is_vassal_or_below] = scope[character]

### Can the scoped character's vassal contract be modified at all, that is: they have one, they use obligation levels, and are count or above
## scope = character
alias[trigger:vassal_contract_has_modifiable_obligations] = bool

### Was the scoped character a Hostage as a Child?
## scope = character
alias[trigger:was_hostage_child] = bool

### Can the scoped title be leased out?
## scope = landed_title
alias[trigger:can_be_leased_out] = bool

### Can the scope title join the faction? can_title_join_faction = faction
## scope = landed_title
alias[trigger:can_title_join_faction] = scope[faction]

### Is the scoped landed title de jure drifts toward another title?<drifting_title> = { de_jure_drifting_towards = <drift_target_title> }
## scope = landed_title
alias[trigger:de_jure_drifting_towards] = scope[landed_title]

### Has the target character nominated a successor for the scoped elective title
## scope = landed_title
alias[trigger:has_character_nominiated] = scope[character]

### Is the scope landed title connected to a holding that contains at least one disabled building?
## scope = landed_title
alias[trigger:has_disabled_building] = bool

### Is the title under a lease that can be revoked manually?
## scope = landed_title
alias[trigger:has_revokable_lease] = bool

### Has the user set a specific coat of arms for this title?
## scope = landed_title
alias[trigger:has_user_set_coa] = bool

### Is the scope landed title connected to a holding that cannot be governed by the current lessee or holder?
## scope = landed_title
alias[trigger:has_wrong_holding_type] = bool

### Is title in the scope a capital barony?
## scope = landed_title
alias[trigger:is_capital_barony] = bool

### Is the county coastal (next to sea, not including lakes)?
## scope = landed_title
alias[trigger:is_coastal_county] = bool

### Is the scope landed title contested in any war?
## scope = landed_title
alias[trigger:is_contested] = bool

### is the title de facto liege or above the target title?
## scope = landed_title
alias[trigger:is_de_facto_liege_or_above_target] = scope[landed_title]

### is the title de jure liege or above the target title?
## scope = landed_title
alias[trigger:is_de_jure_liege_or_above_target] = scope[landed_title]

### Is this title a head of faith title
## scope = landed_title
alias[trigger:is_head_of_faith] = bool

### Is the scope landed title a holy order?
## scope = landed_title
alias[trigger:is_holy_order] = bool

### Is the barony a holy site of any faith? is_holy_site = yes
## scope = landed_title
alias[trigger:is_holy_site] = bool

### Does the target character control a holy site of the scoped object
### is_holy_site_controlled_by = root
## scope = landed_title
alias[trigger:is_holy_site_controlled_by] = scope[character]

### Is the barony a holy site of the given faith? is_holy_site_of = some faith
## scope = landed_title
alias[trigger:is_holy_site_of] = scope[faith]

### Is the scoped county important for target title?
### scope:county = { is_important_location = scope:title }
## scope = landed_title
alias[trigger:is_important_location] = scope[landed_title]

### Is the county next to a lake?
## scope = landed_title
alias[trigger:is_lakeside_county] = bool

### Is this title considered a landless type title?
## scope = landed_title
alias[trigger:is_landless_type_title] = bool

### Is the scoped title leased out?
## scope = landed_title
alias[trigger:is_leased_out] = bool

### Is the scope landed title a mercenary company?
## scope = landed_title
alias[trigger:is_mercenary_company] = bool

### Is the scoped Landed Title currently target of a migration? Is a nomadic ruler migrating in any county of this Title?
### This trigger will evaluate as true if a Migration exists that either:
### * targets the title in scope
### * targets any of its De Jure Lieges
### * targets one of its De Jure Vassals
### usage:
### <scope:title> = {
### 
### is_migration_target = yes/no
### }
## scope = landed_title
alias[trigger:is_migration_target] = bool

### Is this landed title adjacent to the character's realm
### is_neighbor_to_realm = character
## scope = landed_title
alias[trigger:is_neighbor_to_realm] = scope[character]

### Is this title used by noble family to allow landless playable
## scope = landed_title
alias[trigger:is_noble_family_title] = bool

### Is this title used by a nomad to allow landless playable
## scope = landed_title
alias[trigger:is_nomad_title] = bool

### Is the county riverside?
## scope = landed_title
alias[trigger:is_riverside_county] = bool

### Is title in the scope created?
## scope = landed_title
alias[trigger:is_title_created] = bool

### Is this title titular (has no dejure counties in it, and is not a barony/county)?
## scope = landed_title
alias[trigger:is_titular] = bool

### Is the scoped title leased out to any holy order?
## scope = landed_title
alias[trigger:is_under_holy_order_lease] = bool

### is the target title de facto liege or above?
## scope = landed_title
alias[trigger:target_is_de_facto_liege_or_above] = scope[landed_title]

### is the target title de jure liege or above?
## scope = landed_title
alias[trigger:target_is_de_jure_liege_or_above] = scope[landed_title]

### Is the scope title a member of a faction?
## scope = landed_title
alias[trigger:title_is_a_faction_member] = bool

### Will the title leave the sub-realm of the character on the right-hand-side upon succession? That is, is the first heir in someone outside the sub-realm, and the highest tier title they'll inherit from the person holding the title is not higher than their current tier
## scope = landed_title
alias[trigger:title_will_leave_sub_realm_on_succession] = scope[character]

### Does the scoped county title use County Fertility?
### uses_county_fertility = yes/no
## scope = landed_title
alias[trigger:uses_county_fertility] = bool

### Can the scope faction press demands?
## scope = faction
alias[trigger:faction_can_press_demands] = bool

### Is the scope faction at war?
## scope = faction
alias[trigger:faction_is_at_war] = bool

### Has the faction a special character assigned?
## scope = faction
alias[trigger:has_special_character] = bool

### Has the faction a special title assigned?
## scope = faction
alias[trigger:has_special_title] = bool

### Is this side allowed to retreat early (when losing)? (set via script effect `set_allow_early_retreat = yes`)
### allow_early_retreat = yes
## scope = combat_side
alias[trigger:allow_early_retreat] = bool

### Is this side disallowed from retreating via script? (via effect `set_disallowed_retreat = yes`)
### disallowed_retreat = yes
## scope = combat_side
alias[trigger:disallowed_retreat] = bool

### whether the combat side was the attacker or not
## scope = combat_side
alias[trigger:is_combat_side_attacker] = bool

### is this side the winner of the combat
## scope = combat_side
alias[trigger:is_combat_side_pursuing] = bool

### is this side defeated in the combat
## scope = combat_side
alias[trigger:is_combat_side_retreating] = bool

### is this side the forced winner of the combat? (via `forced_winner = yes`)
### is_forced_winner = yes
## scope = combat_side
alias[trigger:is_forced_winner] = bool

### Is this side skipping the persuit phase (if losing)? (set via script effect `set_skip_pursuit = yes`)
### skip_pursuit = yes
## scope = combat_side
alias[trigger:skip_pursuit] = bool

### Does the scoped domicile use culture and faith?
## scope = domicile
alias[trigger:domicile_uses_culture_and_faith] = bool

### Does the scoped domicile use provisions?
## scope = domicile
alias[trigger:domicile_uses_provisions] = bool

### Does the scoped domicile have an ongoing construction?)
### scope:domicile = {
### 
### has_ongoing_construction = yes/no
### }
## scope = domicile
alias[trigger:has_ongoing_domicile_construction] = bool

