enums = {
    # Aren't these just value fields?
    enum[weight_chance_modifier_operators] = {
        add
        subtract
        multiply
        divide
        factor
    }
}

# TODO: Figure out if the chance-weight difference is really needed

# This should all probably be combined into a weight alias.

### Appears in the tooltip only if the conditions are fulfilled.
alias[weight:modifier] = single_alias_right[weight_chance_modifier]
alias[weight:compatibility_modifier] = {
    ## cardinality = 0..1
    alias_name[trigger] = alias_match_left[trigger]
    ## cardinality = 0..1
    who = scope[character]
    compatibility_target = scope[character]
    multiplier = value_field
    multiplier = single_alias_right[score_formula]
    multiplier = alias_keys_field[int_value]
    ## cardinality = 0..1
    min = value_field
    ## cardinality = 0..1
    min = single_alias_right[score_formula]
    ## cardinality = 0..1
    min = alias_keys_field[int_value]
    ## cardinality = 0..1
    max = value_field
    ## cardinality = 0..1
    max = single_alias_right[score_formula]
    ## cardinality = 0..1
    max = alias_keys_field[int_value]
    ## cardinality = 0..1
    ai_value_modifier = {
        ## cardinality = 0..inf
        alias_name[trigger] = alias_match_left[trigger]
        ## cardinality = 0..inf
        enum[ai_values] = int_value_field
    }
    ## cardinality = 0..inf
    opinion_modifier = single_alias_right[opinion_chance_modifier]
}

single_alias[weight_block] = {
    ## cardinality = 0..1
    base = value_field

    alias_name[weight] = alias_match_left[weight]

    ## cardinality = 0..1 # TODO: I have no idea if this is actually usuable everywhere
    min = value_field
    ## cardinality = 0..1
    min = single_alias_right[score_formula]
    ## cardinality = 0..1
    min = alias_keys_field[int_value]
    ## cardinality = 0..1
    max = value_field
    ## cardinality = 0..1
    max = single_alias_right[score_formula]
    ## cardinality = 0..1
    max = alias_keys_field[int_value]
}
### Trigger-based modifications to base
single_alias[weight_chance_modifier] = {
    ## cardinality = 0..inf
    alias_name[trigger] = alias_match_left[trigger]
    
    ## cardinality = 0..inf
    add = single_alias_right[score_formula]
    ## cardinality = 0..inf
    add = alias_keys_field[int_value]
    ## cardinality = 0..inf
    add = value_field

    ## cardinality = 0..1
    factor = single_alias_right[score_formula]
    ## cardinality = 0..1
    factor = alias_keys_field[int_value]
    ## cardinality = 0..1
    factor = value_field
    
    ## cardinality = 0..1
    desc = single_alias_right[complex_desc]
    ## cardinality = 0..1
    desc = localisation

    ## cardinality = 0..1
    trigger = single_alias_right[trigger_clause]
}
# TODO: Separate these out into target or opinion target
### Modifications to base vale based on various opinions
alias[weight:opinion_modifier] = {
    ## cardinality = 0..1
    alias_name[trigger] = alias_match_left[trigger]
    ## cardinality = 0..1
    who = scope[character]
    ## cardinality = 0..1
    opinion_target = scope[character]
    ## cardinality = 0..1
    target = scope[character]
    ## cardinality = 0..1
    multiplier = single_alias_right[score_formula]
    ## cardinality = 0..1
    multiplier = alias_keys_field[int_value]
    ## cardinality = 0..1
    multiplier = value_field
    ## cardinality = 0..1
    min = value_field
    ## cardinality = 0..1
    min = single_alias_right[score_formula]
    ## cardinality = 0..1
    min = alias_keys_field[int_value]
    ## cardinality = 0..1
    max = value_field
    ## cardinality = 0..1
    max = single_alias_right[score_formula]
    ## cardinality = 0..1
    max = alias_keys_field[int_value]
    ## cardinality = 0..1
    step = value_field
    ## cardinality = 0..1
    step = single_alias_right[score_formula]
    ## cardinality = 0..1
    step = alias_keys_field[int_value]
    ## cardinality = 0..1
    desc = single_alias_right[complex_desc]
    ## cardinality = 0..1
    desc = localisation
    # ## cardinality = 0..inf
    # enum[weight_chance_modifier_operators] = value_field

    ## cardinality = 0..1
    trigger = single_alias_right[trigger_clause]
}
alias[weight:ai_value_modifier] = {
    ## cardinality = 0..inf
    enum[weight_chance_modifier_operators] = value_field
    ## cardinality = 0..inf
    alias_name[trigger] = alias_match_left[trigger]
    ## cardinality = 0..1
    desc = single_alias_right[complex_desc]
    ## cardinality = 0..1
    desc = localisation
    ## cardinality = 0..inf
    enum[ai_value] = int_value_field

    ## cardinality = 0..1
    min = value_field
    ## cardinality = 0..1
    min = single_alias_right[score_formula]
    ## cardinality = 0..1
    min = alias_keys_field[int_value]
    ## cardinality = 0..1
    max = value_field
    ## cardinality = 0..1
    max = single_alias_right[score_formula]
    ## cardinality = 0..1
    max = alias_keys_field[int_value]

    ## cardinality = 0..1
    who = scope[character]

    ## cardinality = 0..1
    trigger = single_alias_right[trigger_clause]
}

alias[weight:compare_modifier] = {
    ## cardinality = 0..1
    target = scope_field
    ## cardinality = 0..1
    alias_name[trigger] = alias_match_left[trigger]
    ## cardinality = 0..1
    skill = enum[event_skills]
    ## cardinality = 0..1
    value = value_field
    ## cardinality = 0..1
    value = alias_keys_field[int_value]
    ## cardinality = 0..1
    value = single_alias_right[score_formula]
    ## cardinality = 0..1
    offset = value_field
    ## cardinality = 0..1
    offset = alias_keys_field[int_value]
    ## cardinality = 0..1
    offset = single_alias_right[score_formula]
    ## cardinality = 0..1
    multiplier = value_field
    ## cardinality = 0..1
    multiplier = alias_keys_field[int_value]
    ## cardinality = 0..1
    multiplier = single_alias_right[score_formula]
    ## cardinality = 0..1
    min = value_field
    ## cardinality = 0..1
    min = alias_keys_field[int_value]
    ## cardinality = 0..1
    min = single_alias_right[score_formula]
    ## cardinality = 0..1
    max = value_field
    ## cardinality = 0..1
    max = alias_keys_field[int_value]
    ## cardinality = 0..1
    max = single_alias_right[score_formula]
    ## cardinality = 0..1
    step = value_field
    ## cardinality = 0..1
    step = alias_keys_field[int_value]
    ## cardinality = 0..1
    step = single_alias_right[score_formula]
    ## cardinality = 0..1
    desc = single_alias_right[complex_desc]
    ## cardinality = 0..1
    desc = localisation

    ## cardinality = 0..1
    trigger = single_alias_right[trigger_clause] # TODO: Can this be used for all of them?
}

alias[weight:scheme_modifier] = {
    object = scope[scheme]
    target = scope_field
}

alias[weight:activity_modifier] = {
    object = scope[activity]
    target = scope[character] # TODO: Correct?
}

alias[weight:first_valid] = single_alias_right[chance_block]

alias[weight:<scripted_modifier>] = bool


single_alias[chance_block] = {
    # TODO: Requires further testing, might necessiate splitting into chance_block and chance_block_with_base or something
    ## cardinality = 0..1
    base = float
    ## cardinality = 0..inf
    alias_name[weight] = alias_match_left[weight]

    ## cardinality = 0..1 # TODO: I have no idea if this is actually usuable everywhere
    min = value_field
    ## cardinality = 0..1
    min = single_alias_right[score_formula]
    ## cardinality = 0..1
    min = alias_keys_field[int_value]
    ## cardinality = 0..1
    max = value_field
    ## cardinality = 0..1
    max = single_alias_right[score_formula]
    ## cardinality = 0..1
    max = alias_keys_field[int_value]
}
