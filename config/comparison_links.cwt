links = {
    squared_distance = {
        desc = "How far away is the province/barony/county from the target? Measured in map pixels. Squared for performance reasons (square root is expensive). squared_distance = { target = some province/barony/county value > 10000 }"
        type = value
        from_argument = yes
        prefix = squared_distance:
        data_source = scope[landed_title]
        input_scopes = { landed_title province }
        output_scope = any
    }
    <lifestyle>_perk_points = {
        desc = "How many perk points available does the character have?"
        type = value
        input_scopes = character
        output_scope = any
    }
    <lifestyle>_perks = {
        desc = "How many perks from this lifestyle does the character have?"
        type = value
        input_scopes = character
        output_scope = any
    }
    <lifestyle>_unlockable_perks = {
        desc = "How many perks from this lifestyle can the character currently unlock? This checks that they have the parent perks, and that the can_be_picked is met. It doesn't check perk points "
        type = value
        input_scopes = character
        output_scope = any
    }
    <lifestyle>_xp = {
        desc = "How many perk points available does the character have?"
        type = value
        input_scopes = character
        output_scope = any
    }
    <legacy>_perks = {
        desc = "How many perks in the lifestyle does this dynasty have?"
        type = value
        input_scopes = dynasty
        output_scope = any
    }
    perks_in_<lifestyle> = {
        desc = "How many perks does this lifestyle have?"
        type = value
        input_scopes = any
        output_scope = any
    }
    perks_in_tree = {
        desc = "Does the character have this many perk points assigned to this tree? perks_in_tree = { tree = tree_key value > 5 }"
        type = value
        from_argument = yes
        prefix = perks_in_tree:
        data_source = enum[perk_tree]
        input_scopes = character
        output_scope = any
    }
}